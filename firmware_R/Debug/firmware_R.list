
firmware_R.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000361c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a20  08003a20  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08003a20  08003a20  00013a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a28  08003a28  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a2c  08003a2c  00013a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000004  08003a34  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003a34  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009447  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bb0  00000000  00000000  000294be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  0002b070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000079b  00000000  00000000  0002bac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d3ee  00000000  00000000  0002c25b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000826e  00000000  00000000  00049649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3839  00000000  00000000  000518b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a94  00000000  00000000  000f50f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000f7b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080037c8 	.word	0x080037c8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080037c8 	.word	0x080037c8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	683a      	ldr	r2, [r7, #0]
 800050e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	683a      	ldr	r2, [r7, #0]
 800052a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	619a      	str	r2, [r3, #24]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	041a      	lsls	r2, r3, #16
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	619a      	str	r2, [r3, #24]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
	...

080005ac <Duty_Control_Velocity>:
	dst->RPM = (60.0 * dst->m1) / (Tc * CPR);
	dst->DEGREE += (dst->m1 / (CPR / 360.0));
}

void Duty_Control_Velocity(DUTY* dst, DIRECTION* DIRx, GPIO_TypeDef* GPIOx, uint16_t PINx, TIM_TypeDef* TIMx, uint8_t CHx, int target)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
 80005b8:	807b      	strh	r3, [r7, #2]
	dst->duty = target;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	6a3a      	ldr	r2, [r7, #32]
 80005be:	601a      	str	r2, [r3, #0]

	if(dst->duty > dst->dutylimit)
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	dd04      	ble.n	80005d6 <Duty_Control_Velocity+0x2a>
	{
		dst->duty = dst->dutylimit;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	e00b      	b.n	80005ee <Duty_Control_Velocity+0x42>
	}
	else if(dst->duty < -dst->dutylimit)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	425b      	negs	r3, r3
 80005e0:	429a      	cmp	r2, r3
 80005e2:	da04      	bge.n	80005ee <Duty_Control_Velocity+0x42>
	{
		dst->duty = -dst->dutylimit;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	425a      	negs	r2, r3
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	601a      	str	r2, [r3, #0]
	}

	if(dst->duty < 0)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	da6e      	bge.n	80006d4 <Duty_Control_Velocity+0x128>
	{
		if(DIRx->FrontMotorDirection == RESET)
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d134      	bne.n	8000668 <Duty_Control_Velocity+0xbc>
		{
			LL_GPIO_SetOutputPin(GPIOx, PINx);
 80005fe:	887b      	ldrh	r3, [r7, #2]
 8000600:	4619      	mov	r1, r3
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f7ff ffb4 	bl	8000570 <LL_GPIO_SetOutputPin>
			//HAL_GPIO_WritePin(GPIOx, PINx, GPIO_PIN_SET);

			switch(CHx)
 8000608:	7f3b      	ldrb	r3, [r7, #28]
 800060a:	3b01      	subs	r3, #1
 800060c:	2b03      	cmp	r3, #3
 800060e:	f200 80c5 	bhi.w	800079c <Duty_Control_Velocity+0x1f0>
 8000612:	a201      	add	r2, pc, #4	; (adr r2, 8000618 <Duty_Control_Velocity+0x6c>)
 8000614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000618:	08000629 	.word	0x08000629
 800061c:	08000639 	.word	0x08000639
 8000620:	08000649 	.word	0x08000649
 8000624:	08000659 	.word	0x08000659
			{
			case 1:
			{
				LL_TIM_OC_SetCompareCH1(TIMx, -dst->duty);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	425b      	negs	r3, r3
 800062e:	4619      	mov	r1, r3
 8000630:	69b8      	ldr	r0, [r7, #24]
 8000632:	f7ff ff65 	bl	8000500 <LL_TIM_OC_SetCompareCH1>
				//TIMx->CCR1 = -dst->duty;
				break;
 8000636:	e0b1      	b.n	800079c <Duty_Control_Velocity+0x1f0>
			}
			case 2:
			{
				LL_TIM_OC_SetCompareCH2(TIMx, -dst->duty);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	425b      	negs	r3, r3
 800063e:	4619      	mov	r1, r3
 8000640:	69b8      	ldr	r0, [r7, #24]
 8000642:	f7ff ff6b 	bl	800051c <LL_TIM_OC_SetCompareCH2>
				//TIMx->CCR2 = -dst->duty;
				break;
 8000646:	e0a9      	b.n	800079c <Duty_Control_Velocity+0x1f0>
			}
			case 3:
			{
				LL_TIM_OC_SetCompareCH3(TIMx, -dst->duty);
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	425b      	negs	r3, r3
 800064e:	4619      	mov	r1, r3
 8000650:	69b8      	ldr	r0, [r7, #24]
 8000652:	f7ff ff71 	bl	8000538 <LL_TIM_OC_SetCompareCH3>
				//TIMx->CCR3 = -dst->duty;
				break;
 8000656:	e0a1      	b.n	800079c <Duty_Control_Velocity+0x1f0>
			}
			case 4:
			{
				LL_TIM_OC_SetCompareCH4(TIMx, -dst->duty);
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	425b      	negs	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	69b8      	ldr	r0, [r7, #24]
 8000662:	f7ff ff77 	bl	8000554 <LL_TIM_OC_SetCompareCH4>
				//TIMx->CCR4 = -dst->duty;
				break;
 8000666:	e099      	b.n	800079c <Duty_Control_Velocity+0x1f0>
			}
			}
		}
		else
		{
			LL_GPIO_ResetOutputPin(GPIOx, PINx);
 8000668:	887b      	ldrh	r3, [r7, #2]
 800066a:	4619      	mov	r1, r3
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ff8d 	bl	800058c <LL_GPIO_ResetOutputPin>
			//HAL_GPIO_WritePin(GPIOx, PINx, GPIO_PIN_RESET);

			switch(CHx)
 8000672:	7f3b      	ldrb	r3, [r7, #28]
 8000674:	3b01      	subs	r3, #1
 8000676:	2b03      	cmp	r3, #3
 8000678:	f200 8090 	bhi.w	800079c <Duty_Control_Velocity+0x1f0>
 800067c:	a201      	add	r2, pc, #4	; (adr r2, 8000684 <Duty_Control_Velocity+0xd8>)
 800067e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000682:	bf00      	nop
 8000684:	08000695 	.word	0x08000695
 8000688:	080006a5 	.word	0x080006a5
 800068c:	080006b5 	.word	0x080006b5
 8000690:	080006c5 	.word	0x080006c5
			{
			case 1:
			{
				LL_TIM_OC_SetCompareCH1(TIMx, -dst->duty);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	425b      	negs	r3, r3
 800069a:	4619      	mov	r1, r3
 800069c:	69b8      	ldr	r0, [r7, #24]
 800069e:	f7ff ff2f 	bl	8000500 <LL_TIM_OC_SetCompareCH1>
				//TIMx->CCR1 = -dst->duty;
				break;
 80006a2:	e07b      	b.n	800079c <Duty_Control_Velocity+0x1f0>
			}
			case 2:
			{
				LL_TIM_OC_SetCompareCH2(TIMx, -dst->duty);
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	425b      	negs	r3, r3
 80006aa:	4619      	mov	r1, r3
 80006ac:	69b8      	ldr	r0, [r7, #24]
 80006ae:	f7ff ff35 	bl	800051c <LL_TIM_OC_SetCompareCH2>
				//TIMx->CCR2 = -dst->duty;
				break;
 80006b2:	e073      	b.n	800079c <Duty_Control_Velocity+0x1f0>
			}
			case 3:
			{
				LL_TIM_OC_SetCompareCH3(TIMx, -dst->duty);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	425b      	negs	r3, r3
 80006ba:	4619      	mov	r1, r3
 80006bc:	69b8      	ldr	r0, [r7, #24]
 80006be:	f7ff ff3b 	bl	8000538 <LL_TIM_OC_SetCompareCH3>
				//TIMx->CCR3 = -dst->duty;
				break;
 80006c2:	e06b      	b.n	800079c <Duty_Control_Velocity+0x1f0>
			}
			case 4:
			{
				LL_TIM_OC_SetCompareCH4(TIMx, -dst->duty);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	425b      	negs	r3, r3
 80006ca:	4619      	mov	r1, r3
 80006cc:	69b8      	ldr	r0, [r7, #24]
 80006ce:	f7ff ff41 	bl	8000554 <LL_TIM_OC_SetCompareCH4>
				//TIMx->CCR4 = -dst->duty;
				break;
 80006d2:	e063      	b.n	800079c <Duty_Control_Velocity+0x1f0>
			}
		}
	}
	else
	{
		if(DIRx->FrontMotorDirection == RESET)
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d12f      	bne.n	800073c <Duty_Control_Velocity+0x190>
		{
			LL_GPIO_ResetOutputPin(GPIOx, PINx);
 80006dc:	887b      	ldrh	r3, [r7, #2]
 80006de:	4619      	mov	r1, r3
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ff53 	bl	800058c <LL_GPIO_ResetOutputPin>
			//HAL_GPIO_WritePin(GPIOx, PINx, GPIO_PIN_RESET);

			switch(CHx)
 80006e6:	7f3b      	ldrb	r3, [r7, #28]
 80006e8:	3b01      	subs	r3, #1
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d856      	bhi.n	800079c <Duty_Control_Velocity+0x1f0>
 80006ee:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <Duty_Control_Velocity+0x148>)
 80006f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f4:	08000705 	.word	0x08000705
 80006f8:	08000713 	.word	0x08000713
 80006fc:	08000721 	.word	0x08000721
 8000700:	0800072f 	.word	0x0800072f
			{
			case 1:
			{
				LL_TIM_OC_SetCompareCH1(TIMx, dst->duty);
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	69b8      	ldr	r0, [r7, #24]
 800070c:	f7ff fef8 	bl	8000500 <LL_TIM_OC_SetCompareCH1>
				//TIMx->CCR1 = dst->duty;
				break;
 8000710:	e044      	b.n	800079c <Duty_Control_Velocity+0x1f0>
			}
			case 2:
			{
				LL_TIM_OC_SetCompareCH2(TIMx, dst->duty);
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4619      	mov	r1, r3
 8000718:	69b8      	ldr	r0, [r7, #24]
 800071a:	f7ff feff 	bl	800051c <LL_TIM_OC_SetCompareCH2>
				//TIMx->CCR2 = dst->duty;
				break;
 800071e:	e03d      	b.n	800079c <Duty_Control_Velocity+0x1f0>
			}
			case 3:
			{
				LL_TIM_OC_SetCompareCH3(TIMx, dst->duty);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	69b8      	ldr	r0, [r7, #24]
 8000728:	f7ff ff06 	bl	8000538 <LL_TIM_OC_SetCompareCH3>
				//TIMx->CCR3 = dst->duty;
				break;
 800072c:	e036      	b.n	800079c <Duty_Control_Velocity+0x1f0>
			}
			case 4:
			{
				LL_TIM_OC_SetCompareCH4(TIMx, dst->duty);
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4619      	mov	r1, r3
 8000734:	69b8      	ldr	r0, [r7, #24]
 8000736:	f7ff ff0d 	bl	8000554 <LL_TIM_OC_SetCompareCH4>
				//TIMx->CCR4 = dst->duty;
				break;
 800073a:	e02f      	b.n	800079c <Duty_Control_Velocity+0x1f0>
			}
			}
		}
		else
		{
			LL_GPIO_SetOutputPin(GPIOx, PINx);
 800073c:	887b      	ldrh	r3, [r7, #2]
 800073e:	4619      	mov	r1, r3
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ff15 	bl	8000570 <LL_GPIO_SetOutputPin>
			//HAL_GPIO_WritePin(GPIOx, PINx, GPIO_PIN_SET);

			switch(CHx)
 8000746:	7f3b      	ldrb	r3, [r7, #28]
 8000748:	3b01      	subs	r3, #1
 800074a:	2b03      	cmp	r3, #3
 800074c:	d826      	bhi.n	800079c <Duty_Control_Velocity+0x1f0>
 800074e:	a201      	add	r2, pc, #4	; (adr r2, 8000754 <Duty_Control_Velocity+0x1a8>)
 8000750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000754:	08000765 	.word	0x08000765
 8000758:	08000773 	.word	0x08000773
 800075c:	08000781 	.word	0x08000781
 8000760:	0800078f 	.word	0x0800078f
			{
			case 1:
			{
				LL_TIM_OC_SetCompareCH1(TIMx, dst->duty);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4619      	mov	r1, r3
 800076a:	69b8      	ldr	r0, [r7, #24]
 800076c:	f7ff fec8 	bl	8000500 <LL_TIM_OC_SetCompareCH1>
				//TIMx->CCR1 = dst->duty;
				break;
 8000770:	e014      	b.n	800079c <Duty_Control_Velocity+0x1f0>
			}
			case 2:
			{
				LL_TIM_OC_SetCompareCH2(TIMx, dst->duty);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4619      	mov	r1, r3
 8000778:	69b8      	ldr	r0, [r7, #24]
 800077a:	f7ff fecf 	bl	800051c <LL_TIM_OC_SetCompareCH2>
				//TIMx->CCR2 = dst->duty;
				break;
 800077e:	e00d      	b.n	800079c <Duty_Control_Velocity+0x1f0>
			}
			case 3:
			{
				LL_TIM_OC_SetCompareCH3(TIMx, dst->duty);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	69b8      	ldr	r0, [r7, #24]
 8000788:	f7ff fed6 	bl	8000538 <LL_TIM_OC_SetCompareCH3>
				//TIMx->CCR3 = dst->duty;
				break;
 800078c:	e006      	b.n	800079c <Duty_Control_Velocity+0x1f0>
			}
			case 4:
			{
				LL_TIM_OC_SetCompareCH4(TIMx, dst->duty);
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4619      	mov	r1, r3
 8000794:	69b8      	ldr	r0, [r7, #24]
 8000796:	f7ff fedd 	bl	8000554 <LL_TIM_OC_SetCompareCH4>
				//TIMx->CCR4 = dst->duty;
				break;
 800079a:	bf00      	nop
			}
			}
		}
	}
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Protocol2_combineByte>:
 */

#include "Protocol2.h"

uint16_t Protocol2_combineByte(uint8_t lowByte, uint8_t highByte)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	460a      	mov	r2, r1
 80007ae:	71fb      	strb	r3, [r7, #7]
 80007b0:	4613      	mov	r3, r2
 80007b2:	71bb      	strb	r3, [r7, #6]
	return (highByte << 8) + lowByte;
 80007b4:	79bb      	ldrb	r3, [r7, #6]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	4413      	add	r3, r2
 80007c2:	b29b      	uxth	r3, r3
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <Protocol2_Minus8bit>:
		protocol2->txBuffer[protocol2->txState++] = ((value >> (i*8)) & 0xFF);
	}
}

int Protocol2_Minus8bit(int parameter)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	if((parameter & 0x8000) != 0x0000)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d003      	beq.n	80007ea <Protocol2_Minus8bit+0x1a>
	{
		parameter -= 65536;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80007e8:	607b      	str	r3, [r7, #4]
	}

	return parameter;
 80007ea:	687b      	ldr	r3, [r7, #4]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <Protocol2_update_crc>:
	protocol2->txBuffer[5] = (length & 0xff);
	protocol2->txBuffer[6] = ((length>>8) & 0xff);
}

unsigned short Protocol2_update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80007fe:	af00      	add	r7, sp, #0
 8000800:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000804:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000808:	6019      	str	r1, [r3, #0]
 800080a:	4611      	mov	r1, r2
 800080c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000810:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000814:	4602      	mov	r2, r0
 8000816:	801a      	strh	r2, [r3, #0]
 8000818:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800081c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000820:	460a      	mov	r2, r1
 8000822:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 8000824:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000828:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800082c:	4a28      	ldr	r2, [pc, #160]	; (80008d0 <Protocol2_update_crc+0xd8>)
 800082e:	4618      	mov	r0, r3
 8000830:	4611      	mov	r1, r2
 8000832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000836:	461a      	mov	r2, r3
 8000838:	f002 ffb8 	bl	80037ac <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++)
 800083c:	2300      	movs	r3, #0
 800083e:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000842:	e031      	b.n	80008a8 <Protocol2_update_crc+0xb0>
	{
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000844:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000848:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	0a1b      	lsrs	r3, r3, #8
 8000850:	b29a      	uxth	r2, r3
 8000852:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000856:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800085a:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 800085e:	6809      	ldr	r1, [r1, #0]
 8000860:	440b      	add	r3, r1
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b29b      	uxth	r3, r3
 8000866:	4053      	eors	r3, r2
 8000868:	b29b      	uxth	r3, r3
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000870:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000874:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	021b      	lsls	r3, r3, #8
 800087c:	b21a      	sxth	r2, r3
 800087e:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000882:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000886:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800088a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800088e:	b21b      	sxth	r3, r3
 8000890:	4053      	eors	r3, r2
 8000892:	b21a      	sxth	r2, r3
 8000894:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000898:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800089c:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 800089e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80008a2:	3301      	adds	r3, #1
 80008a4:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 80008a8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80008ac:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80008b0:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d3c4      	bcc.n	8000844 <Protocol2_update_crc+0x4c>
	}

	return crc_accum;
 80008ba:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80008be:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80008c2:	881b      	ldrh	r3, [r3, #0]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	080037e0 	.word	0x080037e0

080008d4 <Protocol2_parsing>:

void Protocol2_parsing(PROTOCOL2 *protocol2)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	protocol2->rawdata[0] = protocol2->rxBuffer[31]; //fire
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	protocol2->rawdata[1] = protocol2->rxBuffer[32]; //light
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	protocol2->rawdata[2] = Protocol2_combineByte(protocol2->rxBuffer[33], protocol2->rxBuffer[34]); //L
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000904:	4619      	mov	r1, r3
 8000906:	4610      	mov	r0, r2
 8000908:	f7ff ff4c 	bl	80007a4 <Protocol2_combineByte>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	protocol2->rawdata[3] = Protocol2_combineByte(protocol2->rxBuffer[35], protocol2->rxBuffer[36]); //L2
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000922:	4619      	mov	r1, r3
 8000924:	4610      	mov	r0, r2
 8000926:	f7ff ff3d 	bl	80007a4 <Protocol2_combineByte>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
	protocol2->rawdata[4] = Protocol2_combineByte(protocol2->rxBuffer[42], protocol2->rxBuffer[43]); //R
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000940:	4619      	mov	r1, r3
 8000942:	4610      	mov	r0, r2
 8000944:	f7ff ff2e 	bl	80007a4 <Protocol2_combineByte>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	protocol2->rawdata[5] = Protocol2_combineByte(protocol2->rxBuffer[44], protocol2->rxBuffer[45]); //R2
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800095e:	4619      	mov	r1, r3
 8000960:	4610      	mov	r0, r2
 8000962:	f7ff ff1f 	bl	80007a4 <Protocol2_combineByte>
 8000966:	4603      	mov	r3, r0
 8000968:	461a      	mov	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	protocol2->rawdata[6] = protocol2->rxBuffer[46]; //failsafe
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000976:	b29a      	uxth	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	protocol2->data[0] = protocol2->rawdata[0];
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000984:	461a      	mov	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	protocol2->data[1] = protocol2->rawdata[1];
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8000992:	461a      	mov	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	protocol2->data[2] = Protocol2_Minus8bit(protocol2->rawdata[2]);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff15 	bl	80007d0 <Protocol2_Minus8bit>
 80009a6:	4602      	mov	r2, r0
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	protocol2->data[3] = Protocol2_Minus8bit(protocol2->rawdata[3]);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff0b 	bl	80007d0 <Protocol2_Minus8bit>
 80009ba:	4602      	mov	r2, r0
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	protocol2->data[4] = Protocol2_Minus8bit(protocol2->rawdata[4]);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff01 	bl	80007d0 <Protocol2_Minus8bit>
 80009ce:	4602      	mov	r2, r0
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	protocol2->data[5] = Protocol2_Minus8bit(protocol2->rawdata[5]);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fef7 	bl	80007d0 <Protocol2_Minus8bit>
 80009e2:	4602      	mov	r2, r0
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	protocol2->data[6] = protocol2->rawdata[6];
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80009f0:	461a      	mov	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <Protocol2_readPacket>:

uint8_t Protocol2_readPacket(PROTOCOL2 *protocol2, uint8_t *packet)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
	protocol2->rxState = PROTOCOL2_HEADER_1;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < PROTOCOL2_RX_BUFFER_SIZE; i++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	e00f      	b.n	8000a36 <Protocol2_readPacket+0x36>
	{
		if(Protocol2_readByte(protocol2, packet[i]))
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f000 f811 	bl	8000a48 <Protocol2_readByte>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <Protocol2_readPacket+0x30>
		{
			return 1;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e006      	b.n	8000a3e <Protocol2_readPacket+0x3e>
	for(int i = 0; i < PROTOCOL2_RX_BUFFER_SIZE; i++)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	3301      	adds	r3, #1
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2b3f      	cmp	r3, #63	; 0x3f
 8000a3a:	ddec      	ble.n	8000a16 <Protocol2_readPacket+0x16>
		}
	}

	return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <Protocol2_readByte>:

uint8_t Protocol2_readByte(PROTOCOL2 *protocol2, uint8_t byte)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	70fb      	strb	r3, [r7, #3]
	switch (protocol2->rxState)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b03      	cmp	r3, #3
 8000a5a:	dc11      	bgt.n	8000a80 <Protocol2_readByte+0x38>
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f2c0 809b 	blt.w	8000b98 <Protocol2_readByte+0x150>
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	f200 8098 	bhi.w	8000b98 <Protocol2_readByte+0x150>
 8000a68:	a201      	add	r2, pc, #4	; (adr r2, 8000a70 <Protocol2_readByte+0x28>)
 8000a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6e:	bf00      	nop
 8000a70:	08000a87 	.word	0x08000a87
 8000a74:	08000aab 	.word	0x08000aab
 8000a78:	08000ad5 	.word	0x08000ad5
 8000a7c:	08000aff 	.word	0x08000aff
 8000a80:	2b30      	cmp	r3, #48	; 0x30
 8000a82:	d051      	beq.n	8000b28 <Protocol2_readByte+0xe0>
 8000a84:	e088      	b.n	8000b98 <Protocol2_readByte+0x150>
	{
	case PROTOCOL2_HEADER_1:
	{
		if(byte == 0xFF)
 8000a86:	78fb      	ldrb	r3, [r7, #3]
 8000a88:	2bff      	cmp	r3, #255	; 0xff
 8000a8a:	f040 8093 	bne.w	8000bb4 <Protocol2_readByte+0x16c>
		{
			protocol2->rxBuffer[protocol2->rxState] = byte;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4413      	add	r3, r2
 8000a98:	78fa      	ldrb	r2, [r7, #3]
 8000a9a:	709a      	strb	r2, [r3, #2]
			protocol2->rxState++;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000aa8:	e084      	b.n	8000bb4 <Protocol2_readByte+0x16c>
	}
	case PROTOCOL2_HEADER_2:
	{
		if(byte == 0xFF)
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
 8000aac:	2bff      	cmp	r3, #255	; 0xff
 8000aae:	d10d      	bne.n	8000acc <Protocol2_readByte+0x84>
		{
			protocol2->rxBuffer[protocol2->rxState] = byte;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	78fa      	ldrb	r2, [r7, #3]
 8000abc:	709a      	strb	r2, [r3, #2]
			protocol2->rxState++;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			protocol2->rxState = PROTOCOL2_HEADER_1;
		}
		break;
 8000aca:	e074      	b.n	8000bb6 <Protocol2_readByte+0x16e>
			protocol2->rxState = PROTOCOL2_HEADER_1;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
		break;
 8000ad2:	e070      	b.n	8000bb6 <Protocol2_readByte+0x16e>
	}
	case PROTOCOL2_HEADER_3:
	{
		if(byte == 0xFD)
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	2bfd      	cmp	r3, #253	; 0xfd
 8000ad8:	d10d      	bne.n	8000af6 <Protocol2_readByte+0xae>
		{
			protocol2->rxBuffer[protocol2->rxState] = byte;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	78fa      	ldrb	r2, [r7, #3]
 8000ae6:	709a      	strb	r2, [r3, #2]
			protocol2->rxState++;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			protocol2->rxState = PROTOCOL2_HEADER_1;
		}
		break;
 8000af4:	e05f      	b.n	8000bb6 <Protocol2_readByte+0x16e>
			protocol2->rxState = PROTOCOL2_HEADER_1;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
		break;
 8000afc:	e05b      	b.n	8000bb6 <Protocol2_readByte+0x16e>
	}
	case PROTOCOL2_HEADER_4:
	{
		if(byte == 0x00)
 8000afe:	78fb      	ldrb	r3, [r7, #3]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d10d      	bne.n	8000b20 <Protocol2_readByte+0xd8>
		{
			protocol2->rxBuffer[protocol2->rxState] = byte;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	78fa      	ldrb	r2, [r7, #3]
 8000b10:	709a      	strb	r2, [r3, #2]
			protocol2->rxState++;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	3301      	adds	r3, #1
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			protocol2->rxState = PROTOCOL2_HEADER_1;
		}
		break;
 8000b1e:	e04a      	b.n	8000bb6 <Protocol2_readByte+0x16e>
			protocol2->rxState = PROTOCOL2_HEADER_1;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
		break;
 8000b26:	e046      	b.n	8000bb6 <Protocol2_readByte+0x16e>
	}
	case PROTOCOL2_CRC_2:
	{
		protocol2->rxBuffer[protocol2->rxState] = byte;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	78fa      	ldrb	r2, [r7, #3]
 8000b34:	709a      	strb	r2, [r3, #2]

		protocol2->crc_buffer = Protocol2_update_crc(0, protocol2->rxBuffer, protocol2->rxState-1);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	1c99      	adds	r1, r3, #2
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	3b01      	subs	r3, #1
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	461a      	mov	r2, r3
 8000b46:	2000      	movs	r0, #0
 8000b48:	f7ff fe56 	bl	80007f8 <Protocol2_update_crc>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		protocol2->crc_packet = Protocol2_combineByte(protocol2->rxBuffer[PROTOCOL2_CRC_2-1], protocol2->rxBuffer[PROTOCOL2_CRC_2]);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000b62:	4619      	mov	r1, r3
 8000b64:	4610      	mov	r0, r2
 8000b66:	f7ff fe1d 	bl	80007a4 <Protocol2_combineByte>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

		protocol2->rxState = PROTOCOL2_HEADER_1;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]

		if(protocol2->crc_buffer == protocol2->crc_packet)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d104      	bne.n	8000b94 <Protocol2_readByte+0x14c>
		{
			Protocol2_parsing(protocol2);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff fea2 	bl	80008d4 <Protocol2_parsing>

			return 1;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e011      	b.n	8000bb8 <Protocol2_readByte+0x170>
		}
		else
		{
			return 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	e00f      	b.n	8000bb8 <Protocol2_readByte+0x170>
		}
		break;
	}
	default:
	{
		protocol2->rxBuffer[protocol2->rxState] = byte;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	78fa      	ldrb	r2, [r7, #3]
 8000ba4:	709a      	strb	r2, [r3, #2]
		protocol2->rxState++;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	701a      	strb	r2, [r3, #0]
		break;
 8000bb2:	e000      	b.n	8000bb6 <Protocol2_readByte+0x16e>
		break;
 8000bb4:	bf00      	nop
	}
	}

	return 0;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	; (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40023800 	.word	0x40023800

08000d04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000d08:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000d0c:	f7ff ffe2 	bl	8000cd4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d10:	f7ff ff56 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ffa6 	bl	8000c6c <NVIC_EncodePriority>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4619      	mov	r1, r3
 8000d24:	200c      	movs	r0, #12
 8000d26:	f7ff ff77 	bl	8000c18 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d2a:	200c      	movs	r0, #12
 8000d2c:	f7ff ff56 	bl	8000bdc <__NVIC_EnableIRQ>

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <LL_AHB1_GRP1_EnableClock>:
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d40:	4907      	ldr	r1, [pc, #28]	; (8000d60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	40023800 	.word	0x40023800

08000d64 <LL_GPIO_ResetOutputPin>:
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	041a      	lsls	r2, r3, #16
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	619a      	str	r2, [r3, #24]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
 8000d98:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000d9a:	2080      	movs	r0, #128	; 0x80
 8000d9c:	f7ff ffca 	bl	8000d34 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000da0:	2002      	movs	r0, #2
 8000da2:	f7ff ffc7 	bl	8000d34 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000da6:	2004      	movs	r0, #4
 8000da8:	f7ff ffc4 	bl	8000d34 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff ffc1 	bl	8000d34 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14|LL_GPIO_PIN_15);
 8000db2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000db6:	4816      	ldr	r0, [pc, #88]	; (8000e10 <MX_GPIO_Init+0x8c>)
 8000db8:	f7ff ffd4 	bl	8000d64 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_8|LL_GPIO_PIN_9);
 8000dbc:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000dc0:	4814      	ldr	r0, [pc, #80]	; (8000e14 <MX_GPIO_Init+0x90>)
 8000dc2:	f7ff ffcf 	bl	8000d64 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8000dc6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000dca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	463b      	mov	r3, r7
 8000dde:	4619      	mov	r1, r3
 8000de0:	480b      	ldr	r0, [pc, #44]	; (8000e10 <MX_GPIO_Init+0x8c>)
 8000de2:	f001 fc75 	bl	80026d0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8000de6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dec:	2301      	movs	r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <MX_GPIO_Init+0x90>)
 8000e02:	f001 fc65 	bl	80026d0 <LL_GPIO_Init>

}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40020400 	.word	0x40020400
 8000e14:	40020800 	.word	0x40020800

08000e18 <__NVIC_SetPriorityGrouping>:
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_GetPriorityGrouping>:
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_SetPriority>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	; (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000f42:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <LL_DMA_EnableStream+0x3c>)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <LL_DMA_EnableStream+0x3c>)
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	440a      	add	r2, r1
 8000f58:	7812      	ldrb	r2, [r2, #0]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	440a      	add	r2, r1
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6013      	str	r3, [r2, #0]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	080039e0 	.word	0x080039e0

08000f78 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <LL_DMA_SetDataLength+0x44>)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	4413      	add	r3, r2
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4413      	add	r3, r2
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	0c1b      	lsrs	r3, r3, #16
 8000f96:	041b      	lsls	r3, r3, #16
 8000f98:	4908      	ldr	r1, [pc, #32]	; (8000fbc <LL_DMA_SetDataLength+0x44>)
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	440a      	add	r2, r1
 8000f9e:	7812      	ldrb	r2, [r2, #0]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	440a      	add	r2, r1
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	604b      	str	r3, [r1, #4]
}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	080039e0 	.word	0x080039e0

08000fc0 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	2b40      	cmp	r3, #64	; 0x40
 8000fd2:	d114      	bne.n	8000ffe <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 8000fd4:	4a17      	ldr	r2, [pc, #92]	; (8001034 <LL_DMA_ConfigAddresses+0x74>)
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	4413      	add	r3, r2
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 8000fe8:	4a12      	ldr	r2, [pc, #72]	; (8001034 <LL_DMA_ConfigAddresses+0x74>)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 8000ffc:	e013      	b.n	8001026 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 8000ffe:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <LL_DMA_ConfigAddresses+0x74>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 8001012:	4a08      	ldr	r2, [pc, #32]	; (8001034 <LL_DMA_ConfigAddresses+0x74>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4413      	add	r3, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	461a      	mov	r2, r3
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	60d3      	str	r3, [r2, #12]
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	080039e0 	.word	0x080039e0

08001038 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <LL_RCC_HSI_Enable+0x1c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <LL_RCC_HSI_Enable+0x1c>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800

08001058 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <LL_RCC_HSI_IsReady+0x20>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b02      	cmp	r3, #2
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	b2db      	uxtb	r3, r3
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	40023800 	.word	0x40023800

0800107c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4904      	ldr	r1, [pc, #16]	; (80010a4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001092:	4313      	orrs	r3, r2
 8001094:	600b      	str	r3, [r1, #0]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <LL_RCC_SetSysClkSource+0x24>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f023 0203 	bic.w	r2, r3, #3
 80010b8:	4904      	ldr	r1, [pc, #16]	; (80010cc <LL_RCC_SetSysClkSource+0x24>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4313      	orrs	r3, r2
 80010be:	608b      	str	r3, [r1, #8]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40023800 	.word	0x40023800

080010d0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <LL_RCC_GetSysClkSource+0x18>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 030c 	and.w	r3, r3, #12
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800

080010ec <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <LL_RCC_SetAHBPrescaler+0x24>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010fc:	4904      	ldr	r1, [pc, #16]	; (8001110 <LL_RCC_SetAHBPrescaler+0x24>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4313      	orrs	r3, r2
 8001102:	608b      	str	r3, [r1, #8]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40023800 	.word	0x40023800

08001114 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <LL_RCC_SetAPB1Prescaler+0x24>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001124:	4904      	ldr	r1, [pc, #16]	; (8001138 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4313      	orrs	r3, r2
 800112a:	608b      	str	r3, [r1, #8]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40023800 	.word	0x40023800

0800113c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800114c:	4904      	ldr	r1, [pc, #16]	; (8001160 <LL_RCC_SetAPB2Prescaler+0x24>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4313      	orrs	r3, r2
 8001152:	608b      	str	r3, [r1, #8]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	40023800 	.word	0x40023800

08001164 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <LL_RCC_SetTIMPrescaler+0x28>)
 800116e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001172:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001176:	4905      	ldr	r1, [pc, #20]	; (800118c <LL_RCC_SetTIMPrescaler+0x28>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4313      	orrs	r3, r2
 800117c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	40023800 	.word	0x40023800

08001190 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <LL_RCC_PLL_Enable+0x1c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <LL_RCC_PLL_Enable+0x1c>)
 800119a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800

080011b0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <LL_RCC_PLL_IsReady+0x24>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011c0:	bf0c      	ite	eq
 80011c2:	2301      	moveq	r3, #1
 80011c4:	2300      	movne	r3, #0
 80011c6:	b2db      	uxtb	r3, r3
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800

080011d8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	68f9      	ldr	r1, [r7, #12]
 80011f0:	68ba      	ldr	r2, [r7, #8]
 80011f2:	4311      	orrs	r1, r2
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	0192      	lsls	r2, r2, #6
 80011f8:	430a      	orrs	r2, r1
 80011fa:	490c      	ldr	r1, [pc, #48]	; (800122c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001208:	4908      	ldr	r1, [pc, #32]	; (800122c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	4313      	orrs	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8001218:	4904      	ldr	r1, [pc, #16]	; (800122c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	4313      	orrs	r3, r2
 800121e:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	40023800 	.word	0x40023800
 8001230:	ffbf8000 	.word	0xffbf8000

08001234 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <LL_APB1_GRP1_EnableClock+0x2c>)
 800123e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001240:	4907      	ldr	r1, [pc, #28]	; (8001260 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4313      	orrs	r3, r2
 8001246:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <LL_APB1_GRP1_EnableClock+0x2c>)
 800124a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4013      	ands	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001252:	68fb      	ldr	r3, [r7, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	40023800 	.word	0x40023800

08001264 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <LL_APB2_GRP1_EnableClock+0x2c>)
 800126e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001270:	4907      	ldr	r1, [pc, #28]	; (8001290 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4313      	orrs	r3, r2
 8001276:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <LL_APB2_GRP1_EnableClock+0x2c>)
 800127a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4013      	ands	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001282:	68fb      	ldr	r3, [r7, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	40023800 	.word	0x40023800

08001294 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <LL_FLASH_SetLatency+0x24>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 020f 	bic.w	r2, r3, #15
 80012a4:	4904      	ldr	r1, [pc, #16]	; (80012b8 <LL_FLASH_SetLatency+0x24>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	40023c00 	.word	0x40023c00

080012bc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <LL_FLASH_GetLatency+0x18>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 030f 	and.w	r3, r3, #15
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023c00 	.word	0x40023c00

080012d8 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <LL_PWR_EnableOverDriveMode+0x1c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <LL_PWR_EnableOverDriveMode+0x1c>)
 80012e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40007000 	.word	0x40007000

080012f8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001308:	4904      	ldr	r1, [pc, #16]	; (800131c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4313      	orrs	r3, r2
 800130e:	600b      	str	r3, [r1, #0]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40007000 	.word	0x40007000

08001320 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001330:	bf0c      	ite	eq
 8001332:	2301      	moveq	r3, #1
 8001334:	2300      	movne	r3, #0
 8001336:	b2db      	uxtb	r3, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40007000 	.word	0x40007000

08001348 <LL_TIM_EnableCounter>:
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f043 0201 	orr.w	r2, r3, #1
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	601a      	str	r2, [r3, #0]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_TIM_CC_EnableChannel>:
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1a      	ldr	r2, [r3, #32]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	621a      	str	r2, [r3, #32]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f043 0201 	orr.w	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60da      	str	r2, [r3, #12]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b089      	sub	sp, #36	; 0x24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	330c      	adds	r3, #12
 80013b6:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	e853 3f00 	ldrex	r3, [r3]
 80013be:	60bb      	str	r3, [r7, #8]
   return(result);
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	f043 0310 	orr.w	r3, r3, #16
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	330c      	adds	r3, #12
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	61ba      	str	r2, [r7, #24]
 80013d0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013d2:	6979      	ldr	r1, [r7, #20]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	e841 2300 	strex	r3, r2, [r1]
 80013da:	613b      	str	r3, [r7, #16]
   return(result);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1e7      	bne.n	80013b2 <LL_USART_EnableIT_IDLE+0x8>
}
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
 80013e6:	3724      	adds	r7, #36	; 0x24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3314      	adds	r3, #20
 80013fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	e853 3f00 	ldrex	r3, [r3]
 8001404:	60bb      	str	r3, [r7, #8]
   return(result);
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3314      	adds	r3, #20
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	61ba      	str	r2, [r7, #24]
 8001416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001418:	6979      	ldr	r1, [r7, #20]
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	e841 2300 	strex	r3, r2, [r1]
 8001420:	613b      	str	r3, [r7, #16]
   return(result);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1e7      	bne.n	80013f8 <LL_USART_EnableDMAReq_RX+0x8>
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3304      	adds	r3, #4
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <SetDirection>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SetDirection()
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
	Direction1.FrontEncoderDirection = CW;
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <SetDirection+0x28>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
	Direction1.FrontMotorDirection = SET;
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <SetDirection+0x28>)
 800145c:	2201      	movs	r2, #1
 800145e:	601a      	str	r2, [r3, #0]

	Direction2.FrontEncoderDirection = CW;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <SetDirection+0x2c>)
 8001462:	2200      	movs	r2, #0
 8001464:	605a      	str	r2, [r3, #4]
	Direction2.FrontMotorDirection = SET;
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <SetDirection+0x2c>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000020 	.word	0x20000020
 800147c:	20000028 	.word	0x20000028

08001480 <SetDutyControl>:

void SetDutyControl()
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
	MotorDutyVelocity1.duty = 0;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <SetDutyControl+0x2c>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
	MotorDutyVelocity1.dutylimit = 900;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <SetDutyControl+0x2c>)
 800148c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001490:	605a      	str	r2, [r3, #4]

	MotorDutyVelocity2.duty = 0;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <SetDutyControl+0x30>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
	MotorDutyVelocity2.dutylimit = 900;
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <SetDutyControl+0x30>)
 800149a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800149e:	605a      	str	r2, [r3, #4]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000030 	.word	0x20000030
 80014b0:	20000038 	.word	0x20000038

080014b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  SetDirection();
 80014ba:	f7ff ffc9 	bl	8001450 <SetDirection>
  SetDutyControl();
 80014be:	f7ff ffdf 	bl	8001480 <SetDutyControl>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80014c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014c6:	f7ff fecd 	bl	8001264 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80014ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80014ce:	f7ff feb1 	bl	8001234 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d2:	2003      	movs	r0, #3
 80014d4:	f7ff fca0 	bl	8000e18 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80014d8:	f7ff fcc2 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 80014dc:	4603      	mov	r3, r0
 80014de:	2200      	movs	r2, #0
 80014e0:	210f      	movs	r1, #15
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fcf4 	bl	8000ed0 <NVIC_EncodePriority>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4619      	mov	r1, r3
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f7ff fcc4 	bl	8000e7c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f4:	f000 f842 	bl	800157c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f8:	f7ff fc44 	bl	8000d84 <MX_GPIO_Init>
  MX_DMA_Init();
 80014fc:	f7ff fc02 	bl	8000d04 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001500:	f000 ff26 	bl	8002350 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001504:	f000 fbe4 	bl	8001cd0 <MX_TIM1_Init>
  MX_TIM6_Init();
 8001508:	f000 fcc8 	bl	8001e9c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //uart
  LL_DMA_ConfigAddresses(DMA1,
 800150c:	4816      	ldr	r0, [pc, #88]	; (8001568 <main+0xb4>)
 800150e:	f7ff ff92 	bl	8001436 <LL_USART_DMA_GetRegAddr>
 8001512:	4602      	mov	r2, r0
 8001514:	4915      	ldr	r1, [pc, #84]	; (800156c <main+0xb8>)
 8001516:	2300      	movs	r3, #0
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	460b      	mov	r3, r1
 800151c:	2101      	movs	r1, #1
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <main+0xbc>)
 8001520:	f7ff fd4e 	bl	8000fc0 <LL_DMA_ConfigAddresses>
		  LL_DMA_STREAM_1,
		  LL_USART_DMA_GetRegAddr(USART3),
		  protocol2RX,
		  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_1, sizeof(protocol2RX));
 8001524:	2240      	movs	r2, #64	; 0x40
 8001526:	2101      	movs	r1, #1
 8001528:	4811      	ldr	r0, [pc, #68]	; (8001570 <main+0xbc>)
 800152a:	f7ff fd25 	bl	8000f78 <LL_DMA_SetDataLength>
  LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);
 800152e:	2101      	movs	r1, #1
 8001530:	480f      	ldr	r0, [pc, #60]	; (8001570 <main+0xbc>)
 8001532:	f7ff fd01 	bl	8000f38 <LL_DMA_EnableStream>
  LL_USART_EnableIT_IDLE(USART3);
 8001536:	480c      	ldr	r0, [pc, #48]	; (8001568 <main+0xb4>)
 8001538:	f7ff ff37 	bl	80013aa <LL_USART_EnableIT_IDLE>
  LL_USART_EnableDMAReq_RX(USART3);
 800153c:	480a      	ldr	r0, [pc, #40]	; (8001568 <main+0xb4>)
 800153e:	f7ff ff57 	bl	80013f0 <LL_USART_EnableDMAReq_RX>

  //pwm
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8001542:	2101      	movs	r1, #1
 8001544:	480b      	ldr	r0, [pc, #44]	; (8001574 <main+0xc0>)
 8001546:	f7ff ff0f 	bl	8001368 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2);
 800154a:	2110      	movs	r1, #16
 800154c:	4809      	ldr	r0, [pc, #36]	; (8001574 <main+0xc0>)
 800154e:	f7ff ff0b 	bl	8001368 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM1);
 8001552:	4808      	ldr	r0, [pc, #32]	; (8001574 <main+0xc0>)
 8001554:	f7ff fef8 	bl	8001348 <LL_TIM_EnableCounter>

  //timerIT
  LL_TIM_EnableIT_UPDATE(TIM6);
 8001558:	4807      	ldr	r0, [pc, #28]	; (8001578 <main+0xc4>)
 800155a:	f7ff ff16 	bl	800138a <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 800155e:	4806      	ldr	r0, [pc, #24]	; (8001578 <main+0xc4>)
 8001560:	f7ff fef2 	bl	8001348 <LL_TIM_EnableCounter>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001564:	e7fe      	b.n	8001564 <main+0xb0>
 8001566:	bf00      	nop
 8001568:	40004800 	.word	0x40004800
 800156c:	200000f4 	.word	0x200000f4
 8001570:	40026000 	.word	0x40026000
 8001574:	40010000 	.word	0x40010000
 8001578:	40001000 	.word	0x40001000

0800157c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8001580:	2005      	movs	r0, #5
 8001582:	f7ff fe87 	bl	8001294 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8001586:	bf00      	nop
 8001588:	f7ff fe98 	bl	80012bc <LL_FLASH_GetLatency>
 800158c:	4603      	mov	r3, r0
 800158e:	2b05      	cmp	r3, #5
 8001590:	d1fa      	bne.n	8001588 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001592:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8001596:	f7ff feaf 	bl	80012f8 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 800159a:	f7ff fe9d 	bl	80012d8 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 800159e:	2010      	movs	r0, #16
 80015a0:	f7ff fd6c 	bl	800107c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80015a4:	f7ff fd48 	bl	8001038 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80015a8:	bf00      	nop
 80015aa:	f7ff fd55 	bl	8001058 <LL_RCC_HSI_IsReady>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d1fa      	bne.n	80015aa <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 180, LL_RCC_PLLP_DIV_2);
 80015b4:	2300      	movs	r3, #0
 80015b6:	22b4      	movs	r2, #180	; 0xb4
 80015b8:	2108      	movs	r1, #8
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff fe0c 	bl	80011d8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80015c0:	f7ff fde6 	bl	8001190 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80015c4:	bf00      	nop
 80015c6:	f7ff fdf3 	bl	80011b0 <LL_RCC_PLL_IsReady>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d1fa      	bne.n	80015c6 <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80015d0:	bf00      	nop
 80015d2:	f7ff fea5 	bl	8001320 <LL_PWR_IsActiveFlag_VOS>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0fa      	beq.n	80015d2 <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff fd85 	bl	80010ec <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 80015e2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80015e6:	f7ff fd95 	bl	8001114 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 80015ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80015ee:	f7ff fda5 	bl	800113c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80015f2:	2002      	movs	r0, #2
 80015f4:	f7ff fd58 	bl	80010a8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80015f8:	bf00      	nop
 80015fa:	f7ff fd69 	bl	80010d0 <LL_RCC_GetSysClkSource>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b08      	cmp	r3, #8
 8001602:	d1fa      	bne.n	80015fa <SystemClock_Config+0x7e>
  {

  }
  LL_Init1msTick(180000000);
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <SystemClock_Config+0xa0>)
 8001606:	f002 f887 	bl	8003718 <LL_Init1msTick>
  LL_SetSystemCoreClock(180000000);
 800160a:	4804      	ldr	r0, [pc, #16]	; (800161c <SystemClock_Config+0xa0>)
 800160c:	f002 f892 	bl	8003734 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff fda7 	bl	8001164 <LL_RCC_SetTIMPrescaler>
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	0aba9500 	.word	0x0aba9500

08001620 <LL_DMA_EnableStream>:
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800162a:	4a0c      	ldr	r2, [pc, #48]	; (800165c <LL_DMA_EnableStream+0x3c>)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4413      	add	r3, r2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <LL_DMA_EnableStream+0x3c>)
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	440a      	add	r2, r1
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	4611      	mov	r1, r2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	440a      	add	r2, r1
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6013      	str	r3, [r2, #0]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	080039e8 	.word	0x080039e8

08001660 <LL_DMA_DisableStream>:
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800166a:	4a0c      	ldr	r2, [pc, #48]	; (800169c <LL_DMA_DisableStream+0x3c>)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	4413      	add	r3, r2
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4413      	add	r3, r2
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4908      	ldr	r1, [pc, #32]	; (800169c <LL_DMA_DisableStream+0x3c>)
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	440a      	add	r2, r1
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	4611      	mov	r1, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	440a      	add	r2, r1
 8001688:	f023 0301 	bic.w	r3, r3, #1
 800168c:	6013      	str	r3, [r2, #0]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	080039e8 	.word	0x080039e8

080016a0 <LL_DMA_ClearFlag_HT1>:
  * @rmtoll LIFCR  CHTIF1    LL_DMA_ClearFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF1);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ae:	609a      	str	r2, [r3, #8]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_DMA_ClearFlag_TC1>:
  * @rmtoll LIFCR  CTCIF1    LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016ca:	609a      	str	r2, [r3, #8]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_DMA_ClearFlag_TE1>:
  * @rmtoll LIFCR  CTEIF1    LL_DMA_ClearFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF1);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e6:	609a      	str	r2, [r3, #8]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_DMA_ClearFlag_DME1>:
  * @rmtoll LIFCR  CDMEIF1    LL_DMA_ClearFlag_DME1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_DME1(DMA_TypeDef *DMAx)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CDMEIF1);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001702:	609a      	str	r2, [r3, #8]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_DMA_ClearFlag_FE1>:
  * @rmtoll LIFCR  CFEIF1    LL_DMA_ClearFlag_FE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_FE1(DMA_TypeDef *DMAx)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CFEIF1);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2240      	movs	r2, #64	; 0x40
 800171c:	609a      	str	r2, [r3, #8]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_TIM_ClearFlag_UPDATE>:
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f06f 0201 	mvn.w	r2, #1
 8001738:	611a      	str	r2, [r3, #16]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_USART_IsActiveFlag_IDLE>:
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0310 	and.w	r3, r3, #16
 800177c:	2b10      	cmp	r3, #16
 800177e:	bf0c      	ite	eq
 8001780:	2301      	moveq	r3, #1
 8001782:	2300      	movne	r3, #0
 8001784:	b2db      	uxtb	r3, r3
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_USART_ClearFlag_IDLE>:
{
 8001792:	b480      	push	{r7}
 8001794:	b085      	sub	sp, #20
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017a0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017a8:	68fb      	ldr	r3, [r7, #12]
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <Duty_Velocity>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

void Duty_Velocity()
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af04      	add	r7, sp, #16
	Duty_Control_Velocity(&MotorDutyVelocity1, &Direction1, GPIOC, LL_GPIO_PIN_8, TIM1, 1, DutyTarget1);
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <Duty_Velocity+0x44>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	2301      	movs	r3, #1
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <Duty_Velocity+0x48>)
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d0:	4a0c      	ldr	r2, [pc, #48]	; (8001804 <Duty_Velocity+0x4c>)
 80017d2:	490d      	ldr	r1, [pc, #52]	; (8001808 <Duty_Velocity+0x50>)
 80017d4:	480d      	ldr	r0, [pc, #52]	; (800180c <Duty_Velocity+0x54>)
 80017d6:	f7fe fee9 	bl	80005ac <Duty_Control_Velocity>
	Duty_Control_Velocity(&MotorDutyVelocity2, &Direction2, GPIOC, LL_GPIO_PIN_9, TIM1, 2, DutyTarget2);
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <Duty_Velocity+0x58>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	9302      	str	r3, [sp, #8]
 80017e0:	2302      	movs	r3, #2
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <Duty_Velocity+0x48>)
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ec:	4a05      	ldr	r2, [pc, #20]	; (8001804 <Duty_Velocity+0x4c>)
 80017ee:	4909      	ldr	r1, [pc, #36]	; (8001814 <Duty_Velocity+0x5c>)
 80017f0:	4809      	ldr	r0, [pc, #36]	; (8001818 <Duty_Velocity+0x60>)
 80017f2:	f7fe fedb 	bl	80005ac <Duty_Control_Velocity>
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000134 	.word	0x20000134
 8001800:	40010000 	.word	0x40010000
 8001804:	40020800 	.word	0x40020800
 8001808:	20000020 	.word	0x20000020
 800180c:	20000030 	.word	0x20000030
 8001810:	20000138 	.word	0x20000138
 8001814:	20000028 	.word	0x20000028
 8001818:	20000038 	.word	0x20000038

0800181c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <NMI_Handler+0x4>

08001822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <HardFault_Handler+0x4>

08001828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <MemManage_Handler+0x4>

0800182e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <UsageFault_Handler+0x4>

0800183a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_CC_IRQn 0 */
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART3))
 80018bc:	4814      	ldr	r0, [pc, #80]	; (8001910 <USART3_IRQHandler+0x58>)
 80018be:	f7ff ff55 	bl	800176c <LL_USART_IsActiveFlag_IDLE>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d021      	beq.n	800190c <USART3_IRQHandler+0x54>
	{
		protocol2_connect = Protocol2_readPacket(&protocol2, protocol2RX);
 80018c8:	4912      	ldr	r1, [pc, #72]	; (8001914 <USART3_IRQHandler+0x5c>)
 80018ca:	4813      	ldr	r0, [pc, #76]	; (8001918 <USART3_IRQHandler+0x60>)
 80018cc:	f7ff f898 	bl	8000a00 <Protocol2_readPacket>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <USART3_IRQHandler+0x64>)
 80018d6:	701a      	strb	r2, [r3, #0]

		LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_1);
 80018d8:	2101      	movs	r1, #1
 80018da:	4811      	ldr	r0, [pc, #68]	; (8001920 <USART3_IRQHandler+0x68>)
 80018dc:	f7ff fec0 	bl	8001660 <LL_DMA_DisableStream>
        LL_DMA_ClearFlag_DME1(DMA1);
 80018e0:	480f      	ldr	r0, [pc, #60]	; (8001920 <USART3_IRQHandler+0x68>)
 80018e2:	f7ff ff07 	bl	80016f4 <LL_DMA_ClearFlag_DME1>
        LL_DMA_ClearFlag_FE1(DMA1);
 80018e6:	480e      	ldr	r0, [pc, #56]	; (8001920 <USART3_IRQHandler+0x68>)
 80018e8:	f7ff ff12 	bl	8001710 <LL_DMA_ClearFlag_FE1>
        LL_DMA_ClearFlag_HT1(DMA1);
 80018ec:	480c      	ldr	r0, [pc, #48]	; (8001920 <USART3_IRQHandler+0x68>)
 80018ee:	f7ff fed7 	bl	80016a0 <LL_DMA_ClearFlag_HT1>
        LL_DMA_ClearFlag_TC1(DMA1);
 80018f2:	480b      	ldr	r0, [pc, #44]	; (8001920 <USART3_IRQHandler+0x68>)
 80018f4:	f7ff fee2 	bl	80016bc <LL_DMA_ClearFlag_TC1>
        LL_DMA_ClearFlag_TE1(DMA1);
 80018f8:	4809      	ldr	r0, [pc, #36]	; (8001920 <USART3_IRQHandler+0x68>)
 80018fa:	f7ff feed 	bl	80016d8 <LL_DMA_ClearFlag_TE1>
		LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);
 80018fe:	2101      	movs	r1, #1
 8001900:	4807      	ldr	r0, [pc, #28]	; (8001920 <USART3_IRQHandler+0x68>)
 8001902:	f7ff fe8d 	bl	8001620 <LL_DMA_EnableStream>

		LL_USART_ClearFlag_IDLE(USART3);
 8001906:	4802      	ldr	r0, [pc, #8]	; (8001910 <USART3_IRQHandler+0x58>)
 8001908:	f7ff ff43 	bl	8001792 <LL_USART_ClearFlag_IDLE>

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40004800 	.word	0x40004800
 8001914:	200000f4 	.word	0x200000f4
 8001918:	20000040 	.word	0x20000040
 800191c:	2000013c 	.word	0x2000013c
 8001920:	40026000 	.word	0x40026000

08001924 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM6))
 8001928:	4813      	ldr	r0, [pc, #76]	; (8001978 <TIM6_DAC_IRQHandler+0x54>)
 800192a:	f7ff ff0c 	bl	8001746 <LL_TIM_IsActiveFlag_UPDATE>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01e      	beq.n	8001972 <TIM6_DAC_IRQHandler+0x4e>
	{
		Duty_Velocity();
 8001934:	f7ff ff40 	bl	80017b8 <Duty_Velocity>

		if((protocol2_connect == 1) && (protocol2.data[6] == 0))
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <TIM6_DAC_IRQHandler+0x58>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d10f      	bne.n	8001960 <TIM6_DAC_IRQHandler+0x3c>
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <TIM6_DAC_IRQHandler+0x5c>)
 8001942:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10a      	bne.n	8001960 <TIM6_DAC_IRQHandler+0x3c>
				DutyTarget1 = protocol2.data[2];
				DutyTarget2 = protocol2.data[3];
			}
			else if(STM_ID == 11)
			{
				DutyTarget1 = protocol2.data[4];
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <TIM6_DAC_IRQHandler+0x5c>)
 800194c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001950:	4a0c      	ldr	r2, [pc, #48]	; (8001984 <TIM6_DAC_IRQHandler+0x60>)
 8001952:	6013      	str	r3, [r2, #0]
				DutyTarget2 = protocol2.data[5];
 8001954:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <TIM6_DAC_IRQHandler+0x5c>)
 8001956:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <TIM6_DAC_IRQHandler+0x64>)
 800195c:	6013      	str	r3, [r2, #0]
			if(STM_ID == 10)
 800195e:	e005      	b.n	800196c <TIM6_DAC_IRQHandler+0x48>
			}
		}
		else
		{
			DutyTarget1 = 0;
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <TIM6_DAC_IRQHandler+0x60>)
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
			DutyTarget2 = 0;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <TIM6_DAC_IRQHandler+0x64>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
		}

		LL_TIM_ClearFlag_UPDATE(TIM6);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <TIM6_DAC_IRQHandler+0x54>)
 800196e:	f7ff fedc 	bl	800172a <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40001000 	.word	0x40001000
 800197c:	2000013c 	.word	0x2000013c
 8001980:	20000040 	.word	0x20000040
 8001984:	20000134 	.word	0x20000134
 8001988:	20000138 	.word	0x20000138

0800198c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <SystemInit+0x20>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <SystemInit+0x20>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_EnableIRQ>:
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db0b      	blt.n	80019f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4907      	ldr	r1, [pc, #28]	; (8001a04 <__NVIC_EnableIRQ+0x38>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <__NVIC_SetPriority>:
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	; (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	; 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <LL_AHB1_GRP1_EnableClock>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad0:	4907      	ldr	r1, [pc, #28]	; (8001af0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	40023800 	.word	0x40023800

08001af4 <LL_APB1_GRP1_EnableClock>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b00:	4907      	ldr	r1, [pc, #28]	; (8001b20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40023800 	.word	0x40023800

08001b24 <LL_APB2_GRP1_EnableClock>:
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b30:	4907      	ldr	r1, [pc, #28]	; (8001b50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	40023800 	.word	0x40023800

08001b54 <LL_TIM_DisableARRPreload>:
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	601a      	str	r2, [r3, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_TIM_OC_DisableFast>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d01c      	beq.n	8001bbe <LL_TIM_OC_DisableFast+0x4a>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d017      	beq.n	8001bba <LL_TIM_OC_DisableFast+0x46>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2b10      	cmp	r3, #16
 8001b8e:	d012      	beq.n	8001bb6 <LL_TIM_OC_DisableFast+0x42>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	2b40      	cmp	r3, #64	; 0x40
 8001b94:	d00d      	beq.n	8001bb2 <LL_TIM_OC_DisableFast+0x3e>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b9c:	d007      	beq.n	8001bae <LL_TIM_OC_DisableFast+0x3a>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba4:	d101      	bne.n	8001baa <LL_TIM_OC_DisableFast+0x36>
 8001ba6:	2305      	movs	r3, #5
 8001ba8:	e00a      	b.n	8001bc0 <LL_TIM_OC_DisableFast+0x4c>
 8001baa:	2306      	movs	r3, #6
 8001bac:	e008      	b.n	8001bc0 <LL_TIM_OC_DisableFast+0x4c>
 8001bae:	2304      	movs	r3, #4
 8001bb0:	e006      	b.n	8001bc0 <LL_TIM_OC_DisableFast+0x4c>
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e004      	b.n	8001bc0 <LL_TIM_OC_DisableFast+0x4c>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e002      	b.n	8001bc0 <LL_TIM_OC_DisableFast+0x4c>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <LL_TIM_OC_DisableFast+0x4c>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3318      	adds	r3, #24
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <LL_TIM_OC_DisableFast+0x84>)
 8001bcc:	5cd3      	ldrb	r3, [r2, r3]
 8001bce:	440b      	add	r3, r1
 8001bd0:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	4908      	ldr	r1, [pc, #32]	; (8001bfc <LL_TIM_OC_DisableFast+0x88>)
 8001bda:	5ccb      	ldrb	r3, [r1, r3]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	2304      	movs	r3, #4
 8001be0:	408b      	lsls	r3, r1
 8001be2:	43db      	mvns	r3, r3
 8001be4:	401a      	ands	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	601a      	str	r2, [r3, #0]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	08003a08 	.word	0x08003a08
 8001bfc:	08003a10 	.word	0x08003a10

08001c00 <LL_TIM_OC_EnablePreload>:
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d01c      	beq.n	8001c4a <LL_TIM_OC_EnablePreload+0x4a>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d017      	beq.n	8001c46 <LL_TIM_OC_EnablePreload+0x46>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2b10      	cmp	r3, #16
 8001c1a:	d012      	beq.n	8001c42 <LL_TIM_OC_EnablePreload+0x42>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b40      	cmp	r3, #64	; 0x40
 8001c20:	d00d      	beq.n	8001c3e <LL_TIM_OC_EnablePreload+0x3e>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c28:	d007      	beq.n	8001c3a <LL_TIM_OC_EnablePreload+0x3a>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c30:	d101      	bne.n	8001c36 <LL_TIM_OC_EnablePreload+0x36>
 8001c32:	2305      	movs	r3, #5
 8001c34:	e00a      	b.n	8001c4c <LL_TIM_OC_EnablePreload+0x4c>
 8001c36:	2306      	movs	r3, #6
 8001c38:	e008      	b.n	8001c4c <LL_TIM_OC_EnablePreload+0x4c>
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	e006      	b.n	8001c4c <LL_TIM_OC_EnablePreload+0x4c>
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e004      	b.n	8001c4c <LL_TIM_OC_EnablePreload+0x4c>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e002      	b.n	8001c4c <LL_TIM_OC_EnablePreload+0x4c>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <LL_TIM_OC_EnablePreload+0x4c>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3318      	adds	r3, #24
 8001c52:	4619      	mov	r1, r3
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <LL_TIM_OC_EnablePreload+0x80>)
 8001c58:	5cd3      	ldrb	r3, [r2, r3]
 8001c5a:	440b      	add	r3, r1
 8001c5c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <LL_TIM_OC_EnablePreload+0x84>)
 8001c66:	5ccb      	ldrb	r3, [r1, r3]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	2308      	movs	r3, #8
 8001c6c:	408b      	lsls	r3, r1
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	601a      	str	r2, [r3, #0]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	08003a08 	.word	0x08003a08
 8001c84:	08003a10 	.word	0x08003a10

08001c88 <LL_TIM_SetTriggerOutput>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	605a      	str	r2, [r3, #4]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <LL_TIM_DisableMasterSlaveMode>:
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b09a      	sub	sp, #104	; 0x68
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001cd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001ce6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cea:	2220      	movs	r2, #32
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f001 fd30 	bl	8003754 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
 8001d04:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
 8001d14:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f7ff ff04 	bl	8001b24 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d1c:	f7ff fe48 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fe98 	bl	8001a5c <NVIC_EncodePriority>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4619      	mov	r1, r3
 8001d30:	2018      	movs	r0, #24
 8001d32:	f7ff fe69 	bl	8001a08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001d36:	2018      	movs	r0, #24
 8001d38:	f7ff fe48 	bl	80019cc <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d3c:	f7ff fe38 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fe88 	bl	8001a5c <NVIC_EncodePriority>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4619      	mov	r1, r3
 8001d50:	2019      	movs	r0, #25
 8001d52:	f7ff fe59 	bl	8001a08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d56:	2019      	movs	r0, #25
 8001d58:	f7ff fe38 	bl	80019cc <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d5c:	f7ff fe28 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fe78 	bl	8001a5c <NVIC_EncodePriority>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4619      	mov	r1, r3
 8001d70:	201a      	movs	r0, #26
 8001d72:	f7ff fe49 	bl	8001a08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001d76:	201a      	movs	r0, #26
 8001d78:	f7ff fe28 	bl	80019cc <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_CC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d7c:	f7ff fe18 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fe68 	bl	8001a5c <NVIC_EncodePriority>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4619      	mov	r1, r3
 8001d90:	201b      	movs	r0, #27
 8001d92:	f7ff fe39 	bl	8001a08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001d96:	201b      	movs	r0, #27
 8001d98:	f7ff fe18 	bl	80019cc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 18-LL_TIM_IC_FILTER_FDIV1_N2;
 8001d9c:	2312      	movs	r3, #18
 8001d9e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001da2:	2300      	movs	r3, #0
 8001da4:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8001da6:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <MX_TIM1_Init+0x1c0>)
 8001da8:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001daa:	2300      	movs	r3, #0
 8001dac:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	667b      	str	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001db2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001db6:	4619      	mov	r1, r3
 8001db8:	4836      	ldr	r0, [pc, #216]	; (8001e94 <MX_TIM1_Init+0x1c4>)
 8001dba:	f000 fee3 	bl	8002b84 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001dbe:	4835      	ldr	r0, [pc, #212]	; (8001e94 <MX_TIM1_Init+0x1c4>)
 8001dc0:	f7ff fec8 	bl	8001b54 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	4833      	ldr	r0, [pc, #204]	; (8001e94 <MX_TIM1_Init+0x1c4>)
 8001dc8:	f7ff ff1a 	bl	8001c00 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001dcc:	2360      	movs	r3, #96	; 0x60
 8001dce:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001de0:	2300      	movs	r3, #0
 8001de2:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001dec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001df0:	461a      	mov	r2, r3
 8001df2:	2101      	movs	r1, #1
 8001df4:	4827      	ldr	r0, [pc, #156]	; (8001e94 <MX_TIM1_Init+0x1c4>)
 8001df6:	f000 ff5f 	bl	8002cb8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4825      	ldr	r0, [pc, #148]	; (8001e94 <MX_TIM1_Init+0x1c4>)
 8001dfe:	f7ff feb9 	bl	8001b74 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8001e02:	2110      	movs	r1, #16
 8001e04:	4823      	ldr	r0, [pc, #140]	; (8001e94 <MX_TIM1_Init+0x1c4>)
 8001e06:	f7ff fefb 	bl	8001c00 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001e0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e0e:	461a      	mov	r2, r3
 8001e10:	2110      	movs	r1, #16
 8001e12:	4820      	ldr	r0, [pc, #128]	; (8001e94 <MX_TIM1_Init+0x1c4>)
 8001e14:	f000 ff50 	bl	8002cb8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8001e18:	2110      	movs	r1, #16
 8001e1a:	481e      	ldr	r0, [pc, #120]	; (8001e94 <MX_TIM1_Init+0x1c4>)
 8001e1c:	f7ff feaa 	bl	8001b74 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001e20:	2100      	movs	r1, #0
 8001e22:	481c      	ldr	r0, [pc, #112]	; (8001e94 <MX_TIM1_Init+0x1c4>)
 8001e24:	f7ff ff30 	bl	8001c88 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001e28:	481a      	ldr	r0, [pc, #104]	; (8001e94 <MX_TIM1_Init+0x1c4>)
 8001e2a:	f7ff ff40 	bl	8001cae <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001e44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_ENABLE;
 8001e4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	480f      	ldr	r0, [pc, #60]	; (8001e94 <MX_TIM1_Init+0x1c4>)
 8001e58:	f000 ff6f 	bl	8002d3a <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f7ff fe31 	bl	8001ac4 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001e62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4805      	ldr	r0, [pc, #20]	; (8001e98 <MX_TIM1_Init+0x1c8>)
 8001e82:	f000 fc25 	bl	80026d0 <LL_GPIO_Init>

}
 8001e86:	bf00      	nop
 8001e88:	3768      	adds	r7, #104	; 0x68
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	fff003e8 	.word	0xfff003e8
 8001e94:	40010000 	.word	0x40010000
 8001e98:	40020000 	.word	0x40020000

08001e9c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8001eb0:	2010      	movs	r0, #16
 8001eb2:	f7ff fe1f 	bl	8001af4 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001eb6:	f7ff fd7b 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fdcb 	bl	8001a5c <NVIC_EncodePriority>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4619      	mov	r1, r3
 8001eca:	2036      	movs	r0, #54	; 0x36
 8001ecc:	f7ff fd9c 	bl	8001a08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ed0:	2036      	movs	r0, #54	; 0x36
 8001ed2:	f7ff fd7b 	bl	80019cc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 90-LL_TIM_IC_FILTER_FDIV1_N2;
 8001ed6:	235a      	movs	r3, #90	; 0x5a
 8001ed8:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 20000-LL_TIM_IC_FILTER_FDIV1_N2;
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <MX_TIM6_Init+0x6c>)
 8001ee0:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4809      	ldr	r0, [pc, #36]	; (8001f0c <MX_TIM6_Init+0x70>)
 8001ee8:	f000 fe4c 	bl	8002b84 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8001eec:	4807      	ldr	r0, [pc, #28]	; (8001f0c <MX_TIM6_Init+0x70>)
 8001eee:	f7ff fe31 	bl	8001b54 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4805      	ldr	r0, [pc, #20]	; (8001f0c <MX_TIM6_Init+0x70>)
 8001ef6:	f7ff fec7 	bl	8001c88 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8001efa:	4804      	ldr	r0, [pc, #16]	; (8001f0c <MX_TIM6_Init+0x70>)
 8001efc:	f7ff fed7 	bl	8001cae <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	fff04e20 	.word	0xfff04e20
 8001f0c:	40001000 	.word	0x40001000

08001f10 <__NVIC_GetPriorityGrouping>:
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_EnableIRQ>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0b      	blt.n	8001f56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4907      	ldr	r1, [pc, #28]	; (8001f64 <__NVIC_EnableIRQ+0x38>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	; (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <LL_DMA_SetDataTransferDirection>:
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8002030:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <LL_DMA_SetDataTransferDirection+0x44>)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4413      	add	r3, r2
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002044:	4908      	ldr	r1, [pc, #32]	; (8002068 <LL_DMA_SetDataTransferDirection+0x44>)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	440b      	add	r3, r1
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4619      	mov	r1, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	440b      	add	r3, r1
 8002052:	4619      	mov	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
}
 800205a:	bf00      	nop
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	08003a18 	.word	0x08003a18

0800206c <LL_DMA_SetMode>:
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8002078:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <LL_DMA_SetMode+0x44>)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4413      	add	r3, r2
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4413      	add	r3, r2
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 800208c:	4908      	ldr	r1, [pc, #32]	; (80020b0 <LL_DMA_SetMode+0x44>)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	440b      	add	r3, r1
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4619      	mov	r1, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	440b      	add	r3, r1
 800209a:	4619      	mov	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	08003a18 	.word	0x08003a18

080020b4 <LL_DMA_SetPeriphIncMode>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80020c0:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <LL_DMA_SetPeriphIncMode+0x44>)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	4413      	add	r3, r2
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4413      	add	r3, r2
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80020d4:	4908      	ldr	r1, [pc, #32]	; (80020f8 <LL_DMA_SetPeriphIncMode+0x44>)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	440b      	add	r3, r1
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4619      	mov	r1, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	440b      	add	r3, r1
 80020e2:	4619      	mov	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	08003a18 	.word	0x08003a18

080020fc <LL_DMA_SetMemoryIncMode>:
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8002108:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <LL_DMA_SetMemoryIncMode+0x44>)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4413      	add	r3, r2
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4413      	add	r3, r2
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800211c:	4908      	ldr	r1, [pc, #32]	; (8002140 <LL_DMA_SetMemoryIncMode+0x44>)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	440b      	add	r3, r1
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	440b      	add	r3, r1
 800212a:	4619      	mov	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	08003a18 	.word	0x08003a18

08002144 <LL_DMA_SetPeriphSize>:
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <LL_DMA_SetPeriphSize+0x44>)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4413      	add	r3, r2
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4413      	add	r3, r2
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8002164:	4908      	ldr	r1, [pc, #32]	; (8002188 <LL_DMA_SetPeriphSize+0x44>)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	440b      	add	r3, r1
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	440b      	add	r3, r1
 8002172:	4619      	mov	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	08003a18 	.word	0x08003a18

0800218c <LL_DMA_SetMemorySize>:
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <LL_DMA_SetMemorySize+0x44>)
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	4413      	add	r3, r2
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4413      	add	r3, r2
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80021ac:	4908      	ldr	r1, [pc, #32]	; (80021d0 <LL_DMA_SetMemorySize+0x44>)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	440b      	add	r3, r1
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	440b      	add	r3, r1
 80021ba:	4619      	mov	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	08003a18 	.word	0x08003a18

080021d4 <LL_DMA_SetStreamPriorityLevel>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80021e0:	4a0d      	ldr	r2, [pc, #52]	; (8002218 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	4413      	add	r3, r2
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4413      	add	r3, r2
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021f4:	4908      	ldr	r1, [pc, #32]	; (8002218 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	440b      	add	r3, r1
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	440b      	add	r3, r1
 8002202:	4619      	mov	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	08003a18 	.word	0x08003a18

0800221c <LL_DMA_SetChannelSelection>:
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8002228:	4a0d      	ldr	r2, [pc, #52]	; (8002260 <LL_DMA_SetChannelSelection+0x44>)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	4413      	add	r3, r2
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4413      	add	r3, r2
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800223c:	4908      	ldr	r1, [pc, #32]	; (8002260 <LL_DMA_SetChannelSelection+0x44>)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	440b      	add	r3, r1
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	440b      	add	r3, r1
 800224a:	4619      	mov	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	08003a18 	.word	0x08003a18

08002264 <LL_DMA_DisableFifoMode>:
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800226e:	4a0c      	ldr	r2, [pc, #48]	; (80022a0 <LL_DMA_DisableFifoMode+0x3c>)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	4413      	add	r3, r2
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	4908      	ldr	r1, [pc, #32]	; (80022a0 <LL_DMA_DisableFifoMode+0x3c>)
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	440a      	add	r2, r1
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	4611      	mov	r1, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	440a      	add	r2, r1
 800228c:	f023 0304 	bic.w	r3, r3, #4
 8002290:	6153      	str	r3, [r2, #20]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	08003a18 	.word	0x08003a18

080022a4 <LL_AHB1_GRP1_EnableClock>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b0:	4907      	ldr	r1, [pc, #28]	; (80022d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4013      	ands	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022c2:	68fb      	ldr	r3, [r7, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40023800 	.word	0x40023800

080022d4 <LL_APB1_GRP1_EnableClock>:
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80022dc:	4b08      	ldr	r3, [pc, #32]	; (8002300 <LL_APB1_GRP1_EnableClock+0x2c>)
 80022de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e0:	4907      	ldr	r1, [pc, #28]	; (8002300 <LL_APB1_GRP1_EnableClock+0x2c>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <LL_APB1_GRP1_EnableClock+0x2c>)
 80022ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4013      	ands	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022f2:	68fb      	ldr	r3, [r7, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40023800 	.word	0x40023800

08002304 <LL_USART_Enable>:
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	60da      	str	r2, [r3, #12]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_USART_ConfigAsyncMode>:
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	615a      	str	r2, [r3, #20]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08e      	sub	sp, #56	; 0x38
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
 8002364:	611a      	str	r2, [r3, #16]
 8002366:	615a      	str	r2, [r3, #20]
 8002368:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
 8002378:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800237a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800237e:	f7ff ffa9 	bl	80022d4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002382:	2004      	movs	r0, #4
 8002384:	f7ff ff8e 	bl	80022a4 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC10   ------> USART3_TX
  PC11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8002388:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800238c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800238e:	2302      	movs	r3, #2
 8002390:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002392:	2303      	movs	r3, #3
 8002394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800239e:	2307      	movs	r3, #7
 80023a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4830      	ldr	r0, [pc, #192]	; (8002468 <MX_USART3_UART_Init+0x118>)
 80023a8:	f000 f992 	bl	80026d0 <LL_GPIO_Init>

  /* USART3 DMA Init */

  /* USART3_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_1, LL_DMA_CHANNEL_4);
 80023ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023b0:	2101      	movs	r1, #1
 80023b2:	482e      	ldr	r0, [pc, #184]	; (800246c <MX_USART3_UART_Init+0x11c>)
 80023b4:	f7ff ff32 	bl	800221c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2101      	movs	r1, #1
 80023bc:	482b      	ldr	r0, [pc, #172]	; (800246c <MX_USART3_UART_Init+0x11c>)
 80023be:	f7ff fe31 	bl	8002024 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2101      	movs	r1, #1
 80023c6:	4829      	ldr	r0, [pc, #164]	; (800246c <MX_USART3_UART_Init+0x11c>)
 80023c8:	f7ff ff04 	bl	80021d4 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 80023cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023d0:	2101      	movs	r1, #1
 80023d2:	4826      	ldr	r0, [pc, #152]	; (800246c <MX_USART3_UART_Init+0x11c>)
 80023d4:	f7ff fe4a 	bl	800206c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 80023d8:	2200      	movs	r2, #0
 80023da:	2101      	movs	r1, #1
 80023dc:	4823      	ldr	r0, [pc, #140]	; (800246c <MX_USART3_UART_Init+0x11c>)
 80023de:	f7ff fe69 	bl	80020b4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 80023e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023e6:	2101      	movs	r1, #1
 80023e8:	4820      	ldr	r0, [pc, #128]	; (800246c <MX_USART3_UART_Init+0x11c>)
 80023ea:	f7ff fe87 	bl	80020fc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2101      	movs	r1, #1
 80023f2:	481e      	ldr	r0, [pc, #120]	; (800246c <MX_USART3_UART_Init+0x11c>)
 80023f4:	f7ff fea6 	bl	8002144 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 80023f8:	2200      	movs	r2, #0
 80023fa:	2101      	movs	r1, #1
 80023fc:	481b      	ldr	r0, [pc, #108]	; (800246c <MX_USART3_UART_Init+0x11c>)
 80023fe:	f7ff fec5 	bl	800218c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 8002402:	2101      	movs	r1, #1
 8002404:	4819      	ldr	r0, [pc, #100]	; (800246c <MX_USART3_UART_Init+0x11c>)
 8002406:	f7ff ff2d 	bl	8002264 <LL_DMA_DisableFifoMode>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800240a:	f7ff fd81 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 800240e:	4603      	mov	r3, r0
 8002410:	2200      	movs	r2, #0
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fdd1 	bl	8001fbc <NVIC_EncodePriority>
 800241a:	4603      	mov	r3, r0
 800241c:	4619      	mov	r1, r3
 800241e:	2027      	movs	r0, #39	; 0x27
 8002420:	f7ff fda2 	bl	8001f68 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8002424:	2027      	movs	r0, #39	; 0x27
 8002426:	f7ff fd81 	bl	8001f2c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800242a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800242e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002430:	2300      	movs	r3, #0
 8002432:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002438:	2300      	movs	r3, #0
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800243c:	230c      	movs	r3, #12
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002440:	2300      	movs	r3, #0
 8002442:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002444:	2300      	movs	r3, #0
 8002446:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8002448:	f107 031c 	add.w	r3, r7, #28
 800244c:	4619      	mov	r1, r3
 800244e:	4808      	ldr	r0, [pc, #32]	; (8002470 <MX_USART3_UART_Init+0x120>)
 8002450:	f001 f8c8 	bl	80035e4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8002454:	4806      	ldr	r0, [pc, #24]	; (8002470 <MX_USART3_UART_Init+0x120>)
 8002456:	f7ff ff65 	bl	8002324 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800245a:	4805      	ldr	r0, [pc, #20]	; (8002470 <MX_USART3_UART_Init+0x120>)
 800245c:	f7ff ff52 	bl	8002304 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002460:	bf00      	nop
 8002462:	3738      	adds	r7, #56	; 0x38
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40020800 	.word	0x40020800
 800246c:	40026000 	.word	0x40026000
 8002470:	40004800 	.word	0x40004800

08002474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002478:	480d      	ldr	r0, [pc, #52]	; (80024b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800247a:	490e      	ldr	r1, [pc, #56]	; (80024b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800247c:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002480:	e002      	b.n	8002488 <LoopCopyDataInit>

08002482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002486:	3304      	adds	r3, #4

08002488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800248c:	d3f9      	bcc.n	8002482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248e:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002490:	4c0b      	ldr	r4, [pc, #44]	; (80024c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002494:	e001      	b.n	800249a <LoopFillZerobss>

08002496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002498:	3204      	adds	r2, #4

0800249a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800249c:	d3fb      	bcc.n	8002496 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800249e:	f7ff fa75 	bl	800198c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024a2:	f001 f95f 	bl	8003764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a6:	f7ff f805 	bl	80014b4 <main>
  bx  lr    
 80024aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80024b8:	08003a30 	.word	0x08003a30
  ldr r2, =_sbss
 80024bc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80024c0:	20000140 	.word	0x20000140

080024c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c4:	e7fe      	b.n	80024c4 <ADC_IRQHandler>

080024c6 <LL_GPIO_SetPinMode>:
{
 80024c6:	b480      	push	{r7}
 80024c8:	b089      	sub	sp, #36	; 0x24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	613b      	str	r3, [r7, #16]
  return result;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	fab3 f383 	clz	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2103      	movs	r1, #3
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	401a      	ands	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	61bb      	str	r3, [r7, #24]
  return result;
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	431a      	orrs	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	601a      	str	r2, [r3, #0]
}
 8002518:	bf00      	nop
 800251a:	3724      	adds	r7, #36	; 0x24
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_GPIO_SetPinOutputType>:
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	43db      	mvns	r3, r3
 8002538:	401a      	ands	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	431a      	orrs	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	605a      	str	r2, [r3, #4]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_GPIO_SetPinSpeed>:
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	613b      	str	r3, [r7, #16]
  return result;
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2103      	movs	r1, #3
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	401a      	ands	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	61bb      	str	r3, [r7, #24]
  return result;
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	fab3 f383 	clz	r3, r3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	fa01 f303 	lsl.w	r3, r1, r3
 80025a0:	431a      	orrs	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	609a      	str	r2, [r3, #8]
}
 80025a6:	bf00      	nop
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_GPIO_SetPinPull>:
{
 80025b2:	b480      	push	{r7}
 80025b4:	b089      	sub	sp, #36	; 0x24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	613b      	str	r3, [r7, #16]
  return result;
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	fab3 f383 	clz	r3, r3
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	2103      	movs	r1, #3
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	401a      	ands	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	61bb      	str	r3, [r7, #24]
  return result;
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	431a      	orrs	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	60da      	str	r2, [r3, #12]
}
 8002604:	bf00      	nop
 8002606:	3724      	adds	r7, #36	; 0x24
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_GPIO_SetAFPin_0_7>:
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a1a      	ldr	r2, [r3, #32]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	613b      	str	r3, [r7, #16]
  return result;
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	210f      	movs	r1, #15
 8002638:	fa01 f303 	lsl.w	r3, r1, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	401a      	ands	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	61bb      	str	r3, [r7, #24]
  return result;
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	431a      	orrs	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	621a      	str	r2, [r3, #32]
}
 8002662:	bf00      	nop
 8002664:	3724      	adds	r7, #36	; 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <LL_GPIO_SetAFPin_8_15>:
{
 800266e:	b480      	push	{r7}
 8002670:	b089      	sub	sp, #36	; 0x24
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	613b      	str	r3, [r7, #16]
  return result;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	210f      	movs	r1, #15
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	401a      	ands	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	61bb      	str	r3, [r7, #24]
  return result;
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	431a      	orrs	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80026c4:	bf00      	nop
 80026c6:	3724      	adds	r7, #36	; 0x24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	613b      	str	r3, [r7, #16]
  return result;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80026fa:	e050      	b.n	800279e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	2101      	movs	r1, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa01 f303 	lsl.w	r3, r1, r3
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d042      	beq.n	8002798 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d003      	beq.n	8002722 <LL_GPIO_Init+0x52>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d10d      	bne.n	800273e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	461a      	mov	r2, r3
 8002728:	69b9      	ldr	r1, [r7, #24]
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ff12 	bl	8002554 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	461a      	mov	r2, r3
 8002736:	69b9      	ldr	r1, [r7, #24]
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff fef3 	bl	8002524 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	461a      	mov	r2, r3
 8002744:	69b9      	ldr	r1, [r7, #24]
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ff33 	bl	80025b2 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d11a      	bne.n	800278a <LL_GPIO_Init+0xba>
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	60bb      	str	r3, [r7, #8]
  return result;
 8002760:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b07      	cmp	r3, #7
 800276a:	d807      	bhi.n	800277c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	461a      	mov	r2, r3
 8002772:	69b9      	ldr	r1, [r7, #24]
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff4b 	bl	8002610 <LL_GPIO_SetAFPin_0_7>
 800277a:	e006      	b.n	800278a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	461a      	mov	r2, r3
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ff72 	bl	800266e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	461a      	mov	r2, r3
 8002790:	69b9      	ldr	r1, [r7, #24]
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff fe97 	bl	80024c6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	3301      	adds	r3, #1
 800279c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1a7      	bne.n	80026fc <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3720      	adds	r7, #32
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <LL_RCC_GetSysClkSource>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <LL_RCC_GetSysClkSource+0x18>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800

080027d4 <LL_RCC_GetAHBPrescaler>:
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <LL_RCC_GetAHBPrescaler+0x18>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800

080027f0 <LL_RCC_GetAPB1Prescaler>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <LL_RCC_GetAPB1Prescaler+0x18>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800

0800280c <LL_RCC_GetAPB2Prescaler>:
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800

08002828 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <LL_RCC_PLL_GetMainSource+0x18>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800

08002844 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <LL_RCC_PLL_GetN+0x18>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	099b      	lsrs	r3, r3, #6
 800284e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	40023800 	.word	0x40023800

08002860 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <LL_RCC_PLL_GetP+0x18>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800

0800287c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <LL_RCC_PLL_GetR+0x18>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800

08002898 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <LL_RCC_PLL_GetDivider+0x18>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800

080028b4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80028bc:	f000 f820 	bl	8002900 <RCC_GetSystemClockFreq>
 80028c0:	4602      	mov	r2, r0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f85a 	bl	8002984 <RCC_GetHCLKClockFreq>
 80028d0:	4602      	mov	r2, r0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f868 	bl	80029b0 <RCC_GetPCLK1ClockFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 f874 	bl	80029d8 <RCC_GetPCLK2ClockFreq>
 80028f0:	4602      	mov	r2, r0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60da      	str	r2, [r3, #12]
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800290a:	f7ff ff55 	bl	80027b8 <LL_RCC_GetSysClkSource>
 800290e:	4603      	mov	r3, r0
 8002910:	2b0c      	cmp	r3, #12
 8002912:	d82d      	bhi.n	8002970 <RCC_GetSystemClockFreq+0x70>
 8002914:	a201      	add	r2, pc, #4	; (adr r2, 800291c <RCC_GetSystemClockFreq+0x1c>)
 8002916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291a:	bf00      	nop
 800291c:	08002951 	.word	0x08002951
 8002920:	08002971 	.word	0x08002971
 8002924:	08002971 	.word	0x08002971
 8002928:	08002971 	.word	0x08002971
 800292c:	08002957 	.word	0x08002957
 8002930:	08002971 	.word	0x08002971
 8002934:	08002971 	.word	0x08002971
 8002938:	08002971 	.word	0x08002971
 800293c:	0800295d 	.word	0x0800295d
 8002940:	08002971 	.word	0x08002971
 8002944:	08002971 	.word	0x08002971
 8002948:	08002971 	.word	0x08002971
 800294c:	08002967 	.word	0x08002967
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <RCC_GetSystemClockFreq+0x80>)
 8002952:	607b      	str	r3, [r7, #4]
      break;
 8002954:	e00f      	b.n	8002976 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <RCC_GetSystemClockFreq+0x80>)
 8002958:	607b      	str	r3, [r7, #4]
      break;
 800295a:	e00c      	b.n	8002976 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800295c:	2008      	movs	r0, #8
 800295e:	f000 f84f 	bl	8002a00 <RCC_PLL_GetFreqDomain_SYS>
 8002962:	6078      	str	r0, [r7, #4]
      break;
 8002964:	e007      	b.n	8002976 <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 8002966:	200c      	movs	r0, #12
 8002968:	f000 f84a 	bl	8002a00 <RCC_PLL_GetFreqDomain_SYS>
 800296c:	6078      	str	r0, [r7, #4]
      break;
 800296e:	e002      	b.n	8002976 <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <RCC_GetSystemClockFreq+0x80>)
 8002972:	607b      	str	r3, [r7, #4]
      break;
 8002974:	bf00      	nop
  }

  return frequency;
 8002976:	687b      	ldr	r3, [r7, #4]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	00f42400 	.word	0x00f42400

08002984 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800298c:	f7ff ff22 	bl	80027d4 <LL_RCC_GetAHBPrescaler>
 8002990:	4603      	mov	r3, r0
 8002992:	091b      	lsrs	r3, r3, #4
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	4a04      	ldr	r2, [pc, #16]	; (80029ac <RCC_GetHCLKClockFreq+0x28>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	461a      	mov	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	40d3      	lsrs	r3, r2
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	080039f0 	.word	0x080039f0

080029b0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80029b8:	f7ff ff1a 	bl	80027f0 <LL_RCC_GetAPB1Prescaler>
 80029bc:	4603      	mov	r3, r0
 80029be:	0a9b      	lsrs	r3, r3, #10
 80029c0:	4a04      	ldr	r2, [pc, #16]	; (80029d4 <RCC_GetPCLK1ClockFreq+0x24>)
 80029c2:	5cd3      	ldrb	r3, [r2, r3]
 80029c4:	461a      	mov	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	40d3      	lsrs	r3, r2
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	08003a00 	.word	0x08003a00

080029d8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80029e0:	f7ff ff14 	bl	800280c <LL_RCC_GetAPB2Prescaler>
 80029e4:	4603      	mov	r3, r0
 80029e6:	0b5b      	lsrs	r3, r3, #13
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <RCC_GetPCLK2ClockFreq+0x24>)
 80029ea:	5cd3      	ldrb	r3, [r2, r3]
 80029ec:	461a      	mov	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	40d3      	lsrs	r3, r2
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	08003a00 	.word	0x08003a00

08002a00 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	2300      	movs	r3, #0
 8002a12:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002a14:	f7ff ff08 	bl	8002828 <LL_RCC_PLL_GetMainSource>
 8002a18:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d004      	beq.n	8002a2a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a26:	d003      	beq.n	8002a30 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002a28:	e005      	b.n	8002a36 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002a2a:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8002a2c:	617b      	str	r3, [r7, #20]
      break;
 8002a2e:	e005      	b.n	8002a3c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002a30:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8002a32:	617b      	str	r3, [r7, #20]
      break;
 8002a34:	e002      	b.n	8002a3c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002a36:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8002a38:	617b      	str	r3, [r7, #20]
      break;
 8002a3a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d114      	bne.n	8002a6c <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002a42:	f7ff ff29 	bl	8002898 <LL_RCC_PLL_GetDivider>
 8002a46:	4602      	mov	r2, r0
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	fbb3 f4f2 	udiv	r4, r3, r2
 8002a4e:	f7ff fef9 	bl	8002844 <LL_RCC_PLL_GetN>
 8002a52:	4603      	mov	r3, r0
 8002a54:	fb03 f404 	mul.w	r4, r3, r4
 8002a58:	f7ff ff02 	bl	8002860 <LL_RCC_PLL_GetP>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	0c1b      	lsrs	r3, r3, #16
 8002a60:	3301      	adds	r3, #1
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	e011      	b.n	8002a90 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002a6c:	f7ff ff14 	bl	8002898 <LL_RCC_PLL_GetDivider>
 8002a70:	4602      	mov	r2, r0
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	fbb3 f4f2 	udiv	r4, r3, r2
 8002a78:	f7ff fee4 	bl	8002844 <LL_RCC_PLL_GetN>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	fb03 f404 	mul.w	r4, r3, r4
 8002a82:	f7ff fefb 	bl	800287c <LL_RCC_PLL_GetR>
 8002a86:	4603      	mov	r3, r0
 8002a88:	0f1b      	lsrs	r3, r3, #28
 8002a8a:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a8e:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002a90:	693b      	ldr	r3, [r7, #16]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd90      	pop	{r4, r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	00f42400 	.word	0x00f42400

08002aa0 <LL_TIM_SetPrescaler>:
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_TIM_SetAutoReload>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_TIM_SetRepetitionCounter>:
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <LL_TIM_OC_SetCompareCH1>:
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_TIM_OC_SetCompareCH2>:
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_TIM_OC_SetCompareCH3>:
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <LL_TIM_OC_SetCompareCH4>:
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	f043 0201 	orr.w	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	615a      	str	r2, [r3, #20]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a3d      	ldr	r2, [pc, #244]	; (8002c8c <LL_TIM_Init+0x108>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d013      	beq.n	8002bc4 <LL_TIM_Init+0x40>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba2:	d00f      	beq.n	8002bc4 <LL_TIM_Init+0x40>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a3a      	ldr	r2, [pc, #232]	; (8002c90 <LL_TIM_Init+0x10c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00b      	beq.n	8002bc4 <LL_TIM_Init+0x40>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a39      	ldr	r2, [pc, #228]	; (8002c94 <LL_TIM_Init+0x110>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d007      	beq.n	8002bc4 <LL_TIM_Init+0x40>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a38      	ldr	r2, [pc, #224]	; (8002c98 <LL_TIM_Init+0x114>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d003      	beq.n	8002bc4 <LL_TIM_Init+0x40>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a37      	ldr	r2, [pc, #220]	; (8002c9c <LL_TIM_Init+0x118>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d106      	bne.n	8002bd2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a2d      	ldr	r2, [pc, #180]	; (8002c8c <LL_TIM_Init+0x108>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d02b      	beq.n	8002c32 <LL_TIM_Init+0xae>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be0:	d027      	beq.n	8002c32 <LL_TIM_Init+0xae>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a2a      	ldr	r2, [pc, #168]	; (8002c90 <LL_TIM_Init+0x10c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d023      	beq.n	8002c32 <LL_TIM_Init+0xae>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a29      	ldr	r2, [pc, #164]	; (8002c94 <LL_TIM_Init+0x110>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d01f      	beq.n	8002c32 <LL_TIM_Init+0xae>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a28      	ldr	r2, [pc, #160]	; (8002c98 <LL_TIM_Init+0x114>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d01b      	beq.n	8002c32 <LL_TIM_Init+0xae>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a27      	ldr	r2, [pc, #156]	; (8002c9c <LL_TIM_Init+0x118>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d017      	beq.n	8002c32 <LL_TIM_Init+0xae>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <LL_TIM_Init+0x11c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <LL_TIM_Init+0xae>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a25      	ldr	r2, [pc, #148]	; (8002ca4 <LL_TIM_Init+0x120>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00f      	beq.n	8002c32 <LL_TIM_Init+0xae>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a24      	ldr	r2, [pc, #144]	; (8002ca8 <LL_TIM_Init+0x124>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00b      	beq.n	8002c32 <LL_TIM_Init+0xae>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a23      	ldr	r2, [pc, #140]	; (8002cac <LL_TIM_Init+0x128>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d007      	beq.n	8002c32 <LL_TIM_Init+0xae>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a22      	ldr	r2, [pc, #136]	; (8002cb0 <LL_TIM_Init+0x12c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d003      	beq.n	8002c32 <LL_TIM_Init+0xae>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a21      	ldr	r2, [pc, #132]	; (8002cb4 <LL_TIM_Init+0x130>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d106      	bne.n	8002c40 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ff35 	bl	8002abc <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	4619      	mov	r1, r3
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ff21 	bl	8002aa0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <LL_TIM_Init+0x108>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d003      	beq.n	8002c6e <LL_TIM_Init+0xea>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a0c      	ldr	r2, [pc, #48]	; (8002c9c <LL_TIM_Init+0x118>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d105      	bne.n	8002c7a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	4619      	mov	r1, r3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ff2f 	bl	8002ad8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ff72 	bl	8002b64 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40010000 	.word	0x40010000
 8002c90:	40000400 	.word	0x40000400
 8002c94:	40000800 	.word	0x40000800
 8002c98:	40000c00 	.word	0x40000c00
 8002c9c:	40010400 	.word	0x40010400
 8002ca0:	40014000 	.word	0x40014000
 8002ca4:	40014400 	.word	0x40014400
 8002ca8:	40014800 	.word	0x40014800
 8002cac:	40001800 	.word	0x40001800
 8002cb0:	40001c00 	.word	0x40001c00
 8002cb4:	40002000 	.word	0x40002000

08002cb8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cce:	d027      	beq.n	8002d20 <LL_TIM_OC_Init+0x68>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd6:	d82a      	bhi.n	8002d2e <LL_TIM_OC_Init+0x76>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cde:	d018      	beq.n	8002d12 <LL_TIM_OC_Init+0x5a>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce6:	d822      	bhi.n	8002d2e <LL_TIM_OC_Init+0x76>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d003      	beq.n	8002cf6 <LL_TIM_OC_Init+0x3e>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b10      	cmp	r3, #16
 8002cf2:	d007      	beq.n	8002d04 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002cf4:	e01b      	b.n	8002d2e <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f867 	bl	8002dcc <OC1Config>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	75fb      	strb	r3, [r7, #23]
      break;
 8002d02:	e015      	b.n	8002d30 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f8cc 	bl	8002ea4 <OC2Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d10:	e00e      	b.n	8002d30 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f935 	bl	8002f84 <OC3Config>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d1e:	e007      	b.n	8002d30 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f99e 	bl	8003064 <OC4Config>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d2c:	e000      	b.n	8002d30 <LL_TIM_OC_Init+0x78>
      break;
 8002d2e:	bf00      	nop
  }

  return result;
 8002d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	7b12      	ldrb	r2, [r2, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	89d2      	ldrh	r2, [r2, #14]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	f023 0201 	bic.w	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0303 	bic.w	r3, r3, #3
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f023 0202 	bic.w	r2, r3, #2
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f023 0201 	bic.w	r2, r3, #1
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a1c      	ldr	r2, [pc, #112]	; (8002e9c <OC1Config+0xd0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d003      	beq.n	8002e36 <OC1Config+0x6a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a1b      	ldr	r2, [pc, #108]	; (8002ea0 <OC1Config+0xd4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d11e      	bne.n	8002e74 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f023 0208 	bic.w	r2, r3, #8
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f023 0204 	bic.w	r2, r3, #4
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4313      	orrs	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff fe34 	bl	8002af4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40010000 	.word	0x40010000
 8002ea0:	40010400 	.word	0x40010400

08002ea4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f023 0210 	bic.w	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f023 0220 	bic.w	r2, r3, #32
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f023 0210 	bic.w	r2, r3, #16
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a1d      	ldr	r2, [pc, #116]	; (8002f7c <OC2Config+0xd8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d003      	beq.n	8002f14 <OC2Config+0x70>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a1c      	ldr	r2, [pc, #112]	; (8002f80 <OC2Config+0xdc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d11f      	bne.n	8002f54 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	019b      	lsls	r3, r3, #6
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	019b      	lsls	r3, r3, #6
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4619      	mov	r1, r3
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff fdd2 	bl	8002b10 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	40010400 	.word	0x40010400

08002f84 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0303 	bic.w	r3, r3, #3
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a1d      	ldr	r2, [pc, #116]	; (800305c <OC3Config+0xd8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d003      	beq.n	8002ff2 <OC3Config+0x6e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a1c      	ldr	r2, [pc, #112]	; (8003060 <OC3Config+0xdc>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d11f      	bne.n	8003032 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	029b      	lsls	r3, r3, #10
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	029b      	lsls	r3, r3, #10
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	015b      	lsls	r3, r3, #5
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	4619      	mov	r1, r3
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff fd71 	bl	8002b2c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40010000 	.word	0x40010000
 8003060:	40010400 	.word	0x40010400

08003064 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	021b      	lsls	r3, r3, #8
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	031b      	lsls	r3, r3, #12
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	031b      	lsls	r3, r3, #12
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a11      	ldr	r2, [pc, #68]	; (800310c <OC4Config+0xa8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d003      	beq.n	80030d4 <OC4Config+0x70>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a10      	ldr	r2, [pc, #64]	; (8003110 <OC4Config+0xac>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d107      	bne.n	80030e4 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	019b      	lsls	r3, r3, #6
 80030e0:	4313      	orrs	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	4619      	mov	r1, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff fd26 	bl	8002b48 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40010000 	.word	0x40010000
 8003110:	40010400 	.word	0x40010400

08003114 <LL_USART_IsEnabled>:
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003128:	bf0c      	ite	eq
 800312a:	2301      	moveq	r3, #1
 800312c:	2300      	movne	r3, #0
 800312e:	b2db      	uxtb	r3, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <LL_USART_SetStopBitsLength>:
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	611a      	str	r2, [r3, #16]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <LL_USART_SetHWFlowCtrl>:
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	615a      	str	r2, [r3, #20]
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_USART_SetBaudRate>:
{
 8003188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800318c:	b0c0      	sub	sp, #256	; 0x100
 800318e:	af00      	add	r7, sp, #0
 8003190:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003194:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8003198:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800319c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a8:	f040 810c 	bne.w	80033c4 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80031ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031b0:	2200      	movs	r2, #0
 80031b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031be:	4622      	mov	r2, r4
 80031c0:	462b      	mov	r3, r5
 80031c2:	1891      	adds	r1, r2, r2
 80031c4:	6639      	str	r1, [r7, #96]	; 0x60
 80031c6:	415b      	adcs	r3, r3
 80031c8:	667b      	str	r3, [r7, #100]	; 0x64
 80031ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80031ce:	4621      	mov	r1, r4
 80031d0:	eb12 0801 	adds.w	r8, r2, r1
 80031d4:	4629      	mov	r1, r5
 80031d6:	eb43 0901 	adc.w	r9, r3, r1
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ee:	4690      	mov	r8, r2
 80031f0:	4699      	mov	r9, r3
 80031f2:	4623      	mov	r3, r4
 80031f4:	eb18 0303 	adds.w	r3, r8, r3
 80031f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031fc:	462b      	mov	r3, r5
 80031fe:	eb49 0303 	adc.w	r3, r9, r3
 8003202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003206:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800320a:	2200      	movs	r2, #0
 800320c:	469a      	mov	sl, r3
 800320e:	4693      	mov	fp, r2
 8003210:	eb1a 030a 	adds.w	r3, sl, sl
 8003214:	65bb      	str	r3, [r7, #88]	; 0x58
 8003216:	eb4b 030b 	adc.w	r3, fp, fp
 800321a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800321c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003220:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003224:	f7fc ffee 	bl	8000204 <__aeabi_uldivmod>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4b64      	ldr	r3, [pc, #400]	; (80033c0 <LL_USART_SetBaudRate+0x238>)
 800322e:	fba3 2302 	umull	r2, r3, r3, r2
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	b29b      	uxth	r3, r3
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	b29c      	uxth	r4, r3
 800323a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800323e:	2200      	movs	r2, #0
 8003240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003244:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003248:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800324c:	4642      	mov	r2, r8
 800324e:	464b      	mov	r3, r9
 8003250:	1891      	adds	r1, r2, r2
 8003252:	6539      	str	r1, [r7, #80]	; 0x50
 8003254:	415b      	adcs	r3, r3
 8003256:	657b      	str	r3, [r7, #84]	; 0x54
 8003258:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800325c:	4641      	mov	r1, r8
 800325e:	1851      	adds	r1, r2, r1
 8003260:	64b9      	str	r1, [r7, #72]	; 0x48
 8003262:	4649      	mov	r1, r9
 8003264:	414b      	adcs	r3, r1
 8003266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8003274:	4659      	mov	r1, fp
 8003276:	00cb      	lsls	r3, r1, #3
 8003278:	4651      	mov	r1, sl
 800327a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800327e:	4651      	mov	r1, sl
 8003280:	00ca      	lsls	r2, r1, #3
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	4603      	mov	r3, r0
 8003288:	4642      	mov	r2, r8
 800328a:	189b      	adds	r3, r3, r2
 800328c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003290:	464b      	mov	r3, r9
 8003292:	460a      	mov	r2, r1
 8003294:	eb42 0303 	adc.w	r3, r2, r3
 8003298:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800329c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80032a0:	2200      	movs	r2, #0
 80032a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032a6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80032aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80032ae:	460b      	mov	r3, r1
 80032b0:	18db      	adds	r3, r3, r3
 80032b2:	643b      	str	r3, [r7, #64]	; 0x40
 80032b4:	4613      	mov	r3, r2
 80032b6:	eb42 0303 	adc.w	r3, r2, r3
 80032ba:	647b      	str	r3, [r7, #68]	; 0x44
 80032bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032c0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80032c4:	f7fc ff9e 	bl	8000204 <__aeabi_uldivmod>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4611      	mov	r1, r2
 80032ce:	4b3c      	ldr	r3, [pc, #240]	; (80033c0 <LL_USART_SetBaudRate+0x238>)
 80032d0:	fba3 2301 	umull	r2, r3, r3, r1
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	2264      	movs	r2, #100	; 0x64
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	1acb      	subs	r3, r1, r3
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032e4:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <LL_USART_SetBaudRate+0x238>)
 80032e6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	4423      	add	r3, r4
 80032fa:	b29c      	uxth	r4, r3
 80032fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003300:	2200      	movs	r2, #0
 8003302:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003306:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800330a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800330e:	4642      	mov	r2, r8
 8003310:	464b      	mov	r3, r9
 8003312:	1891      	adds	r1, r2, r2
 8003314:	63b9      	str	r1, [r7, #56]	; 0x38
 8003316:	415b      	adcs	r3, r3
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800331a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800331e:	4641      	mov	r1, r8
 8003320:	1851      	adds	r1, r2, r1
 8003322:	6339      	str	r1, [r7, #48]	; 0x30
 8003324:	4649      	mov	r1, r9
 8003326:	414b      	adcs	r3, r1
 8003328:	637b      	str	r3, [r7, #52]	; 0x34
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003336:	4659      	mov	r1, fp
 8003338:	00cb      	lsls	r3, r1, #3
 800333a:	4651      	mov	r1, sl
 800333c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003340:	4651      	mov	r1, sl
 8003342:	00ca      	lsls	r2, r1, #3
 8003344:	4610      	mov	r0, r2
 8003346:	4619      	mov	r1, r3
 8003348:	4603      	mov	r3, r0
 800334a:	4642      	mov	r2, r8
 800334c:	189b      	adds	r3, r3, r2
 800334e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003352:	464b      	mov	r3, r9
 8003354:	460a      	mov	r2, r1
 8003356:	eb42 0303 	adc.w	r3, r2, r3
 800335a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800335e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003362:	2200      	movs	r2, #0
 8003364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003368:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800336c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003370:	460b      	mov	r3, r1
 8003372:	18db      	adds	r3, r3, r3
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
 8003376:	4613      	mov	r3, r2
 8003378:	eb42 0303 	adc.w	r3, r2, r3
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800337e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003382:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003386:	f7fc ff3d 	bl	8000204 <__aeabi_uldivmod>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <LL_USART_SetBaudRate+0x238>)
 8003390:	fba3 1302 	umull	r1, r3, r3, r2
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	2164      	movs	r1, #100	; 0x64
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	3332      	adds	r3, #50	; 0x32
 80033a2:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <LL_USART_SetBaudRate+0x238>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	4423      	add	r3, r4
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033bc:	609a      	str	r2, [r3, #8]
}
 80033be:	e108      	b.n	80035d2 <LL_USART_SetBaudRate+0x44a>
 80033c0:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80033c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033ce:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033d2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80033d6:	4642      	mov	r2, r8
 80033d8:	464b      	mov	r3, r9
 80033da:	1891      	adds	r1, r2, r2
 80033dc:	6239      	str	r1, [r7, #32]
 80033de:	415b      	adcs	r3, r3
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
 80033e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033e6:	4641      	mov	r1, r8
 80033e8:	1854      	adds	r4, r2, r1
 80033ea:	4649      	mov	r1, r9
 80033ec:	eb43 0501 	adc.w	r5, r3, r1
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	00eb      	lsls	r3, r5, #3
 80033fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033fe:	00e2      	lsls	r2, r4, #3
 8003400:	4614      	mov	r4, r2
 8003402:	461d      	mov	r5, r3
 8003404:	4643      	mov	r3, r8
 8003406:	18e3      	adds	r3, r4, r3
 8003408:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800340c:	464b      	mov	r3, r9
 800340e:	eb45 0303 	adc.w	r3, r5, r3
 8003412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003416:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800341a:	2200      	movs	r2, #0
 800341c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003420:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003430:	4629      	mov	r1, r5
 8003432:	008b      	lsls	r3, r1, #2
 8003434:	4621      	mov	r1, r4
 8003436:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800343a:	4621      	mov	r1, r4
 800343c:	008a      	lsls	r2, r1, #2
 800343e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003442:	f7fc fedf 	bl	8000204 <__aeabi_uldivmod>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4b65      	ldr	r3, [pc, #404]	; (80035e0 <LL_USART_SetBaudRate+0x458>)
 800344c:	fba3 2302 	umull	r2, r3, r3, r2
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	b29b      	uxth	r3, r3
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	b29c      	uxth	r4, r3
 8003458:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800345c:	2200      	movs	r2, #0
 800345e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003462:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003466:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800346a:	4642      	mov	r2, r8
 800346c:	464b      	mov	r3, r9
 800346e:	1891      	adds	r1, r2, r2
 8003470:	61b9      	str	r1, [r7, #24]
 8003472:	415b      	adcs	r3, r3
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800347a:	4641      	mov	r1, r8
 800347c:	1851      	adds	r1, r2, r1
 800347e:	6139      	str	r1, [r7, #16]
 8003480:	4649      	mov	r1, r9
 8003482:	414b      	adcs	r3, r1
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003492:	4659      	mov	r1, fp
 8003494:	00cb      	lsls	r3, r1, #3
 8003496:	4651      	mov	r1, sl
 8003498:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800349c:	4651      	mov	r1, sl
 800349e:	00ca      	lsls	r2, r1, #3
 80034a0:	4610      	mov	r0, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	4603      	mov	r3, r0
 80034a6:	4642      	mov	r2, r8
 80034a8:	189b      	adds	r3, r3, r2
 80034aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034ae:	464b      	mov	r3, r9
 80034b0:	460a      	mov	r2, r1
 80034b2:	eb42 0303 	adc.w	r3, r2, r3
 80034b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80034ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034c4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80034d4:	4649      	mov	r1, r9
 80034d6:	008b      	lsls	r3, r1, #2
 80034d8:	4641      	mov	r1, r8
 80034da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034de:	4641      	mov	r1, r8
 80034e0:	008a      	lsls	r2, r1, #2
 80034e2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80034e6:	f7fc fe8d 	bl	8000204 <__aeabi_uldivmod>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4611      	mov	r1, r2
 80034f0:	4b3b      	ldr	r3, [pc, #236]	; (80035e0 <LL_USART_SetBaudRate+0x458>)
 80034f2:	fba3 2301 	umull	r2, r3, r3, r1
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	2264      	movs	r2, #100	; 0x64
 80034fa:	fb02 f303 	mul.w	r3, r2, r3
 80034fe:	1acb      	subs	r3, r1, r3
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	3332      	adds	r3, #50	; 0x32
 8003504:	4a36      	ldr	r2, [pc, #216]	; (80035e0 <LL_USART_SetBaudRate+0x458>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	b29b      	uxth	r3, r3
 800350e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003512:	b29b      	uxth	r3, r3
 8003514:	4423      	add	r3, r4
 8003516:	b29c      	uxth	r4, r3
 8003518:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800351c:	2200      	movs	r2, #0
 800351e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003520:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003522:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003526:	4642      	mov	r2, r8
 8003528:	464b      	mov	r3, r9
 800352a:	1891      	adds	r1, r2, r2
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	415b      	adcs	r3, r3
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003536:	4641      	mov	r1, r8
 8003538:	1851      	adds	r1, r2, r1
 800353a:	6039      	str	r1, [r7, #0]
 800353c:	4649      	mov	r1, r9
 800353e:	414b      	adcs	r3, r1
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800354e:	4659      	mov	r1, fp
 8003550:	00cb      	lsls	r3, r1, #3
 8003552:	4651      	mov	r1, sl
 8003554:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003558:	4651      	mov	r1, sl
 800355a:	00ca      	lsls	r2, r1, #3
 800355c:	4610      	mov	r0, r2
 800355e:	4619      	mov	r1, r3
 8003560:	4603      	mov	r3, r0
 8003562:	4642      	mov	r2, r8
 8003564:	189b      	adds	r3, r3, r2
 8003566:	673b      	str	r3, [r7, #112]	; 0x70
 8003568:	464b      	mov	r3, r9
 800356a:	460a      	mov	r2, r1
 800356c:	eb42 0303 	adc.w	r3, r2, r3
 8003570:	677b      	str	r3, [r7, #116]	; 0x74
 8003572:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003576:	2200      	movs	r2, #0
 8003578:	66bb      	str	r3, [r7, #104]	; 0x68
 800357a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003588:	4649      	mov	r1, r9
 800358a:	008b      	lsls	r3, r1, #2
 800358c:	4641      	mov	r1, r8
 800358e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003592:	4641      	mov	r1, r8
 8003594:	008a      	lsls	r2, r1, #2
 8003596:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800359a:	f7fc fe33 	bl	8000204 <__aeabi_uldivmod>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4b0f      	ldr	r3, [pc, #60]	; (80035e0 <LL_USART_SetBaudRate+0x458>)
 80035a4:	fba3 1302 	umull	r1, r3, r3, r2
 80035a8:	095b      	lsrs	r3, r3, #5
 80035aa:	2164      	movs	r1, #100	; 0x64
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	3332      	adds	r3, #50	; 0x32
 80035b6:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <LL_USART_SetBaudRate+0x458>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	b29b      	uxth	r3, r3
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	4423      	add	r3, r4
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035d0:	609a      	str	r2, [r3, #8]
}
 80035d2:	bf00      	nop
 80035d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035d8:	46bd      	mov	sp, r7
 80035da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035de:	bf00      	nop
 80035e0:	51eb851f 	.word	0x51eb851f

080035e4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff fd8c 	bl	8003114 <LL_USART_IsEnabled>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d15e      	bne.n	80036c0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800360a:	f023 030c 	bic.w	r3, r3, #12
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	6851      	ldr	r1, [r2, #4]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	68d2      	ldr	r2, [r2, #12]
 8003616:	4311      	orrs	r1, r2
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	6912      	ldr	r2, [r2, #16]
 800361c:	4311      	orrs	r1, r2
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	6992      	ldr	r2, [r2, #24]
 8003622:	430a      	orrs	r2, r1
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	4619      	mov	r1, r3
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff fd83 	bl	800313c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	4619      	mov	r1, r3
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff fd90 	bl	8003162 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003642:	f107 0308 	add.w	r3, r7, #8
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff f934 	bl	80028b4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <LL_USART_Init+0xe8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d102      	bne.n	800365a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	e021      	b.n	800369e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <LL_USART_Init+0xec>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d102      	bne.n	8003668 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	e01a      	b.n	800369e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a1a      	ldr	r2, [pc, #104]	; (80036d4 <LL_USART_Init+0xf0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d102      	bne.n	8003676 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	e013      	b.n	800369e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <LL_USART_Init+0xf4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d102      	bne.n	8003684 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	e00c      	b.n	800369e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a15      	ldr	r2, [pc, #84]	; (80036dc <LL_USART_Init+0xf8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d102      	bne.n	8003692 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	61bb      	str	r3, [r7, #24]
 8003690:	e005      	b.n	800369e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <LL_USART_Init+0xfc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00d      	beq.n	80036c0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d009      	beq.n	80036c0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80036ac:	2300      	movs	r3, #0
 80036ae:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	699a      	ldr	r2, [r3, #24]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69b9      	ldr	r1, [r7, #24]
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff fd64 	bl	8003188 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80036c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3720      	adds	r7, #32
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40011000 	.word	0x40011000
 80036d0:	40004400 	.word	0x40004400
 80036d4:	40004800 	.word	0x40004800
 80036d8:	40011400 	.word	0x40011400
 80036dc:	40004c00 	.word	0x40004c00
 80036e0:	40005000 	.word	0x40005000

080036e4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	4a07      	ldr	r2, [pc, #28]	; (8003714 <LL_InitTick+0x30>)
 80036f8:	3b01      	subs	r3, #1
 80036fa:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <LL_InitTick+0x30>)
 80036fe:	2200      	movs	r2, #0
 8003700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003702:	4b04      	ldr	r3, [pc, #16]	; (8003714 <LL_InitTick+0x30>)
 8003704:	2205      	movs	r2, #5
 8003706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000e010 	.word	0xe000e010

08003718 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003720:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ffdd 	bl	80036e4 <LL_InitTick>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800373c:	4a04      	ldr	r2, [pc, #16]	; (8003750 <LL_SetSystemCoreClock+0x1c>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6013      	str	r3, [r2, #0]
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	20000000 	.word	0x20000000

08003754 <memset>:
 8003754:	4402      	add	r2, r0
 8003756:	4603      	mov	r3, r0
 8003758:	4293      	cmp	r3, r2
 800375a:	d100      	bne.n	800375e <memset+0xa>
 800375c:	4770      	bx	lr
 800375e:	f803 1b01 	strb.w	r1, [r3], #1
 8003762:	e7f9      	b.n	8003758 <memset+0x4>

08003764 <__libc_init_array>:
 8003764:	b570      	push	{r4, r5, r6, lr}
 8003766:	4d0d      	ldr	r5, [pc, #52]	; (800379c <__libc_init_array+0x38>)
 8003768:	4c0d      	ldr	r4, [pc, #52]	; (80037a0 <__libc_init_array+0x3c>)
 800376a:	1b64      	subs	r4, r4, r5
 800376c:	10a4      	asrs	r4, r4, #2
 800376e:	2600      	movs	r6, #0
 8003770:	42a6      	cmp	r6, r4
 8003772:	d109      	bne.n	8003788 <__libc_init_array+0x24>
 8003774:	4d0b      	ldr	r5, [pc, #44]	; (80037a4 <__libc_init_array+0x40>)
 8003776:	4c0c      	ldr	r4, [pc, #48]	; (80037a8 <__libc_init_array+0x44>)
 8003778:	f000 f826 	bl	80037c8 <_init>
 800377c:	1b64      	subs	r4, r4, r5
 800377e:	10a4      	asrs	r4, r4, #2
 8003780:	2600      	movs	r6, #0
 8003782:	42a6      	cmp	r6, r4
 8003784:	d105      	bne.n	8003792 <__libc_init_array+0x2e>
 8003786:	bd70      	pop	{r4, r5, r6, pc}
 8003788:	f855 3b04 	ldr.w	r3, [r5], #4
 800378c:	4798      	blx	r3
 800378e:	3601      	adds	r6, #1
 8003790:	e7ee      	b.n	8003770 <__libc_init_array+0xc>
 8003792:	f855 3b04 	ldr.w	r3, [r5], #4
 8003796:	4798      	blx	r3
 8003798:	3601      	adds	r6, #1
 800379a:	e7f2      	b.n	8003782 <__libc_init_array+0x1e>
 800379c:	08003a28 	.word	0x08003a28
 80037a0:	08003a28 	.word	0x08003a28
 80037a4:	08003a28 	.word	0x08003a28
 80037a8:	08003a2c 	.word	0x08003a2c

080037ac <memcpy>:
 80037ac:	440a      	add	r2, r1
 80037ae:	4291      	cmp	r1, r2
 80037b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80037b4:	d100      	bne.n	80037b8 <memcpy+0xc>
 80037b6:	4770      	bx	lr
 80037b8:	b510      	push	{r4, lr}
 80037ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037c2:	4291      	cmp	r1, r2
 80037c4:	d1f9      	bne.n	80037ba <memcpy+0xe>
 80037c6:	bd10      	pop	{r4, pc}

080037c8 <_init>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	bf00      	nop
 80037cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ce:	bc08      	pop	{r3}
 80037d0:	469e      	mov	lr, r3
 80037d2:	4770      	bx	lr

080037d4 <_fini>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	bf00      	nop
 80037d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037da:	bc08      	pop	{r3}
 80037dc:	469e      	mov	lr, r3
 80037de:	4770      	bx	lr
