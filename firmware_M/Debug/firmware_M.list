
firmware_M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f20  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  080040e8  080040e8  000140e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004318  08004318  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004320  08004320  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08004328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000008  0800432c  00020008  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  0800432c  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008af8  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a2e  00000000  00000000  00028b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c0  00000000  00000000  0002a5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072b  00000000  00000000  0002af60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d3b4  00000000  00000000  0002b68b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007dc8  00000000  00000000  00048a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a35aa  00000000  00000000  00050807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029b0  00000000  00000000  000f3db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000f6764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000008 	.word	0x20000008
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080040d0 	.word	0x080040d0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000000c 	.word	0x2000000c
 8000204:	080040d0 	.word	0x080040d0

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b970 	b.w	8000dfc <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9e08      	ldr	r6, [sp, #32]
 8000b3a:	460d      	mov	r5, r1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	460f      	mov	r7, r1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d14a      	bne.n	8000bda <__udivmoddi4+0xa6>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4694      	mov	ip, r2
 8000b48:	d965      	bls.n	8000c16 <__udivmoddi4+0xe2>
 8000b4a:	fab2 f382 	clz	r3, r2
 8000b4e:	b143      	cbz	r3, 8000b62 <__udivmoddi4+0x2e>
 8000b50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b54:	f1c3 0220 	rsb	r2, r3, #32
 8000b58:	409f      	lsls	r7, r3
 8000b5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b5e:	4317      	orrs	r7, r2
 8000b60:	409c      	lsls	r4, r3
 8000b62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b66:	fa1f f58c 	uxth.w	r5, ip
 8000b6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b6e:	0c22      	lsrs	r2, r4, #16
 8000b70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b78:	fb01 f005 	mul.w	r0, r1, r5
 8000b7c:	4290      	cmp	r0, r2
 8000b7e:	d90a      	bls.n	8000b96 <__udivmoddi4+0x62>
 8000b80:	eb1c 0202 	adds.w	r2, ip, r2
 8000b84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b88:	f080 811c 	bcs.w	8000dc4 <__udivmoddi4+0x290>
 8000b8c:	4290      	cmp	r0, r2
 8000b8e:	f240 8119 	bls.w	8000dc4 <__udivmoddi4+0x290>
 8000b92:	3902      	subs	r1, #2
 8000b94:	4462      	add	r2, ip
 8000b96:	1a12      	subs	r2, r2, r0
 8000b98:	b2a4      	uxth	r4, r4
 8000b9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ba2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ba6:	fb00 f505 	mul.w	r5, r0, r5
 8000baa:	42a5      	cmp	r5, r4
 8000bac:	d90a      	bls.n	8000bc4 <__udivmoddi4+0x90>
 8000bae:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bb6:	f080 8107 	bcs.w	8000dc8 <__udivmoddi4+0x294>
 8000bba:	42a5      	cmp	r5, r4
 8000bbc:	f240 8104 	bls.w	8000dc8 <__udivmoddi4+0x294>
 8000bc0:	4464      	add	r4, ip
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc8:	1b64      	subs	r4, r4, r5
 8000bca:	2100      	movs	r1, #0
 8000bcc:	b11e      	cbz	r6, 8000bd6 <__udivmoddi4+0xa2>
 8000bce:	40dc      	lsrs	r4, r3
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0xbc>
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	f000 80ed 	beq.w	8000dbe <__udivmoddi4+0x28a>
 8000be4:	2100      	movs	r1, #0
 8000be6:	e9c6 0500 	strd	r0, r5, [r6]
 8000bea:	4608      	mov	r0, r1
 8000bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf0:	fab3 f183 	clz	r1, r3
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	d149      	bne.n	8000c8c <__udivmoddi4+0x158>
 8000bf8:	42ab      	cmp	r3, r5
 8000bfa:	d302      	bcc.n	8000c02 <__udivmoddi4+0xce>
 8000bfc:	4282      	cmp	r2, r0
 8000bfe:	f200 80f8 	bhi.w	8000df2 <__udivmoddi4+0x2be>
 8000c02:	1a84      	subs	r4, r0, r2
 8000c04:	eb65 0203 	sbc.w	r2, r5, r3
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	d0e2      	beq.n	8000bd6 <__udivmoddi4+0xa2>
 8000c10:	e9c6 4700 	strd	r4, r7, [r6]
 8000c14:	e7df      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xe6>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f382 	clz	r3, r2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f040 8090 	bne.w	8000d44 <__udivmoddi4+0x210>
 8000c24:	1a8a      	subs	r2, r1, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2101      	movs	r1, #1
 8000c30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c34:	fb07 2015 	mls	r0, r7, r5, r2
 8000c38:	0c22      	lsrs	r2, r4, #16
 8000c3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c3e:	fb0e f005 	mul.w	r0, lr, r5
 8000c42:	4290      	cmp	r0, r2
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x124>
 8000c46:	eb1c 0202 	adds.w	r2, ip, r2
 8000c4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x122>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2b8>
 8000c56:	4645      	mov	r5, r8
 8000c58:	1a12      	subs	r2, r2, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c60:	fb07 2210 	mls	r2, r7, r0, r2
 8000c64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x14e>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x14c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2c2>
 8000c80:	4610      	mov	r0, r2
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c8a:	e79f      	b.n	8000bcc <__udivmoddi4+0x98>
 8000c8c:	f1c1 0720 	rsb	r7, r1, #32
 8000c90:	408b      	lsls	r3, r1
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ca2:	40fd      	lsrs	r5, r7
 8000ca4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca8:	4323      	orrs	r3, r4
 8000caa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000cb6:	0c1c      	lsrs	r4, r3, #16
 8000cb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000cc0:	42a5      	cmp	r5, r4
 8000cc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b0>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2b4>
 8000cd8:	42a5      	cmp	r5, r4
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2b4>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4464      	add	r4, ip
 8000ce4:	1b64      	subs	r4, r4, r5
 8000ce6:	b29d      	uxth	r5, r3
 8000ce8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cec:	fb09 4413 	mls	r4, r9, r3, r4
 8000cf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cf4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1da>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2ac>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2ac>
 8000d0a:	3b02      	subs	r3, #2
 8000d0c:	4464      	add	r4, ip
 8000d0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d12:	fba3 9502 	umull	r9, r5, r3, r2
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	42ac      	cmp	r4, r5
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46ae      	mov	lr, r5
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x29c>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x298>
 8000d24:	b156      	cbz	r6, 8000d3c <__udivmoddi4+0x208>
 8000d26:	ebb0 0208 	subs.w	r2, r0, r8
 8000d2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d32:	40ca      	lsrs	r2, r1
 8000d34:	40cc      	lsrs	r4, r1
 8000d36:	4317      	orrs	r7, r2
 8000d38:	e9c6 7400 	strd	r7, r4, [r6]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	f1c3 0120 	rsb	r1, r3, #32
 8000d48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d50:	fa25 f101 	lsr.w	r1, r5, r1
 8000d54:	409d      	lsls	r5, r3
 8000d56:	432a      	orrs	r2, r5
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d64:	fb07 1510 	mls	r5, r7, r0, r1
 8000d68:	0c11      	lsrs	r1, r2, #16
 8000d6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d72:	428d      	cmp	r5, r1
 8000d74:	fa04 f403 	lsl.w	r4, r4, r3
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x258>
 8000d7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b0>
 8000d84:	428d      	cmp	r5, r1
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b0>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4461      	add	r1, ip
 8000d8c:	1b49      	subs	r1, r1, r5
 8000d8e:	b292      	uxth	r2, r2
 8000d90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d94:	fb07 1115 	mls	r1, r7, r5, r1
 8000d98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000da0:	4291      	cmp	r1, r2
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x282>
 8000da4:	eb1c 0202 	adds.w	r2, ip, r2
 8000da8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2a8>
 8000dae:	4291      	cmp	r1, r2
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2a8>
 8000db2:	3d02      	subs	r5, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a52      	subs	r2, r2, r1
 8000db8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0xfc>
 8000dbe:	4631      	mov	r1, r6
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	e708      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000dc4:	4639      	mov	r1, r7
 8000dc6:	e6e6      	b.n	8000b96 <__udivmoddi4+0x62>
 8000dc8:	4610      	mov	r0, r2
 8000dca:	e6fb      	b.n	8000bc4 <__udivmoddi4+0x90>
 8000dcc:	4548      	cmp	r0, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f0>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f0>
 8000ddc:	4645      	mov	r5, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x282>
 8000de0:	462b      	mov	r3, r5
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1da>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x258>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b0>
 8000dec:	3d02      	subs	r5, #2
 8000dee:	4462      	add	r2, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x124>
 8000df2:	4608      	mov	r0, r1
 8000df4:	e70a      	b.n	8000c0c <__udivmoddi4+0xd8>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x14e>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e10:	2b80      	cmp	r3, #128	; 0x80
 8000e12:	bf0c      	ite	eq
 8000e14:	2301      	moveq	r3, #1
 8000e16:	2300      	movne	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000e32:	78fa      	ldrb	r2, [r7, #3]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	605a      	str	r2, [r3, #4]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <Protocol2_divideByte>:
{
	return (highByte << 8) + lowByte;
}

void Protocol2_divideByte(PROTOCOL2 *protocol2, int value, int len)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	e013      	b.n	8000e7e <Protocol2_divideByte+0x3a>
	{
		protocol2->txBuffer[protocol2->txState++] = ((value >> (i*8)) & 0xFF);
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	fa42 f003 	asr.w	r0, r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	785b      	ldrb	r3, [r3, #1]
 8000e64:	1c5a      	adds	r2, r3, #1
 8000e66:	b2d1      	uxtb	r1, r2
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	7051      	strb	r1, [r2, #1]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	b2c2      	uxtb	r2, r0
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for(int i = 0; i < len; i++)
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	dbe7      	blt.n	8000e56 <Protocol2_divideByte+0x12>
	}
}
 8000e86:	bf00      	nop
 8000e88:	bf00      	nop
 8000e8a:	371c      	adds	r7, #28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <Protocol2_update_header>:

void Protocol2_update_header(PROTOCOL2 *protocol2)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	//header
	protocol2->txBuffer[protocol2->txState++] = 0xff;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	785b      	ldrb	r3, [r3, #1]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	b2d1      	uxtb	r1, r2
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	7051      	strb	r1, [r2, #1]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	22ff      	movs	r2, #255	; 0xff
 8000eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	protocol2->txBuffer[protocol2->txState++] = 0xff;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	785b      	ldrb	r3, [r3, #1]
 8000eb8:	1c5a      	adds	r2, r3, #1
 8000eba:	b2d1      	uxtb	r1, r2
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	7051      	strb	r1, [r2, #1]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	22ff      	movs	r2, #255	; 0xff
 8000ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	protocol2->txBuffer[protocol2->txState++] = 0xfd;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	785b      	ldrb	r3, [r3, #1]
 8000ed0:	1c5a      	adds	r2, r3, #1
 8000ed2:	b2d1      	uxtb	r1, r2
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	7051      	strb	r1, [r2, #1]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	22fd      	movs	r2, #253	; 0xfd
 8000ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	protocol2->txBuffer[protocol2->txState++] = 0x00;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	785b      	ldrb	r3, [r3, #1]
 8000ee8:	1c5a      	adds	r2, r3, #1
 8000eea:	b2d1      	uxtb	r1, r2
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	7051      	strb	r1, [r2, #1]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	//packetID
	protocol2->txBuffer[protocol2->txState++] = 0xFE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	785b      	ldrb	r3, [r3, #1]
 8000f00:	1c5a      	adds	r2, r3, #1
 8000f02:	b2d1      	uxtb	r1, r2
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	7051      	strb	r1, [r2, #1]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	22fe      	movs	r2, #254	; 0xfe
 8000f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	//length
	protocol2->txBuffer[protocol2->txState++] = 0x00;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	785b      	ldrb	r3, [r3, #1]
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	b2d1      	uxtb	r1, r2
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	7051      	strb	r1, [r2, #1]
 8000f20:	461a      	mov	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	protocol2->txBuffer[protocol2->txState++] = 0x00;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	785b      	ldrb	r3, [r3, #1]
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	b2d1      	uxtb	r1, r2
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	7051      	strb	r1, [r2, #1]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	//instruction
	protocol2->txBuffer[protocol2->txState++] = PROTOCOL2_BULK_WRITE;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	785b      	ldrb	r3, [r3, #1]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	b2d1      	uxtb	r1, r2
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	7051      	strb	r1, [r2, #1]
 8000f50:	461a      	mov	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	2293      	movs	r2, #147	; 0x93
 8000f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <Protocol2_torqueOn>:

void Protocol2_torqueOn(PROTOCOL2 *protocol2)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	//ID 1
	Protocol2_divideByte(protocol2, 1, 1);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2101      	movs	r1, #1
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff65 	bl	8000e44 <Protocol2_divideByte>
	//start address
	Protocol2_divideByte(protocol2, 64, 2);
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	2140      	movs	r1, #64	; 0x40
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ff60 	bl	8000e44 <Protocol2_divideByte>
	//data length
	Protocol2_divideByte(protocol2, 1, 2);
 8000f84:	2202      	movs	r2, #2
 8000f86:	2101      	movs	r1, #1
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff5b 	bl	8000e44 <Protocol2_divideByte>
	//data
	Protocol2_divideByte(protocol2, 1, 1);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2101      	movs	r1, #1
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ff56 	bl	8000e44 <Protocol2_divideByte>

	//ID 2
	Protocol2_divideByte(protocol2, 2, 1);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff51 	bl	8000e44 <Protocol2_divideByte>
	//start address
	Protocol2_divideByte(protocol2, 64, 2);
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	2140      	movs	r1, #64	; 0x40
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff4c 	bl	8000e44 <Protocol2_divideByte>
	//data length
	Protocol2_divideByte(protocol2, 1, 2);
 8000fac:	2202      	movs	r2, #2
 8000fae:	2101      	movs	r1, #1
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff47 	bl	8000e44 <Protocol2_divideByte>
	//data
	Protocol2_divideByte(protocol2, 1, 1);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2101      	movs	r1, #1
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ff42 	bl	8000e44 <Protocol2_divideByte>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <Protocol2_writePosition>:

void Protocol2_writePosition(PROTOCOL2 *protocol2, IBUS *ibus)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
	//ID 1
	Protocol2_divideByte(protocol2, 1, 1);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ff34 	bl	8000e44 <Protocol2_divideByte>
	//start address
	Protocol2_divideByte(protocol2, 116, 2);
 8000fdc:	2202      	movs	r2, #2
 8000fde:	2174      	movs	r1, #116	; 0x74
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff2f 	bl	8000e44 <Protocol2_divideByte>
	//data length
	Protocol2_divideByte(protocol2, 4, 2);
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	2104      	movs	r1, #4
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ff2a 	bl	8000e44 <Protocol2_divideByte>
	//data
	Protocol2_divideByte(protocol2, ibus->pan, 4);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ff22 	bl	8000e44 <Protocol2_divideByte>

	//ID 2
	Protocol2_divideByte(protocol2, 2, 1);
 8001000:	2201      	movs	r2, #1
 8001002:	2102      	movs	r1, #2
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff1d 	bl	8000e44 <Protocol2_divideByte>
	//start address
	Protocol2_divideByte(protocol2, 116, 2);
 800100a:	2202      	movs	r2, #2
 800100c:	2174      	movs	r1, #116	; 0x74
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ff18 	bl	8000e44 <Protocol2_divideByte>
	//data length
	Protocol2_divideByte(protocol2, 4, 2);
 8001014:	2202      	movs	r2, #2
 8001016:	2104      	movs	r1, #4
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff13 	bl	8000e44 <Protocol2_divideByte>
	//data
	Protocol2_divideByte(protocol2, ibus->tilt, 4);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001024:	2204      	movs	r2, #4
 8001026:	4619      	mov	r1, r3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff0b 	bl	8000e44 <Protocol2_divideByte>

	//ID 10
	Protocol2_divideByte(protocol2, 10, 1);
 800102e:	2201      	movs	r2, #1
 8001030:	210a      	movs	r1, #10
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ff06 	bl	8000e44 <Protocol2_divideByte>
	//start address
	Protocol2_divideByte(protocol2, 116, 2);
 8001038:	2202      	movs	r2, #2
 800103a:	2174      	movs	r1, #116	; 0x74
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff01 	bl	8000e44 <Protocol2_divideByte>
	//data length
	Protocol2_divideByte(protocol2, 6, 2);
 8001042:	2202      	movs	r2, #2
 8001044:	2106      	movs	r1, #6
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff fefc 	bl	8000e44 <Protocol2_divideByte>
	//data
	Protocol2_divideByte(protocol2, ibus->fire, 1);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001052:	2201      	movs	r2, #1
 8001054:	4619      	mov	r1, r3
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff fef4 	bl	8000e44 <Protocol2_divideByte>
	Protocol2_divideByte(protocol2, ibus->light, 1);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001062:	2201      	movs	r2, #1
 8001064:	4619      	mov	r1, r3
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff feec 	bl	8000e44 <Protocol2_divideByte>
	Protocol2_divideByte(protocol2, ibus->leftDuty, 2);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001072:	2202      	movs	r2, #2
 8001074:	4619      	mov	r1, r3
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fee4 	bl	8000e44 <Protocol2_divideByte>
	Protocol2_divideByte(protocol2, ibus->leftDuty2, 2);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001082:	2202      	movs	r2, #2
 8001084:	4619      	mov	r1, r3
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff fedc 	bl	8000e44 <Protocol2_divideByte>

	//ID 11
	Protocol2_divideByte(protocol2, 11, 1);
 800108c:	2201      	movs	r2, #1
 800108e:	210b      	movs	r1, #11
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff fed7 	bl	8000e44 <Protocol2_divideByte>
	//start address
	Protocol2_divideByte(protocol2, 116, 2);
 8001096:	2202      	movs	r2, #2
 8001098:	2174      	movs	r1, #116	; 0x74
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff fed2 	bl	8000e44 <Protocol2_divideByte>
	//data length
	Protocol2_divideByte(protocol2, 5, 2);
 80010a0:	2202      	movs	r2, #2
 80010a2:	2105      	movs	r1, #5
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff fecd 	bl	8000e44 <Protocol2_divideByte>
	//data
	Protocol2_divideByte(protocol2, ibus->rightDuty, 2);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010b0:	2202      	movs	r2, #2
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff fec5 	bl	8000e44 <Protocol2_divideByte>
	Protocol2_divideByte(protocol2, ibus->rightDuty2, 2);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c0:	2202      	movs	r2, #2
 80010c2:	4619      	mov	r1, r3
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff febd 	bl	8000e44 <Protocol2_divideByte>
	Protocol2_divideByte(protocol2, ibus->failsafe, 1);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80010d0:	2201      	movs	r2, #1
 80010d2:	4619      	mov	r1, r3
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff feb5 	bl	8000e44 <Protocol2_divideByte>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <Protocol2_update_length>:

void Protocol2_update_length(PROTOCOL2 *protocol2)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b085      	sub	sp, #20
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	int length = protocol2->txState-5;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	785b      	ldrb	r3, [r3, #1]
 80010ee:	3b05      	subs	r3, #5
 80010f0:	60fb      	str	r3, [r7, #12]

	protocol2->txBuffer[5] = (length & 0xff);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	protocol2->txBuffer[6] = ((length>>8) & 0xff);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	121b      	asrs	r3, r3, #8
 8001100:	b2da      	uxtb	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <Protocol2_update_crc>:

uint16_t Protocol2_update_crc(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800111a:	af00      	add	r7, sp, #0
 800111c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001120:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001124:	6019      	str	r1, [r3, #0]
 8001126:	4611      	mov	r1, r2
 8001128:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800112c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8001130:	4602      	mov	r2, r0
 8001132:	801a      	strh	r2, [r3, #0]
 8001134:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001138:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800113c:	460a      	mov	r2, r1
 800113e:	801a      	strh	r2, [r3, #0]
	uint16_t i, j;
	uint16_t crc_table[256] = {
 8001140:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001144:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001148:	4a28      	ldr	r2, [pc, #160]	; (80011ec <Protocol2_update_crc+0xd8>)
 800114a:	4618      	mov	r0, r3
 800114c:	4611      	mov	r1, r2
 800114e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001152:	461a      	mov	r2, r3
 8001154:	f002 ffae 	bl	80040b4 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++)
 8001158:	2300      	movs	r3, #0
 800115a:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800115e:	e031      	b.n	80011c4 <Protocol2_update_crc+0xb0>
	{
		i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8001160:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001164:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	0a1b      	lsrs	r3, r3, #8
 800116c:	b29a      	uxth	r2, r3
 800116e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8001172:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8001176:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 800117a:	6809      	ldr	r1, [r1, #0]
 800117c:	440b      	add	r3, r1
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b29b      	uxth	r3, r3
 8001182:	4053      	eors	r3, r2
 8001184:	b29b      	uxth	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 800118c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001190:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	b21a      	sxth	r2, r3
 800119a:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 800119e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80011a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011a6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4053      	eors	r3, r2
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80011b4:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80011b8:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 80011ba:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80011be:	3301      	adds	r3, #1
 80011c0:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 80011c4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80011c8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80011cc:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d3c4      	bcc.n	8001160 <Protocol2_update_crc+0x4c>
	}

	return crc_accum;
 80011d6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80011da:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80011de:	881b      	ldrh	r3, [r3, #0]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	080040e8 	.word	0x080040e8

080011f0 <Protocol2_writeByte>:

void Protocol2_writeByte(PROTOCOL2 *protocol2, IBUS *ibus)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
	Protocol2_update_header(protocol2);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fe4a 	bl	8000e94 <Protocol2_update_header>

	switch(protocol2->inited)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001206:	2b01      	cmp	r3, #1
 8001208:	d104      	bne.n	8001214 <Protocol2_writeByte+0x24>
	{
	case 1:
	{
		Protocol2_writePosition(protocol2, ibus);
 800120a:	6839      	ldr	r1, [r7, #0]
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fedb 	bl	8000fc8 <Protocol2_writePosition>

		break;
 8001212:	e007      	b.n	8001224 <Protocol2_writeByte+0x34>
	}
	default:
	{
		protocol2->inited = 1;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

		Protocol2_torqueOn(protocol2);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff fea3 	bl	8000f68 <Protocol2_torqueOn>

		break;
 8001222:	bf00      	nop
	}
	}

	Protocol2_update_length(protocol2);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff5c 	bl	80010e2 <Protocol2_update_length>
	Protocol2_divideByte(protocol2, Protocol2_update_crc(0, protocol2->txBuffer, protocol2->txState), 2);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f103 0142 	add.w	r1, r3, #66	; 0x42
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	785b      	ldrb	r3, [r3, #1]
 8001234:	b29b      	uxth	r3, r3
 8001236:	461a      	mov	r2, r3
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff ff6b 	bl	8001114 <Protocol2_update_crc>
 800123e:	4603      	mov	r3, r0
 8001240:	2202      	movs	r2, #2
 8001242:	4619      	mov	r1, r3
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fdfd 	bl	8000e44 <Protocol2_divideByte>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <Protocol2_writePacket>:

void Protocol2_writePacket(PROTOCOL2 *protocol2, IBUS *ibus)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
	protocol2->txState = 0;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	705a      	strb	r2, [r3, #1]

	Protocol2_writeByte(protocol2, ibus);
 8001264:	6839      	ldr	r1, [r7, #0]
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffc2 	bl	80011f0 <Protocol2_writeByte>

	for(int i = 0; i < PROTOCOL2_TX_BUFFER_SIZE; i++)
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	e012      	b.n	8001298 <Protocol2_writePacket+0x44>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART3));
 8001272:	bf00      	nop
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <Protocol2_writePacket+0x54>)
 8001276:	f7ff fdc3 	bl	8000e00 <LL_USART_IsActiveFlag_TXE>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0f9      	beq.n	8001274 <Protocol2_writePacket+0x20>
		LL_USART_TransmitData8(USART3, protocol2->txBuffer[i]);
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4413      	add	r3, r2
 8001286:	3342      	adds	r3, #66	; 0x42
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4619      	mov	r1, r3
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <Protocol2_writePacket+0x54>)
 800128e:	f7ff fdca 	bl	8000e26 <LL_USART_TransmitData8>
	for(int i = 0; i < PROTOCOL2_TX_BUFFER_SIZE; i++)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3301      	adds	r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2b3f      	cmp	r3, #63	; 0x3f
 800129c:	dde9      	ble.n	8001272 <Protocol2_writePacket+0x1e>
	}
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40004800 	.word	0x40004800

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db0b      	blt.n	80012f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 021f 	and.w	r2, r3, #31
 80012e0:	4907      	ldr	r1, [pc, #28]	; (8001300 <__NVIC_EnableIRQ+0x38>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	fa00 f202 	lsl.w	r2, r0, r2
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	; (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013cc:	4907      	ldr	r1, [pc, #28]	; (80013ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4013      	ands	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40023800 	.word	0x40023800

080013f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80013f4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80013f8:	f7ff ffe2 	bl	80013c0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80013fc:	f7ff ff56 	bl	80012ac <__NVIC_GetPriorityGrouping>
 8001400:	4603      	mov	r3, r0
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ffa6 	bl	8001358 <NVIC_EncodePriority>
 800140c:	4603      	mov	r3, r0
 800140e:	4619      	mov	r1, r3
 8001410:	200d      	movs	r0, #13
 8001412:	f7ff ff77 	bl	8001304 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001416:	200d      	movs	r0, #13
 8001418:	f7ff ff56 	bl	80012c8 <__NVIC_EnableIRQ>

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <LL_AHB1_GRP1_EnableClock>:
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800142a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800142c:	4907      	ldr	r1, [pc, #28]	; (800144c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4313      	orrs	r3, r2
 8001432:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4013      	ands	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	40023800 	.word	0x40023800

08001450 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001454:	2080      	movs	r0, #128	; 0x80
 8001456:	f7ff ffe3 	bl	8001420 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff ffe0 	bl	8001420 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001460:	2004      	movs	r0, #4
 8001462:	f7ff ffdd 	bl	8001420 <LL_AHB1_GRP1_EnableClock>

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}

0800146a <iBus_combineByte>:
 */

#include "iBus.h"

uint16_t iBus_combineByte(uint8_t lowByte, uint8_t highByte)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	460a      	mov	r2, r1
 8001474:	71fb      	strb	r3, [r7, #7]
 8001476:	4613      	mov	r3, r2
 8001478:	71bb      	strb	r3, [r7, #6]
	return (highByte << 8) + lowByte;
 800147a:	79bb      	ldrb	r3, [r7, #6]
 800147c:	b29b      	uxth	r3, r3
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b29a      	uxth	r2, r3
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	b29b      	uxth	r3, r3
 8001486:	4413      	add	r3, r2
 8001488:	b29b      	uxth	r3, r3
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <iBus_checksum>:

uint16_t iBus_checksum(uint8_t *packet)
{
 8001496:	b480      	push	{r7}
 8001498:	b085      	sub	sp, #20
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
	uint16_t checksum = 0xffff;
 800149e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a2:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < IBUS_RX_BUFFER_SIZE-2; i++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	e00a      	b.n	80014c0 <iBus_checksum+0x2a>
	{
		checksum -= packet[i];
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	89fa      	ldrh	r2, [r7, #14]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < IBUS_RX_BUFFER_SIZE-2; i++)
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	3301      	adds	r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b1d      	cmp	r3, #29
 80014c4:	ddf1      	ble.n	80014aa <iBus_checksum+0x14>
	}

	return checksum;
 80014c6:	89fb      	ldrh	r3, [r7, #14]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <iBus_parsing>:

void iBus_parsing(IBUS *ibus)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	ibus->rawdata[0] = iBus_combineByte(ibus->rxBuffer[2], ibus->rxBuffer[3]);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	78da      	ldrb	r2, [r3, #3]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	791b      	ldrb	r3, [r3, #4]
 80014e4:	4619      	mov	r1, r3
 80014e6:	4610      	mov	r0, r2
 80014e8:	f7ff ffbf 	bl	800146a <iBus_combineByte>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	84da      	strh	r2, [r3, #38]	; 0x26
	ibus->rawdata[1] = iBus_combineByte(ibus->rxBuffer[4], ibus->rxBuffer[5]);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	795a      	ldrb	r2, [r3, #5]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	799b      	ldrb	r3, [r3, #6]
 80014fc:	4619      	mov	r1, r3
 80014fe:	4610      	mov	r0, r2
 8001500:	f7ff ffb3 	bl	800146a <iBus_combineByte>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	851a      	strh	r2, [r3, #40]	; 0x28
	ibus->rawdata[2] = iBus_combineByte(ibus->rxBuffer[6], ibus->rxBuffer[7]);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	79da      	ldrb	r2, [r3, #7]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7a1b      	ldrb	r3, [r3, #8]
 8001514:	4619      	mov	r1, r3
 8001516:	4610      	mov	r0, r2
 8001518:	f7ff ffa7 	bl	800146a <iBus_combineByte>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	855a      	strh	r2, [r3, #42]	; 0x2a
	ibus->rawdata[3] = iBus_combineByte(ibus->rxBuffer[8], ibus->rxBuffer[9]);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7a5a      	ldrb	r2, [r3, #9]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7a9b      	ldrb	r3, [r3, #10]
 800152c:	4619      	mov	r1, r3
 800152e:	4610      	mov	r0, r2
 8001530:	f7ff ff9b 	bl	800146a <iBus_combineByte>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	859a      	strh	r2, [r3, #44]	; 0x2c
	ibus->rawdata[4] = iBus_combineByte(ibus->rxBuffer[10], ibus->rxBuffer[11]);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7ada      	ldrb	r2, [r3, #11]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7b1b      	ldrb	r3, [r3, #12]
 8001544:	4619      	mov	r1, r3
 8001546:	4610      	mov	r0, r2
 8001548:	f7ff ff8f 	bl	800146a <iBus_combineByte>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	85da      	strh	r2, [r3, #46]	; 0x2e
	ibus->rawdata[5] = iBus_combineByte(ibus->rxBuffer[12], ibus->rxBuffer[13]);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7b5a      	ldrb	r2, [r3, #13]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7b9b      	ldrb	r3, [r3, #14]
 800155c:	4619      	mov	r1, r3
 800155e:	4610      	mov	r0, r2
 8001560:	f7ff ff83 	bl	800146a <iBus_combineByte>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	861a      	strh	r2, [r3, #48]	; 0x30
	ibus->rawdata[6] = iBus_combineByte(ibus->rxBuffer[14], ibus->rxBuffer[15]);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7bda      	ldrb	r2, [r3, #15]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	7c1b      	ldrb	r3, [r3, #16]
 8001574:	4619      	mov	r1, r3
 8001576:	4610      	mov	r0, r2
 8001578:	f7ff ff77 	bl	800146a <iBus_combineByte>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	865a      	strh	r2, [r3, #50]	; 0x32
	ibus->rawdata[7] = iBus_combineByte(ibus->rxBuffer[16], ibus->rxBuffer[17]);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7c5a      	ldrb	r2, [r3, #17]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7c9b      	ldrb	r3, [r3, #18]
 800158c:	4619      	mov	r1, r3
 800158e:	4610      	mov	r0, r2
 8001590:	f7ff ff6b 	bl	800146a <iBus_combineByte>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	869a      	strh	r2, [r3, #52]	; 0x34

	ibus->failsafe = (ibus->rxBuffer[13] >> 4);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7b9b      	ldrb	r3, [r3, #14]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <iBus_rangeTransform>:

double iBus_rangeTransform(double input, double xMIN, double xMAX, double yMIN, double yMAX)
{
 80015b2:	b5b0      	push	{r4, r5, r7, lr}
 80015b4:	b08a      	sub	sp, #40	; 0x28
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	ed87 0b08 	vstr	d0, [r7, #32]
 80015bc:	ed87 1b06 	vstr	d1, [r7, #24]
 80015c0:	ed87 2b04 	vstr	d2, [r7, #16]
 80015c4:	ed87 3b02 	vstr	d3, [r7, #8]
 80015c8:	ed87 4b00 	vstr	d4, [r7]
	return ((yMAX - yMIN) / (xMAX - xMIN)) * (input - xMIN) + yMIN;
 80015cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015d4:	f7fe fe1c 	bl	8000210 <__aeabi_dsub>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4614      	mov	r4, r2
 80015de:	461d      	mov	r5, r3
 80015e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015e8:	f7fe fe12 	bl	8000210 <__aeabi_dsub>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4620      	mov	r0, r4
 80015f2:	4629      	mov	r1, r5
 80015f4:	f7ff f8ee 	bl	80007d4 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4614      	mov	r4, r2
 80015fe:	461d      	mov	r5, r3
 8001600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001604:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001608:	f7fe fe02 	bl	8000210 <__aeabi_dsub>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4620      	mov	r0, r4
 8001612:	4629      	mov	r1, r5
 8001614:	f7fe ffb4 	bl	8000580 <__aeabi_dmul>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001624:	f7fe fdf6 	bl	8000214 <__adddf3>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001630:	eeb0 0a47 	vmov.f32	s0, s14
 8001634:	eef0 0a67 	vmov.f32	s1, s15
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bdb0      	pop	{r4, r5, r7, pc}

0800163e <iBus_limiting>:

double iBus_limiting(double input, double limit)
{
 800163e:	b5b0      	push	{r4, r5, r7, lr}
 8001640:	b088      	sub	sp, #32
 8001642:	af00      	add	r7, sp, #0
 8001644:	ed87 0b04 	vstr	d0, [r7, #16]
 8001648:	ed87 1b02 	vstr	d1, [r7, #8]
	double output;

	if(input > limit)
 800164c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001650:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001654:	f7ff fa24 	bl	8000aa0 <__aeabi_dcmpgt>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d004      	beq.n	8001668 <iBus_limiting+0x2a>
	{
		output = limit;
 800165e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001662:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001666:	e019      	b.n	800169c <iBus_limiting+0x5e>
	}
	else if(input < -limit)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001678:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800167c:	f7ff f9f2 	bl	8000a64 <__aeabi_dcmplt>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d006      	beq.n	8001694 <iBus_limiting+0x56>
	{
		output = -limit;
 8001686:	68bc      	ldr	r4, [r7, #8]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800168e:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8001692:	e003      	b.n	800169c <iBus_limiting+0x5e>
	}
	else
	{
		output = input;
 8001694:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001698:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}

	return output;
 800169c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016a0:	ec43 2b17 	vmov	d7, r2, r3
}
 80016a4:	eeb0 0a47 	vmov.f32	s0, s14
 80016a8:	eef0 0a67 	vmov.f32	s1, s15
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bdb0      	pop	{r4, r5, r7, pc}
 80016b2:	0000      	movs	r0, r0
 80016b4:	0000      	movs	r0, r0
	...

080016b8 <iBus_normalization>:

void iBus_normalization(IBUS *ibus)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < IBUS_CHANNEL_SIZE; i++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	e081      	b.n	80017ca <iBus_normalization+0x112>
	{
		ibus->channel[i] = iBus_rangeTransform(ibus->rawdata[i], 1000, 2000, -1, 1);
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3310      	adds	r3, #16
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4413      	add	r3, r2
 80016d0:	88db      	ldrh	r3, [r3, #6]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe feda 	bl	800048c <__aeabi_ui2d>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	ed9f 4b40 	vldr	d4, [pc, #256]	; 80017e0 <iBus_normalization+0x128>
 80016e0:	ed9f 3b41 	vldr	d3, [pc, #260]	; 80017e8 <iBus_normalization+0x130>
 80016e4:	ed9f 2b42 	vldr	d2, [pc, #264]	; 80017f0 <iBus_normalization+0x138>
 80016e8:	ed9f 1b43 	vldr	d1, [pc, #268]	; 80017f8 <iBus_normalization+0x140>
 80016ec:	ec43 2b10 	vmov	d0, r2, r3
 80016f0:	f7ff ff5f 	bl	80015b2 <iBus_rangeTransform>
 80016f4:	eeb0 7a40 	vmov.f32	s14, s0
 80016f8:	eef0 7a60 	vmov.f32	s15, s1
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3307      	adds	r3, #7
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4413      	add	r3, r2
 8001706:	ed83 7b00 	vstr	d7, [r3]

		if(ibus->channel[i] < 0.1 && ibus->channel[i] > -0.1)
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3307      	adds	r3, #7
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4413      	add	r3, r2
 8001714:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001718:	a33d      	add	r3, pc, #244	; (adr r3, 8001810 <iBus_normalization+0x158>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7ff f9a1 	bl	8000a64 <__aeabi_dcmplt>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d01a      	beq.n	800175e <iBus_normalization+0xa6>
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3307      	adds	r3, #7
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4413      	add	r3, r2
 8001732:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001736:	a338      	add	r3, pc, #224	; (adr r3, 8001818 <iBus_normalization+0x160>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7ff f9b0 	bl	8000aa0 <__aeabi_dcmpgt>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00b      	beq.n	800175e <iBus_normalization+0xa6>
		{
			ibus->channel[i] = 0.0;
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3307      	adds	r3, #7
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	18d1      	adds	r1, r2, r3
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	e9c1 2300 	strd	r2, r3, [r1]
 800175c:	e032      	b.n	80017c4 <iBus_normalization+0x10c>
		}
		else if(ibus->channel[i] > 0.9)
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	3307      	adds	r3, #7
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4413      	add	r3, r2
 8001768:	e9d3 0100 	ldrd	r0, r1, [r3]
 800176c:	a32c      	add	r3, pc, #176	; (adr r3, 8001820 <iBus_normalization+0x168>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f7ff f995 	bl	8000aa0 <__aeabi_dcmpgt>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00a      	beq.n	8001792 <iBus_normalization+0xda>
		{
			ibus->channel[i] = 1.0;
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3307      	adds	r3, #7
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	18d1      	adds	r1, r2, r3
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <iBus_normalization+0x150>)
 800178c:	e9c1 2300 	strd	r2, r3, [r1]
 8001790:	e018      	b.n	80017c4 <iBus_normalization+0x10c>
		}
		else if(ibus->channel[i] < -0.9)
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3307      	adds	r3, #7
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	4413      	add	r3, r2
 800179c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017a0:	a317      	add	r3, pc, #92	; (adr r3, 8001800 <iBus_normalization+0x148>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7ff f95d 	bl	8000a64 <__aeabi_dcmplt>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <iBus_normalization+0x10c>
		{
			ibus->channel[i] = -1.0;
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	3307      	adds	r3, #7
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	18d1      	adds	r1, r2, r3
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <iBus_normalization+0x154>)
 80017c0:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i < IBUS_CHANNEL_SIZE; i++)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b07      	cmp	r3, #7
 80017ce:	f77f af7a 	ble.w	80016c6 <iBus_normalization+0xe>
		}
	}
}
 80017d2:	bf00      	nop
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	f3af 8000 	nop.w
 80017e0:	00000000 	.word	0x00000000
 80017e4:	3ff00000 	.word	0x3ff00000
 80017e8:	00000000 	.word	0x00000000
 80017ec:	bff00000 	.word	0xbff00000
 80017f0:	00000000 	.word	0x00000000
 80017f4:	409f4000 	.word	0x409f4000
 80017f8:	00000000 	.word	0x00000000
 80017fc:	408f4000 	.word	0x408f4000
 8001800:	cccccccd 	.word	0xcccccccd
 8001804:	bfeccccc 	.word	0xbfeccccc
 8001808:	3ff00000 	.word	0x3ff00000
 800180c:	bff00000 	.word	0xbff00000
 8001810:	9999999a 	.word	0x9999999a
 8001814:	3fb99999 	.word	0x3fb99999
 8001818:	9999999a 	.word	0x9999999a
 800181c:	bfb99999 	.word	0xbfb99999
 8001820:	cccccccd 	.word	0xcccccccd
 8001824:	3feccccc 	.word	0x3feccccc

08001828 <iBus_cmd_vel>:

void iBus_cmd_vel(IBUS *ibus)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08e      	sub	sp, #56	; 0x38
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	double linear = ibus->channel[1];
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001836:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double angular = ibus->channel[0];
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001840:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pan = -ibus->channel[3];
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800184a:	4611      	mov	r1, r2
 800184c:	6239      	str	r1, [r7, #32]
 800184e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
	double tilt = ibus->channel[2];
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800185a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double fire = ibus->channel[5];
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001864:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double light = ibus->channel[4];
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800186e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	ibus->leftRPM = (linear + (angular * 4) * WHEEL_WIDTH / 2) / (PI * WHEEL_DIAMETER) * 60;
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	4bde      	ldr	r3, [pc, #888]	; (8001bf0 <iBus_cmd_vel+0x3c8>)
 8001878:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800187c:	f7fe fe80 	bl	8000580 <__aeabi_dmul>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	a3c7      	add	r3, pc, #796	; (adr r3, 8001ba8 <iBus_cmd_vel+0x380>)
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	f7fe fe77 	bl	8000580 <__aeabi_dmul>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018a2:	f7fe ff97 	bl	80007d4 <__aeabi_ddiv>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80018b2:	f7fe fcaf 	bl	8000214 <__adddf3>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	a3bc      	add	r3, pc, #752	; (adr r3, 8001bb0 <iBus_cmd_vel+0x388>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe ff86 	bl	80007d4 <__aeabi_ddiv>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	4bc7      	ldr	r3, [pc, #796]	; (8001bf4 <iBus_cmd_vel+0x3cc>)
 80018d6:	f7fe fe53 	bl	8000580 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f8e7 	bl	8000ab4 <__aeabi_d2iz>
 80018e6:	4602      	mov	r2, r0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	679a      	str	r2, [r3, #120]	; 0x78
	ibus->rightRPM = (linear - (angular * 4) * WHEEL_WIDTH / 2) / (PI * WHEEL_DIAMETER) * 60;
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	4bbf      	ldr	r3, [pc, #764]	; (8001bf0 <iBus_cmd_vel+0x3c8>)
 80018f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018f6:	f7fe fe43 	bl	8000580 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	a3a9      	add	r3, pc, #676	; (adr r3, 8001ba8 <iBus_cmd_vel+0x380>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fe3a 	bl	8000580 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800191c:	f7fe ff5a 	bl	80007d4 <__aeabi_ddiv>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001928:	f7fe fc72 	bl	8000210 <__aeabi_dsub>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	a39e      	add	r3, pc, #632	; (adr r3, 8001bb0 <iBus_cmd_vel+0x388>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	f7fe ff4b 	bl	80007d4 <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4baa      	ldr	r3, [pc, #680]	; (8001bf4 <iBus_cmd_vel+0x3cc>)
 800194c:	f7fe fe18 	bl	8000580 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	f7ff f8ac 	bl	8000ab4 <__aeabi_d2iz>
 800195c:	4602      	mov	r2, r0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	67da      	str	r2, [r3, #124]	; 0x7c

	ibus->leftRPM = iBus_rangeTransform(ibus->leftRPM, 0, 100, RPM_MIN, RPM_MAX) * GEAR_RATIO / WHEEL_DIFFERENCE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fda0 	bl	80004ac <__aeabi_i2d>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	ed9f 4b91 	vldr	d4, [pc, #580]	; 8001bb8 <iBus_cmd_vel+0x390>
 8001974:	ed9f 3b92 	vldr	d3, [pc, #584]	; 8001bc0 <iBus_cmd_vel+0x398>
 8001978:	ed9f 2b93 	vldr	d2, [pc, #588]	; 8001bc8 <iBus_cmd_vel+0x3a0>
 800197c:	ed9f 1b90 	vldr	d1, [pc, #576]	; 8001bc0 <iBus_cmd_vel+0x398>
 8001980:	ec43 2b10 	vmov	d0, r2, r3
 8001984:	f7ff fe15 	bl	80015b2 <iBus_rangeTransform>
 8001988:	ec51 0b10 	vmov	r0, r1, d0
 800198c:	a390      	add	r3, pc, #576	; (adr r3, 8001bd0 <iBus_cmd_vel+0x3a8>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	f7fe ff1f 	bl	80007d4 <__aeabi_ddiv>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	a38e      	add	r3, pc, #568	; (adr r3, 8001bd8 <iBus_cmd_vel+0x3b0>)
 80019a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a4:	f7fe ff16 	bl	80007d4 <__aeabi_ddiv>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	f7ff f880 	bl	8000ab4 <__aeabi_d2iz>
 80019b4:	4602      	mov	r2, r0
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	679a      	str	r2, [r3, #120]	; 0x78
	ibus->rightRPM = iBus_rangeTransform(ibus->rightRPM, 0, 100, RPM_MIN, RPM_MAX) * GEAR_RATIO / WHEEL_DIFFERENCE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fd74 	bl	80004ac <__aeabi_i2d>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	ed9f 4b7b 	vldr	d4, [pc, #492]	; 8001bb8 <iBus_cmd_vel+0x390>
 80019cc:	ed9f 3b7c 	vldr	d3, [pc, #496]	; 8001bc0 <iBus_cmd_vel+0x398>
 80019d0:	ed9f 2b7d 	vldr	d2, [pc, #500]	; 8001bc8 <iBus_cmd_vel+0x3a0>
 80019d4:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 8001bc0 <iBus_cmd_vel+0x398>
 80019d8:	ec43 2b10 	vmov	d0, r2, r3
 80019dc:	f7ff fde9 	bl	80015b2 <iBus_rangeTransform>
 80019e0:	ec51 0b10 	vmov	r0, r1, d0
 80019e4:	a37a      	add	r3, pc, #488	; (adr r3, 8001bd0 <iBus_cmd_vel+0x3a8>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	f7fe fef3 	bl	80007d4 <__aeabi_ddiv>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	a378      	add	r3, pc, #480	; (adr r3, 8001bd8 <iBus_cmd_vel+0x3b0>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	f7fe feea 	bl	80007d4 <__aeabi_ddiv>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f7ff f854 	bl	8000ab4 <__aeabi_d2iz>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	67da      	str	r2, [r3, #124]	; 0x7c
	ibus->leftRPM2 = ibus->leftRPM * WHEEL_DIFFERENCE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd48 	bl	80004ac <__aeabi_i2d>
 8001a1c:	a36e      	add	r3, pc, #440	; (adr r3, 8001bd8 <iBus_cmd_vel+0x3b0>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fdad 	bl	8000580 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff f841 	bl	8000ab4 <__aeabi_d2iz>
 8001a32:	4602      	mov	r2, r0
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	ibus->rightRPM2 = ibus->rightRPM * WHEEL_DIFFERENCE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd34 	bl	80004ac <__aeabi_i2d>
 8001a44:	a364      	add	r3, pc, #400	; (adr r3, 8001bd8 <iBus_cmd_vel+0x3b0>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fd99 	bl	8000580 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7ff f82d 	bl	8000ab4 <__aeabi_d2iz>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	ibus->leftRPM = iBus_limiting(ibus->leftRPM, RPM_MAX * GEAR_RATIO);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd20 	bl	80004ac <__aeabi_i2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8001be0 <iBus_cmd_vel+0x3b8>
 8001a74:	ec43 2b10 	vmov	d0, r2, r3
 8001a78:	f7ff fde1 	bl	800163e <iBus_limiting>
 8001a7c:	ec53 2b10 	vmov	r2, r3, d0
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	f7ff f816 	bl	8000ab4 <__aeabi_d2iz>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	679a      	str	r2, [r3, #120]	; 0x78
	ibus->rightRPM = iBus_limiting(ibus->rightRPM, RPM_MAX * GEAR_RATIO);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fd0a 	bl	80004ac <__aeabi_i2d>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8001be0 <iBus_cmd_vel+0x3b8>
 8001aa0:	ec43 2b10 	vmov	d0, r2, r3
 8001aa4:	f7ff fdcb 	bl	800163e <iBus_limiting>
 8001aa8:	ec53 2b10 	vmov	r2, r3, d0
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f7ff f800 	bl	8000ab4 <__aeabi_d2iz>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	67da      	str	r2, [r3, #124]	; 0x7c
	ibus->leftRPM2 = iBus_limiting(ibus->leftRPM2, RPM_MAX * GEAR_RATIO);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fcf3 	bl	80004ac <__aeabi_i2d>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	ed9f 1b45 	vldr	d1, [pc, #276]	; 8001be0 <iBus_cmd_vel+0x3b8>
 8001ace:	ec43 2b10 	vmov	d0, r2, r3
 8001ad2:	f7ff fdb4 	bl	800163e <iBus_limiting>
 8001ad6:	ec53 2b10 	vmov	r2, r3, d0
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7fe ffe9 	bl	8000ab4 <__aeabi_d2iz>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	ibus->rightRPM2 = iBus_limiting(ibus->rightRPM2, RPM_MAX * GEAR_RATIO);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fcdb 	bl	80004ac <__aeabi_i2d>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8001be0 <iBus_cmd_vel+0x3b8>
 8001afe:	ec43 2b10 	vmov	d0, r2, r3
 8001b02:	f7ff fd9c 	bl	800163e <iBus_limiting>
 8001b06:	ec53 2b10 	vmov	r2, r3, d0
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7fe ffd1 	bl	8000ab4 <__aeabi_d2iz>
 8001b12:	4602      	mov	r2, r0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	ibus->leftDuty = iBus_rangeTransform(ibus->leftRPM, RPM_MIN, RPM_MAX * GEAR_RATIO, DUTY_MIN, DUTY_MAX);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fcc4 	bl	80004ac <__aeabi_i2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	ed9f 4b2f 	vldr	d4, [pc, #188]	; 8001be8 <iBus_cmd_vel+0x3c0>
 8001b2c:	ed9f 3b24 	vldr	d3, [pc, #144]	; 8001bc0 <iBus_cmd_vel+0x398>
 8001b30:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 8001be0 <iBus_cmd_vel+0x3b8>
 8001b34:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001bc0 <iBus_cmd_vel+0x398>
 8001b38:	ec43 2b10 	vmov	d0, r2, r3
 8001b3c:	f7ff fd39 	bl	80015b2 <iBus_rangeTransform>
 8001b40:	ec53 2b10 	vmov	r2, r3, d0
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f7fe ffb4 	bl	8000ab4 <__aeabi_d2iz>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	ibus->rightDuty = iBus_rangeTransform(ibus->rightRPM, RPM_MIN, RPM_MAX * GEAR_RATIO, DUTY_MIN, DUTY_MAX);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fca7 	bl	80004ac <__aeabi_i2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	ed9f 4b21 	vldr	d4, [pc, #132]	; 8001be8 <iBus_cmd_vel+0x3c0>
 8001b66:	ed9f 3b16 	vldr	d3, [pc, #88]	; 8001bc0 <iBus_cmd_vel+0x398>
 8001b6a:	ed9f 2b1d 	vldr	d2, [pc, #116]	; 8001be0 <iBus_cmd_vel+0x3b8>
 8001b6e:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8001bc0 <iBus_cmd_vel+0x398>
 8001b72:	ec43 2b10 	vmov	d0, r2, r3
 8001b76:	f7ff fd1c 	bl	80015b2 <iBus_rangeTransform>
 8001b7a:	ec53 2b10 	vmov	r2, r3, d0
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f7fe ff97 	bl	8000ab4 <__aeabi_d2iz>
 8001b86:	4602      	mov	r2, r0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	ibus->leftDuty2 = iBus_rangeTransform(ibus->leftRPM2, RPM_MIN, RPM_MAX * GEAR_RATIO, DUTY_MIN, DUTY_MAX);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fc89 	bl	80004ac <__aeabi_i2d>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	ed9f 4b12 	vldr	d4, [pc, #72]	; 8001be8 <iBus_cmd_vel+0x3c0>
 8001ba2:	e029      	b.n	8001bf8 <iBus_cmd_vel+0x3d0>
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	2d0e5604 	.word	0x2d0e5604
 8001bac:	3fdf9db2 	.word	0x3fdf9db2
 8001bb0:	7178fa4e 	.word	0x7178fa4e
 8001bb4:	3fe7b9ad 	.word	0x3fe7b9ad
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	40588000 	.word	0x40588000
	...
 8001bcc:	40590000 	.word	0x40590000
 8001bd0:	cccccccd 	.word	0xcccccccd
 8001bd4:	3ffccccc 	.word	0x3ffccccc
 8001bd8:	c8b43958 	.word	0xc8b43958
 8001bdc:	3ff3be76 	.word	0x3ff3be76
 8001be0:	8e38e38e 	.word	0x8e38e38e
 8001be4:	404b38e3 	.word	0x404b38e3
 8001be8:	00000000 	.word	0x00000000
 8001bec:	408f4000 	.word	0x408f4000
 8001bf0:	40100000 	.word	0x40100000
 8001bf4:	404e0000 	.word	0x404e0000
 8001bf8:	ed9f 3b77 	vldr	d3, [pc, #476]	; 8001dd8 <iBus_cmd_vel+0x5b0>
 8001bfc:	ed9f 2b78 	vldr	d2, [pc, #480]	; 8001de0 <iBus_cmd_vel+0x5b8>
 8001c00:	ed9f 1b75 	vldr	d1, [pc, #468]	; 8001dd8 <iBus_cmd_vel+0x5b0>
 8001c04:	ec43 2b10 	vmov	d0, r2, r3
 8001c08:	f7ff fcd3 	bl	80015b2 <iBus_rangeTransform>
 8001c0c:	ec53 2b10 	vmov	r2, r3, d0
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f7fe ff4e 	bl	8000ab4 <__aeabi_d2iz>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	ibus->rightDuty2 = iBus_rangeTransform(ibus->rightRPM2, RPM_MIN, RPM_MAX * GEAR_RATIO, DUTY_MIN, DUTY_MAX);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc40 	bl	80004ac <__aeabi_i2d>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8001de8 <iBus_cmd_vel+0x5c0>
 8001c34:	ed9f 3b68 	vldr	d3, [pc, #416]	; 8001dd8 <iBus_cmd_vel+0x5b0>
 8001c38:	ed9f 2b69 	vldr	d2, [pc, #420]	; 8001de0 <iBus_cmd_vel+0x5b8>
 8001c3c:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8001dd8 <iBus_cmd_vel+0x5b0>
 8001c40:	ec43 2b10 	vmov	d0, r2, r3
 8001c44:	f7ff fcb5 	bl	80015b2 <iBus_rangeTransform>
 8001c48:	ec53 2b10 	vmov	r2, r3, d0
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f7fe ff30 	bl	8000ab4 <__aeabi_d2iz>
 8001c54:	4602      	mov	r2, r0
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	ibus->leftDuty = iBus_limiting(ibus->leftDuty, DUTY_MAX * 0.8);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc22 	bl	80004ac <__aeabi_i2d>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	ed9f 1b60 	vldr	d1, [pc, #384]	; 8001df0 <iBus_cmd_vel+0x5c8>
 8001c70:	ec43 2b10 	vmov	d0, r2, r3
 8001c74:	f7ff fce3 	bl	800163e <iBus_limiting>
 8001c78:	ec53 2b10 	vmov	r2, r3, d0
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f7fe ff18 	bl	8000ab4 <__aeabi_d2iz>
 8001c84:	4602      	mov	r2, r0
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	ibus->rightDuty = iBus_limiting(ibus->rightDuty, DUTY_MAX * 0.8);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc0a 	bl	80004ac <__aeabi_i2d>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	ed9f 1b54 	vldr	d1, [pc, #336]	; 8001df0 <iBus_cmd_vel+0x5c8>
 8001ca0:	ec43 2b10 	vmov	d0, r2, r3
 8001ca4:	f7ff fccb 	bl	800163e <iBus_limiting>
 8001ca8:	ec53 2b10 	vmov	r2, r3, d0
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7fe ff00 	bl	8000ab4 <__aeabi_d2iz>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	ibus->leftDuty2 = iBus_limiting(ibus->leftDuty2, DUTY_MAX * 0.8);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fbf2 	bl	80004ac <__aeabi_i2d>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8001df0 <iBus_cmd_vel+0x5c8>
 8001cd0:	ec43 2b10 	vmov	d0, r2, r3
 8001cd4:	f7ff fcb3 	bl	800163e <iBus_limiting>
 8001cd8:	ec53 2b10 	vmov	r2, r3, d0
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f7fe fee8 	bl	8000ab4 <__aeabi_d2iz>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	ibus->rightDuty2 = iBus_limiting(ibus->rightDuty2, DUTY_MAX * 0.8);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fbda 	bl	80004ac <__aeabi_i2d>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8001df0 <iBus_cmd_vel+0x5c8>
 8001d00:	ec43 2b10 	vmov	d0, r2, r3
 8001d04:	f7ff fc9b 	bl	800163e <iBus_limiting>
 8001d08:	ec53 2b10 	vmov	r2, r3, d0
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7fe fed0 	bl	8000ab4 <__aeabi_d2iz>
 8001d14:	4602      	mov	r2, r0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	ibus->pan = iBus_rangeTransform(pan, -1, 1, 1023, 3073);
 8001d1c:	ed9f 4b36 	vldr	d4, [pc, #216]	; 8001df8 <iBus_cmd_vel+0x5d0>
 8001d20:	ed9f 3b37 	vldr	d3, [pc, #220]	; 8001e00 <iBus_cmd_vel+0x5d8>
 8001d24:	ed9f 2b38 	vldr	d2, [pc, #224]	; 8001e08 <iBus_cmd_vel+0x5e0>
 8001d28:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8001e10 <iBus_cmd_vel+0x5e8>
 8001d2c:	ed97 0b08 	vldr	d0, [r7, #32]
 8001d30:	f7ff fc3f 	bl	80015b2 <iBus_rangeTransform>
 8001d34:	ec53 2b10 	vmov	r2, r3, d0
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f7fe feba 	bl	8000ab4 <__aeabi_d2iz>
 8001d40:	4602      	mov	r2, r0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	ibus->tilt = iBus_rangeTransform(tilt, -1, 1, 1023, 3073);
 8001d48:	ed9f 4b2b 	vldr	d4, [pc, #172]	; 8001df8 <iBus_cmd_vel+0x5d0>
 8001d4c:	ed9f 3b2c 	vldr	d3, [pc, #176]	; 8001e00 <iBus_cmd_vel+0x5d8>
 8001d50:	ed9f 2b2d 	vldr	d2, [pc, #180]	; 8001e08 <iBus_cmd_vel+0x5e0>
 8001d54:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8001e10 <iBus_cmd_vel+0x5e8>
 8001d58:	ed97 0b06 	vldr	d0, [r7, #24]
 8001d5c:	f7ff fc29 	bl	80015b2 <iBus_rangeTransform>
 8001d60:	ec53 2b10 	vmov	r2, r3, d0
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7fe fea4 	bl	8000ab4 <__aeabi_d2iz>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	ibus->fire = iBus_rangeTransform(fire, -1, 1, 0, 1);
 8001d74:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8001e08 <iBus_cmd_vel+0x5e0>
 8001d78:	ed9f 3b17 	vldr	d3, [pc, #92]	; 8001dd8 <iBus_cmd_vel+0x5b0>
 8001d7c:	ed9f 2b22 	vldr	d2, [pc, #136]	; 8001e08 <iBus_cmd_vel+0x5e0>
 8001d80:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001e10 <iBus_cmd_vel+0x5e8>
 8001d84:	ed97 0b04 	vldr	d0, [r7, #16]
 8001d88:	f7ff fc13 	bl	80015b2 <iBus_rangeTransform>
 8001d8c:	ec53 2b10 	vmov	r2, r3, d0
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f7fe fe8e 	bl	8000ab4 <__aeabi_d2iz>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ibus->light = iBus_rangeTransform(light, -1, 1, 0, 1);
 8001da0:	ed9f 4b19 	vldr	d4, [pc, #100]	; 8001e08 <iBus_cmd_vel+0x5e0>
 8001da4:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 8001dd8 <iBus_cmd_vel+0x5b0>
 8001da8:	ed9f 2b17 	vldr	d2, [pc, #92]	; 8001e08 <iBus_cmd_vel+0x5e0>
 8001dac:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8001e10 <iBus_cmd_vel+0x5e8>
 8001db0:	ed97 0b02 	vldr	d0, [r7, #8]
 8001db4:	f7ff fbfd 	bl	80015b2 <iBus_rangeTransform>
 8001db8:	ec53 2b10 	vmov	r2, r3, d0
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f7fe fe78 	bl	8000ab4 <__aeabi_d2iz>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001dcc:	bf00      	nop
 8001dce:	3738      	adds	r7, #56	; 0x38
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	f3af 8000 	nop.w
	...
 8001de0:	8e38e38e 	.word	0x8e38e38e
 8001de4:	404b38e3 	.word	0x404b38e3
 8001de8:	00000000 	.word	0x00000000
 8001dec:	408f4000 	.word	0x408f4000
 8001df0:	00000000 	.word	0x00000000
 8001df4:	40890000 	.word	0x40890000
 8001df8:	00000000 	.word	0x00000000
 8001dfc:	40a80200 	.word	0x40a80200
 8001e00:	00000000 	.word	0x00000000
 8001e04:	408ff800 	.word	0x408ff800
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	3ff00000 	.word	0x3ff00000
 8001e10:	00000000 	.word	0x00000000
 8001e14:	bff00000 	.word	0xbff00000

08001e18 <iBus_readPacket>:

uint8_t iBus_readPacket(IBUS *ibus, uint8_t *packet)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
	ibus->state = IBUS_HEADER_1;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < IBUS_RX_BUFFER_SIZE; i++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	e00f      	b.n	8001e4e <iBus_readPacket+0x36>
	{
		if(iBus_readByte(ibus, packet[i]))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	4619      	mov	r1, r3
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f810 	bl	8001e5e <iBus_readByte>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <iBus_readPacket+0x30>
		{
			return 1;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e006      	b.n	8001e56 <iBus_readPacket+0x3e>
	for(int i = 0; i < IBUS_RX_BUFFER_SIZE; i++)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b1f      	cmp	r3, #31
 8001e52:	ddec      	ble.n	8001e2e <iBus_readPacket+0x16>
		}
	}

	return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <iBus_readByte>:

uint8_t iBus_readByte(IBUS *ibus, uint8_t byte)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	70fb      	strb	r3, [r7, #3]
	switch (ibus->state)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b1f      	cmp	r3, #31
 8001e70:	d02c      	beq.n	8001ecc <iBus_readByte+0x6e>
 8001e72:	2b1f      	cmp	r3, #31
 8001e74:	dc5d      	bgt.n	8001f32 <iBus_readByte+0xd4>
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <iBus_readByte+0x22>
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d011      	beq.n	8001ea2 <iBus_readByte+0x44>
 8001e7e:	e058      	b.n	8001f32 <iBus_readByte+0xd4>
	{
	case IBUS_HEADER_1:
	{
		if(byte == 0x20)
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	d163      	bne.n	8001f4e <iBus_readByte+0xf0>
		{
			ibus->rxBuffer[ibus->state] = byte;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	705a      	strb	r2, [r3, #1]
			ibus->state++;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001ea0:	e055      	b.n	8001f4e <iBus_readByte+0xf0>
	}
	case IBUS_HEADER_2:
	{
		if(byte == 0x40)
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	2b40      	cmp	r3, #64	; 0x40
 8001ea6:	d10d      	bne.n	8001ec4 <iBus_readByte+0x66>
		{
			ibus->rxBuffer[ibus->state] = byte;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	78fa      	ldrb	r2, [r7, #3]
 8001eb4:	705a      	strb	r2, [r3, #1]
			ibus->state++;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			ibus->state = IBUS_HEADER_1;
		}
		break;
 8001ec2:	e045      	b.n	8001f50 <iBus_readByte+0xf2>
			ibus->state = IBUS_HEADER_1;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
		break;
 8001eca:	e041      	b.n	8001f50 <iBus_readByte+0xf2>
	}
	case IBUS_CHECKSUM_2:
	{
		ibus->rxBuffer[ibus->state] = byte;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	78fa      	ldrb	r2, [r7, #3]
 8001ed8:	705a      	strb	r2, [r3, #1]
		ibus->state = IBUS_HEADER_1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]

		ibus->checksum_buffer = iBus_checksum(ibus->rxBuffer);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fad6 	bl	8001496 <iBus_checksum>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	845a      	strh	r2, [r3, #34]	; 0x22
		ibus->checksum_packet = iBus_combineByte(ibus->rxBuffer[IBUS_CHECKSUM_2-1], ibus->rxBuffer[IBUS_CHECKSUM_2]);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	7fda      	ldrb	r2, [r3, #31]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001efc:	4619      	mov	r1, r3
 8001efe:	4610      	mov	r0, r2
 8001f00:	f7ff fab3 	bl	800146a <iBus_combineByte>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	849a      	strh	r2, [r3, #36]	; 0x24

		if(ibus->checksum_buffer == ibus->checksum_packet)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d10a      	bne.n	8001f2e <iBus_readByte+0xd0>
		{
			iBus_parsing(ibus);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff fadb 	bl	80014d4 <iBus_parsing>
			iBus_normalization(ibus);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff fbca 	bl	80016b8 <iBus_normalization>
			iBus_cmd_vel(ibus);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff fc7f 	bl	8001828 <iBus_cmd_vel>

			return 1;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e011      	b.n	8001f52 <iBus_readByte+0xf4>
		}
		else
		{
			return 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e00f      	b.n	8001f52 <iBus_readByte+0xf4>
		}
		break;
	}
	default:
	{
		ibus->rxBuffer[ibus->state] = byte;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	705a      	strb	r2, [r3, #1]
		ibus->state++;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	3301      	adds	r3, #1
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	701a      	strb	r2, [r3, #0]
		break;
 8001f4c:	e000      	b.n	8001f50 <iBus_readByte+0xf2>
		break;
 8001f4e:	bf00      	nop
	}
	}

	return 0;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <__NVIC_SetPriorityGrouping>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8e:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	60d3      	str	r3, [r2, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_GetPriorityGrouping>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <__NVIC_GetPriorityGrouping+0x18>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 0307 	and.w	r3, r3, #7
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_SetPriority>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db0a      	blt.n	8001fea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	490c      	ldr	r1, [pc, #48]	; (800200c <__NVIC_SetPriority+0x4c>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	0112      	lsls	r2, r2, #4
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fe8:	e00a      	b.n	8002000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4908      	ldr	r1, [pc, #32]	; (8002010 <__NVIC_SetPriority+0x50>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	3b04      	subs	r3, #4
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	761a      	strb	r2, [r3, #24]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <NVIC_EncodePriority>:
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f1c3 0307 	rsb	r3, r3, #7
 800202e:	2b04      	cmp	r3, #4
 8002030:	bf28      	it	cs
 8002032:	2304      	movcs	r3, #4
 8002034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	2b06      	cmp	r3, #6
 800203c:	d902      	bls.n	8002044 <NVIC_EncodePriority+0x30>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3b03      	subs	r3, #3
 8002042:	e000      	b.n	8002046 <NVIC_EncodePriority+0x32>
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	401a      	ands	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43d9      	mvns	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	4313      	orrs	r3, r2
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	; 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002086:	4a0c      	ldr	r2, [pc, #48]	; (80020b8 <LL_DMA_EnableStream+0x3c>)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	4413      	add	r3, r2
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4413      	add	r3, r2
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4908      	ldr	r1, [pc, #32]	; (80020b8 <LL_DMA_EnableStream+0x3c>)
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	440a      	add	r2, r1
 800209c:	7812      	ldrb	r2, [r2, #0]
 800209e:	4611      	mov	r1, r2
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	440a      	add	r2, r1
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6013      	str	r3, [r2, #0]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	080042e8 	.word	0x080042e8

080020bc <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80020c8:	4a0d      	ldr	r2, [pc, #52]	; (8002100 <LL_DMA_SetDataLength+0x44>)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	4413      	add	r3, r2
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4413      	add	r3, r2
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	041b      	lsls	r3, r3, #16
 80020dc:	4908      	ldr	r1, [pc, #32]	; (8002100 <LL_DMA_SetDataLength+0x44>)
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	440a      	add	r2, r1
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	4611      	mov	r1, r2
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	440a      	add	r2, r1
 80020ea:	4611      	mov	r1, r2
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	080042e8 	.word	0x080042e8

08002104 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b40      	cmp	r3, #64	; 0x40
 8002116:	d114      	bne.n	8002142 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 8002118:	4a17      	ldr	r2, [pc, #92]	; (8002178 <LL_DMA_ConfigAddresses+0x74>)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	4413      	add	r3, r2
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4413      	add	r3, r2
 8002126:	461a      	mov	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 800212c:	4a12      	ldr	r2, [pc, #72]	; (8002178 <LL_DMA_ConfigAddresses+0x74>)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	4413      	add	r3, r2
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4413      	add	r3, r2
 800213a:	461a      	mov	r2, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 8002140:	e013      	b.n	800216a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 8002142:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <LL_DMA_ConfigAddresses+0x74>)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	4413      	add	r3, r2
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4413      	add	r3, r2
 8002150:	461a      	mov	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 8002156:	4a08      	ldr	r2, [pc, #32]	; (8002178 <LL_DMA_ConfigAddresses+0x74>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4413      	add	r3, r2
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	461a      	mov	r2, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	60d3      	str	r3, [r2, #12]
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	080042e8 	.word	0x080042e8

0800217c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <LL_RCC_HSI_Enable+0x1c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <LL_RCC_HSI_Enable+0x1c>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800

0800219c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <LL_RCC_HSI_IsReady+0x20>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40023800 	.word	0x40023800

080021c0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80021c8:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4904      	ldr	r1, [pc, #16]	; (80021e8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800

080021ec <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <LL_RCC_SetSysClkSource+0x24>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f023 0203 	bic.w	r2, r3, #3
 80021fc:	4904      	ldr	r1, [pc, #16]	; (8002210 <LL_RCC_SetSysClkSource+0x24>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4313      	orrs	r3, r2
 8002202:	608b      	str	r3, [r1, #8]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	40023800 	.word	0x40023800

08002214 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <LL_RCC_GetSysClkSource+0x18>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 030c 	and.w	r3, r3, #12
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800

08002230 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <LL_RCC_SetAHBPrescaler+0x24>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002240:	4904      	ldr	r1, [pc, #16]	; (8002254 <LL_RCC_SetAHBPrescaler+0x24>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4313      	orrs	r3, r2
 8002246:	608b      	str	r3, [r1, #8]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	40023800 	.word	0x40023800

08002258 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <LL_RCC_SetAPB1Prescaler+0x24>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002268:	4904      	ldr	r1, [pc, #16]	; (800227c <LL_RCC_SetAPB1Prescaler+0x24>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4313      	orrs	r3, r2
 800226e:	608b      	str	r3, [r1, #8]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40023800 	.word	0x40023800

08002280 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002290:	4904      	ldr	r1, [pc, #16]	; (80022a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4313      	orrs	r3, r2
 8002296:	608b      	str	r3, [r1, #8]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	40023800 	.word	0x40023800

080022a8 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80022b0:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <LL_RCC_SetTIMPrescaler+0x28>)
 80022b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80022ba:	4905      	ldr	r1, [pc, #20]	; (80022d0 <LL_RCC_SetTIMPrescaler+0x28>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40023800 	.word	0x40023800

080022d4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <LL_RCC_PLL_Enable+0x1c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <LL_RCC_PLL_Enable+0x1c>)
 80022de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800

080022f4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <LL_RCC_PLL_IsReady+0x24>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002304:	bf0c      	ite	eq
 8002306:	2301      	moveq	r3, #1
 8002308:	2300      	movne	r3, #0
 800230a:	b2db      	uxtb	r3, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800

0800231c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 8002330:	4013      	ands	r3, r2
 8002332:	68f9      	ldr	r1, [r7, #12]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	4311      	orrs	r1, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	0192      	lsls	r2, r2, #6
 800233c:	430a      	orrs	r2, r1
 800233e:	490c      	ldr	r1, [pc, #48]	; (8002370 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800234c:	4908      	ldr	r1, [pc, #32]	; (8002370 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800235c:	4904      	ldr	r1, [pc, #16]	; (8002370 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	40023800 	.word	0x40023800
 8002374:	ffbf8000 	.word	0xffbf8000

08002378 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002384:	4907      	ldr	r1, [pc, #28]	; (80023a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4313      	orrs	r3, r2
 800238a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800238e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4013      	ands	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002396:	68fb      	ldr	r3, [r7, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40023800 	.word	0x40023800

080023a8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023b4:	4907      	ldr	r1, [pc, #28]	; (80023d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4013      	ands	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023c6:	68fb      	ldr	r3, [r7, #12]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	40023800 	.word	0x40023800

080023d8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <LL_FLASH_SetLatency+0x24>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 020f 	bic.w	r2, r3, #15
 80023e8:	4904      	ldr	r1, [pc, #16]	; (80023fc <LL_FLASH_SetLatency+0x24>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	600b      	str	r3, [r1, #0]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40023c00 	.word	0x40023c00

08002400 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <LL_FLASH_GetLatency+0x18>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 030f 	and.w	r3, r3, #15
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40023c00 	.word	0x40023c00

0800241c <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <LL_PWR_EnableOverDriveMode+0x1c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a04      	ldr	r2, [pc, #16]	; (8002438 <LL_PWR_EnableOverDriveMode+0x1c>)
 8002426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242a:	6013      	str	r3, [r2, #0]
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40007000 	.word	0x40007000

0800243c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800244c:	4904      	ldr	r1, [pc, #16]	; (8002460 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	40007000 	.word	0x40007000

08002464 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8002468:	4b07      	ldr	r3, [pc, #28]	; (8002488 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002474:	bf0c      	ite	eq
 8002476:	2301      	moveq	r3, #1
 8002478:	2300      	movne	r3, #0
 800247a:	b2db      	uxtb	r3, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40007000 	.word	0x40007000

0800248c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	601a      	str	r2, [r3, #0]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	60da      	str	r2, [r3, #12]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_USART_EnableIT_IDLE>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	330c      	adds	r3, #12
 80024d8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	e853 3f00 	ldrex	r3, [r3]
 80024e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f043 0310 	orr.w	r3, r3, #16
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	330c      	adds	r3, #12
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	61ba      	str	r2, [r7, #24]
 80024f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f4:	6979      	ldr	r1, [r7, #20]
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	e841 2300 	strex	r3, r2, [r1]
 80024fc:	613b      	str	r3, [r7, #16]
   return(result);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e7      	bne.n	80024d4 <LL_USART_EnableIT_IDLE+0x8>
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <LL_USART_EnableDMAReq_RX>:
{
 8002512:	b480      	push	{r7}
 8002514:	b089      	sub	sp, #36	; 0x24
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3314      	adds	r3, #20
 800251e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	e853 3f00 	ldrex	r3, [r3]
 8002526:	60bb      	str	r3, [r7, #8]
   return(result);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800252e:	61fb      	str	r3, [r7, #28]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3314      	adds	r3, #20
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	61ba      	str	r2, [r7, #24]
 8002538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253a:	6979      	ldr	r1, [r7, #20]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	e841 2300 	strex	r3, r2, [r1]
 8002542:	613b      	str	r3, [r7, #16]
   return(result);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1e7      	bne.n	800251a <LL_USART_EnableDMAReq_RX+0x8>
}
 800254a:	bf00      	nop
 800254c:	bf00      	nop
 800254e:	3724      	adds	r7, #36	; 0x24
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_USART_DMA_GetRegAddr>:
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  return ((uint32_t) &(USARTx->DR));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3304      	adds	r3, #4
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002576:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800257a:	f7ff ff15 	bl	80023a8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800257e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002582:	f7ff fef9 	bl	8002378 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002586:	2003      	movs	r0, #3
 8002588:	f7ff fce8 	bl	8001f5c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800258c:	f7ff fd0a 	bl	8001fa4 <__NVIC_GetPriorityGrouping>
 8002590:	4603      	mov	r3, r0
 8002592:	2200      	movs	r2, #0
 8002594:	210f      	movs	r1, #15
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fd3c 	bl	8002014 <NVIC_EncodePriority>
 800259c:	4603      	mov	r3, r0
 800259e:	4619      	mov	r1, r3
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295
 80025a4:	f7ff fd0c 	bl	8001fc0 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025a8:	f000 f842 	bl	8002630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025ac:	f7fe ff50 	bl	8001450 <MX_GPIO_Init>
  MX_DMA_Init();
 80025b0:	f7fe ff1e 	bl	80013f0 <MX_DMA_Init>
  MX_UART4_Init();
 80025b4:	f000 fd1c 	bl	8002ff0 <MX_UART4_Init>
  MX_USART2_UART_Init();
 80025b8:	f000 fdac 	bl	8003114 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025bc:	f000 fdfa 	bl	80031b4 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80025c0:	f000 fabc 	bl	8002b3c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //uart
  LL_DMA_ConfigAddresses(DMA1,
 80025c4:	4815      	ldr	r0, [pc, #84]	; (800261c <main+0xac>)
 80025c6:	f7ff ffc7 	bl	8002558 <LL_USART_DMA_GetRegAddr>
 80025ca:	4602      	mov	r2, r0
 80025cc:	4914      	ldr	r1, [pc, #80]	; (8002620 <main+0xb0>)
 80025ce:	2300      	movs	r3, #0
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	460b      	mov	r3, r1
 80025d4:	2102      	movs	r1, #2
 80025d6:	4813      	ldr	r0, [pc, #76]	; (8002624 <main+0xb4>)
 80025d8:	f7ff fd94 	bl	8002104 <LL_DMA_ConfigAddresses>
		  LL_DMA_STREAM_2,
		  LL_USART_DMA_GetRegAddr(UART4),
		  ibusRX,
		  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_2, sizeof(ibusRX));
 80025dc:	2220      	movs	r2, #32
 80025de:	2102      	movs	r1, #2
 80025e0:	4810      	ldr	r0, [pc, #64]	; (8002624 <main+0xb4>)
 80025e2:	f7ff fd6b 	bl	80020bc <LL_DMA_SetDataLength>
  LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_2);
 80025e6:	2102      	movs	r1, #2
 80025e8:	480e      	ldr	r0, [pc, #56]	; (8002624 <main+0xb4>)
 80025ea:	f7ff fd47 	bl	800207c <LL_DMA_EnableStream>
  LL_USART_EnableIT_IDLE(UART4);
 80025ee:	480b      	ldr	r0, [pc, #44]	; (800261c <main+0xac>)
 80025f0:	f7ff ff6c 	bl	80024cc <LL_USART_EnableIT_IDLE>
  LL_USART_EnableDMAReq_RX(UART4);
 80025f4:	4809      	ldr	r0, [pc, #36]	; (800261c <main+0xac>)
 80025f6:	f7ff ff8c 	bl	8002512 <LL_USART_EnableDMAReq_RX>

  //timer
  LL_TIM_EnableIT_UPDATE(TIM6);
 80025fa:	480b      	ldr	r0, [pc, #44]	; (8002628 <main+0xb8>)
 80025fc:	f7ff ff56 	bl	80024ac <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 8002600:	4809      	ldr	r0, [pc, #36]	; (8002628 <main+0xb8>)
 8002602:	f7ff ff43 	bl	800248c <LL_TIM_EnableCounter>

  ibus.pan = 2048;
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <main+0xbc>)
 8002608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800260c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ibus.tilt = 1024;
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <main+0xbc>)
 8002612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002616:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800261a:	e7fe      	b.n	800261a <main+0xaa>
 800261c:	40004c00 	.word	0x40004c00
 8002620:	200000d0 	.word	0x200000d0
 8002624:	40026000 	.word	0x40026000
 8002628:	40001000 	.word	0x40001000
 800262c:	20000028 	.word	0x20000028

08002630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8002634:	2005      	movs	r0, #5
 8002636:	f7ff fecf 	bl	80023d8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 800263a:	bf00      	nop
 800263c:	f7ff fee0 	bl	8002400 <LL_FLASH_GetLatency>
 8002640:	4603      	mov	r3, r0
 8002642:	2b05      	cmp	r3, #5
 8002644:	d1fa      	bne.n	800263c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8002646:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800264a:	f7ff fef7 	bl	800243c <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 800264e:	f7ff fee5 	bl	800241c <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 8002652:	2010      	movs	r0, #16
 8002654:	f7ff fdb4 	bl	80021c0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8002658:	f7ff fd90 	bl	800217c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800265c:	bf00      	nop
 800265e:	f7ff fd9d 	bl	800219c <LL_RCC_HSI_IsReady>
 8002662:	4603      	mov	r3, r0
 8002664:	2b01      	cmp	r3, #1
 8002666:	d1fa      	bne.n	800265e <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 180, LL_RCC_PLLP_DIV_2);
 8002668:	2300      	movs	r3, #0
 800266a:	22b4      	movs	r2, #180	; 0xb4
 800266c:	2108      	movs	r1, #8
 800266e:	2000      	movs	r0, #0
 8002670:	f7ff fe54 	bl	800231c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8002674:	f7ff fe2e 	bl	80022d4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8002678:	bf00      	nop
 800267a:	f7ff fe3b 	bl	80022f4 <LL_RCC_PLL_IsReady>
 800267e:	4603      	mov	r3, r0
 8002680:	2b01      	cmp	r3, #1
 8002682:	d1fa      	bne.n	800267a <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8002684:	bf00      	nop
 8002686:	f7ff feed 	bl	8002464 <LL_PWR_IsActiveFlag_VOS>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0fa      	beq.n	8002686 <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002690:	2000      	movs	r0, #0
 8002692:	f7ff fdcd 	bl	8002230 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8002696:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800269a:	f7ff fddd 	bl	8002258 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800269e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80026a2:	f7ff fded 	bl	8002280 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80026a6:	2002      	movs	r0, #2
 80026a8:	f7ff fda0 	bl	80021ec <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80026ac:	bf00      	nop
 80026ae:	f7ff fdb1 	bl	8002214 <LL_RCC_GetSysClkSource>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d1fa      	bne.n	80026ae <SystemClock_Config+0x7e>
  {

  }
  LL_Init1msTick(180000000);
 80026b8:	4805      	ldr	r0, [pc, #20]	; (80026d0 <SystemClock_Config+0xa0>)
 80026ba:	f001 fcb9 	bl	8004030 <LL_Init1msTick>
  LL_SetSystemCoreClock(180000000);
 80026be:	4804      	ldr	r0, [pc, #16]	; (80026d0 <SystemClock_Config+0xa0>)
 80026c0:	f001 fcc4 	bl	800404c <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7ff fdef 	bl	80022a8 <LL_RCC_SetTIMPrescaler>
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	0aba9500 	.word	0x0aba9500

080026d4 <LL_DMA_EnableStream>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80026de:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <LL_DMA_EnableStream+0x3c>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4908      	ldr	r1, [pc, #32]	; (8002710 <LL_DMA_EnableStream+0x3c>)
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	440a      	add	r2, r1
 80026f4:	7812      	ldrb	r2, [r2, #0]
 80026f6:	4611      	mov	r1, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	440a      	add	r2, r1
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6013      	str	r3, [r2, #0]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	080042f0 	.word	0x080042f0

08002714 <LL_DMA_DisableStream>:
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800271e:	4a0c      	ldr	r2, [pc, #48]	; (8002750 <LL_DMA_DisableStream+0x3c>)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4413      	add	r3, r2
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4908      	ldr	r1, [pc, #32]	; (8002750 <LL_DMA_DisableStream+0x3c>)
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	440a      	add	r2, r1
 8002734:	7812      	ldrb	r2, [r2, #0]
 8002736:	4611      	mov	r1, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	440a      	add	r2, r1
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	6013      	str	r3, [r2, #0]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	080042f0 	.word	0x080042f0

08002754 <LL_DMA_ClearFlag_HT2>:
  * @rmtoll LIFCR  CHTIF2    LL_DMA_ClearFlag_HT2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT2(DMA_TypeDef *DMAx)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF2);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002762:	609a      	str	r2, [r3, #8]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <LL_DMA_ClearFlag_TC2>:
  * @rmtoll LIFCR  CTCIF2    LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800277e:	609a      	str	r2, [r3, #8]
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <LL_DMA_ClearFlag_TE2>:
  * @rmtoll LIFCR  CTEIF2    LL_DMA_ClearFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF2);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800279a:	609a      	str	r2, [r3, #8]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <LL_DMA_ClearFlag_DME2>:
  * @rmtoll LIFCR  CDMEIF2    LL_DMA_ClearFlag_DME2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_DME2(DMA_TypeDef *DMAx)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CDMEIF2);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80027b6:	609a      	str	r2, [r3, #8]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_DMA_ClearFlag_FE2>:
  * @rmtoll LIFCR  CFEIF2    LL_DMA_ClearFlag_FE2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_FE2(DMA_TypeDef *DMAx)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CFEIF2);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027d2:	609a      	str	r2, [r3, #8]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_TIM_ClearFlag_UPDATE>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f06f 0201 	mvn.w	r2, #1
 80027ee:	611a      	str	r2, [r3, #16]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_TIM_IsActiveFlag_UPDATE>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <LL_USART_IsActiveFlag_IDLE>:
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b10      	cmp	r3, #16
 8002834:	bf0c      	ite	eq
 8002836:	2301      	moveq	r3, #1
 8002838:	2300      	movne	r3, #0
 800283a:	b2db      	uxtb	r3, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_USART_ClearFlag_IDLE>:
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002856:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002870:	e7fe      	b.n	8002870 <NMI_Handler+0x4>

08002872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002876:	e7fe      	b.n	8002876 <HardFault_Handler+0x4>

08002878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800287c:	e7fe      	b.n	800287c <MemManage_Handler+0x4>

0800287e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002882:	e7fe      	b.n	8002882 <BusFault_Handler+0x4>

08002884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002888:	e7fe      	b.n	8002888 <UsageFault_Handler+0x4>

0800288a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(UART4))
 80028d4:	4814      	ldr	r0, [pc, #80]	; (8002928 <UART4_IRQHandler+0x58>)
 80028d6:	f7ff ffa4 	bl	8002822 <LL_USART_IsActiveFlag_IDLE>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d021      	beq.n	8002924 <UART4_IRQHandler+0x54>
	{
		ibus_connect = iBus_readPacket(&ibus, ibusRX);
 80028e0:	4912      	ldr	r1, [pc, #72]	; (800292c <UART4_IRQHandler+0x5c>)
 80028e2:	4813      	ldr	r0, [pc, #76]	; (8002930 <UART4_IRQHandler+0x60>)
 80028e4:	f7ff fa98 	bl	8001e18 <iBus_readPacket>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <UART4_IRQHandler+0x64>)
 80028ee:	701a      	strb	r2, [r3, #0]

		LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_2);
 80028f0:	2102      	movs	r1, #2
 80028f2:	4811      	ldr	r0, [pc, #68]	; (8002938 <UART4_IRQHandler+0x68>)
 80028f4:	f7ff ff0e 	bl	8002714 <LL_DMA_DisableStream>
        LL_DMA_ClearFlag_DME2(DMA1);
 80028f8:	480f      	ldr	r0, [pc, #60]	; (8002938 <UART4_IRQHandler+0x68>)
 80028fa:	f7ff ff55 	bl	80027a8 <LL_DMA_ClearFlag_DME2>
        LL_DMA_ClearFlag_FE2(DMA1);
 80028fe:	480e      	ldr	r0, [pc, #56]	; (8002938 <UART4_IRQHandler+0x68>)
 8002900:	f7ff ff60 	bl	80027c4 <LL_DMA_ClearFlag_FE2>
        LL_DMA_ClearFlag_HT2(DMA1);
 8002904:	480c      	ldr	r0, [pc, #48]	; (8002938 <UART4_IRQHandler+0x68>)
 8002906:	f7ff ff25 	bl	8002754 <LL_DMA_ClearFlag_HT2>
        LL_DMA_ClearFlag_TC2(DMA1);
 800290a:	480b      	ldr	r0, [pc, #44]	; (8002938 <UART4_IRQHandler+0x68>)
 800290c:	f7ff ff30 	bl	8002770 <LL_DMA_ClearFlag_TC2>
        LL_DMA_ClearFlag_TE2(DMA1);
 8002910:	4809      	ldr	r0, [pc, #36]	; (8002938 <UART4_IRQHandler+0x68>)
 8002912:	f7ff ff3b 	bl	800278c <LL_DMA_ClearFlag_TE2>
		LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_2);
 8002916:	2102      	movs	r1, #2
 8002918:	4807      	ldr	r0, [pc, #28]	; (8002938 <UART4_IRQHandler+0x68>)
 800291a:	f7ff fedb 	bl	80026d4 <LL_DMA_EnableStream>

		LL_USART_ClearFlag_IDLE(UART4);
 800291e:	4802      	ldr	r0, [pc, #8]	; (8002928 <UART4_IRQHandler+0x58>)
 8002920:	f7ff ff92 	bl	8002848 <LL_USART_ClearFlag_IDLE>

  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40004c00 	.word	0x40004c00
 800292c:	200000d0 	.word	0x200000d0
 8002930:	20000028 	.word	0x20000028
 8002934:	200001c8 	.word	0x200001c8
 8002938:	40026000 	.word	0x40026000

0800293c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM6))
 8002940:	4807      	ldr	r0, [pc, #28]	; (8002960 <TIM6_DAC_IRQHandler+0x24>)
 8002942:	f7ff ff5b 	bl	80027fc <LL_TIM_IsActiveFlag_UPDATE>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d006      	beq.n	800295a <TIM6_DAC_IRQHandler+0x1e>
	{
		Protocol2_writePacket(&protocol2, &ibus);
 800294c:	4905      	ldr	r1, [pc, #20]	; (8002964 <TIM6_DAC_IRQHandler+0x28>)
 800294e:	4806      	ldr	r0, [pc, #24]	; (8002968 <TIM6_DAC_IRQHandler+0x2c>)
 8002950:	f7fe fc80 	bl	8001254 <Protocol2_writePacket>

		LL_TIM_ClearFlag_UPDATE(TIM6);
 8002954:	4802      	ldr	r0, [pc, #8]	; (8002960 <TIM6_DAC_IRQHandler+0x24>)
 8002956:	f7ff ff43 	bl	80027e0 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40001000 	.word	0x40001000
 8002964:	20000028 	.word	0x20000028
 8002968:	200000f0 	.word	0x200000f0

0800296c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <SystemInit+0x20>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	4a05      	ldr	r2, [pc, #20]	; (800298c <SystemInit+0x20>)
 8002978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800297c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_GetPriorityGrouping>:
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	0a1b      	lsrs	r3, r3, #8
 800299a:	f003 0307 	and.w	r3, r3, #7
}
 800299e:	4618      	mov	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <__NVIC_EnableIRQ>:
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	db0b      	blt.n	80029d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	f003 021f 	and.w	r2, r3, #31
 80029c4:	4907      	ldr	r1, [pc, #28]	; (80029e4 <__NVIC_EnableIRQ+0x38>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	2001      	movs	r0, #1
 80029ce:	fa00 f202 	lsl.w	r2, r0, r2
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000e100 	.word	0xe000e100

080029e8 <__NVIC_SetPriority>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	db0a      	blt.n	8002a12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	490c      	ldr	r1, [pc, #48]	; (8002a34 <__NVIC_SetPriority+0x4c>)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	0112      	lsls	r2, r2, #4
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a10:	e00a      	b.n	8002a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4908      	ldr	r1, [pc, #32]	; (8002a38 <__NVIC_SetPriority+0x50>)
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	3b04      	subs	r3, #4
 8002a20:	0112      	lsls	r2, r2, #4
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	440b      	add	r3, r1
 8002a26:	761a      	strb	r2, [r3, #24]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000e100 	.word	0xe000e100
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <NVIC_EncodePriority>:
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f1c3 0307 	rsb	r3, r3, #7
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	bf28      	it	cs
 8002a5a:	2304      	movcs	r3, #4
 8002a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3304      	adds	r3, #4
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d902      	bls.n	8002a6c <NVIC_EncodePriority+0x30>
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3b03      	subs	r3, #3
 8002a6a:	e000      	b.n	8002a6e <NVIC_EncodePriority+0x32>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a70:	f04f 32ff 	mov.w	r2, #4294967295
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	401a      	ands	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a84:	f04f 31ff 	mov.w	r1, #4294967295
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43d9      	mvns	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	4313      	orrs	r3, r2
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3724      	adds	r7, #36	; 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <LL_APB1_GRP1_EnableClock>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ab0:	4907      	ldr	r1, [pc, #28]	; (8002ad0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40023800 	.word	0x40023800

08002ad4 <LL_TIM_DisableARRPreload>:
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	601a      	str	r2, [r3, #0]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <LL_TIM_SetTriggerOutput>:
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	605a      	str	r2, [r3, #4]
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <LL_TIM_DisableMasterSlaveMode>:
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	609a      	str	r2, [r3, #8]
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <MX_TIM6_Init>:

/* USER CODE END 0 */

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8002b50:	2010      	movs	r0, #16
 8002b52:	f7ff ffa7 	bl	8002aa4 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002b56:	f7ff ff1b 	bl	8002990 <__NVIC_GetPriorityGrouping>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff6b 	bl	8002a3c <NVIC_EncodePriority>
 8002b66:	4603      	mov	r3, r0
 8002b68:	4619      	mov	r1, r3
 8002b6a:	2036      	movs	r0, #54	; 0x36
 8002b6c:	f7ff ff3c 	bl	80029e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b70:	2036      	movs	r0, #54	; 0x36
 8002b72:	f7ff ff1b 	bl	80029ac <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 180-LL_TIM_IC_FILTER_FDIV1_N2;
 8002b76:	23b4      	movs	r3, #180	; 0xb4
 8002b78:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 10000-LL_TIM_IC_FILTER_FDIV1_N2;
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <MX_TIM6_Init+0x6c>)
 8002b80:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	4619      	mov	r1, r3
 8002b86:	4809      	ldr	r0, [pc, #36]	; (8002bac <MX_TIM6_Init+0x70>)
 8002b88:	f000 feb6 	bl	80038f8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8002b8c:	4807      	ldr	r0, [pc, #28]	; (8002bac <MX_TIM6_Init+0x70>)
 8002b8e:	f7ff ffa1 	bl	8002ad4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8002b92:	2100      	movs	r1, #0
 8002b94:	4805      	ldr	r0, [pc, #20]	; (8002bac <MX_TIM6_Init+0x70>)
 8002b96:	f7ff ffad 	bl	8002af4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8002b9a:	4804      	ldr	r0, [pc, #16]	; (8002bac <MX_TIM6_Init+0x70>)
 8002b9c:	f7ff ffbd 	bl	8002b1a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ba0:	bf00      	nop
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	fff02710 	.word	0xfff02710
 8002bac:	40001000 	.word	0x40001000

08002bb0 <__NVIC_GetPriorityGrouping>:
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	0a1b      	lsrs	r3, r3, #8
 8002bba:	f003 0307 	and.w	r3, r3, #7
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <__NVIC_EnableIRQ>:
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	db0b      	blt.n	8002bf6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	f003 021f 	and.w	r2, r3, #31
 8002be4:	4907      	ldr	r1, [pc, #28]	; (8002c04 <__NVIC_EnableIRQ+0x38>)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	2001      	movs	r0, #1
 8002bee:	fa00 f202 	lsl.w	r2, r0, r2
 8002bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	e000e100 	.word	0xe000e100

08002c08 <__NVIC_SetPriority>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	6039      	str	r1, [r7, #0]
 8002c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	db0a      	blt.n	8002c32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	490c      	ldr	r1, [pc, #48]	; (8002c54 <__NVIC_SetPriority+0x4c>)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	0112      	lsls	r2, r2, #4
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c30:	e00a      	b.n	8002c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	4908      	ldr	r1, [pc, #32]	; (8002c58 <__NVIC_SetPriority+0x50>)
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	3b04      	subs	r3, #4
 8002c40:	0112      	lsls	r2, r2, #4
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	440b      	add	r3, r1
 8002c46:	761a      	strb	r2, [r3, #24]
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	e000e100 	.word	0xe000e100
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <NVIC_EncodePriority>:
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b089      	sub	sp, #36	; 0x24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f1c3 0307 	rsb	r3, r3, #7
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	bf28      	it	cs
 8002c7a:	2304      	movcs	r3, #4
 8002c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3304      	adds	r3, #4
 8002c82:	2b06      	cmp	r3, #6
 8002c84:	d902      	bls.n	8002c8c <NVIC_EncodePriority+0x30>
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	3b03      	subs	r3, #3
 8002c8a:	e000      	b.n	8002c8e <NVIC_EncodePriority+0x32>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c90:	f04f 32ff 	mov.w	r2, #4294967295
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43da      	mvns	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cae:	43d9      	mvns	r1, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb4:	4313      	orrs	r3, r2
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3724      	adds	r7, #36	; 0x24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <LL_DMA_SetDataTransferDirection>:
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8002cd0:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <LL_DMA_SetDataTransferDirection+0x44>)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4413      	add	r3, r2
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ce4:	4908      	ldr	r1, [pc, #32]	; (8002d08 <LL_DMA_SetDataTransferDirection+0x44>)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	440b      	add	r3, r1
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	4619      	mov	r1, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	440b      	add	r3, r1
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]
}
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	08004310 	.word	0x08004310

08002d0c <LL_DMA_SetMode>:
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8002d18:	4a0d      	ldr	r2, [pc, #52]	; (8002d50 <LL_DMA_SetMode+0x44>)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4413      	add	r3, r2
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8002d2c:	4908      	ldr	r1, [pc, #32]	; (8002d50 <LL_DMA_SetMode+0x44>)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	440b      	add	r3, r1
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	4619      	mov	r1, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	440b      	add	r3, r1
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	08004310 	.word	0x08004310

08002d54 <LL_DMA_SetPeriphIncMode>:
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8002d60:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <LL_DMA_SetPeriphIncMode+0x44>)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4413      	add	r3, r2
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002d74:	4908      	ldr	r1, [pc, #32]	; (8002d98 <LL_DMA_SetPeriphIncMode+0x44>)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	440b      	add	r3, r1
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	440b      	add	r3, r1
 8002d82:	4619      	mov	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]
}
 8002d8a:	bf00      	nop
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	08004310 	.word	0x08004310

08002d9c <LL_DMA_SetMemoryIncMode>:
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8002da8:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <LL_DMA_SetMemoryIncMode+0x44>)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	4413      	add	r3, r2
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4413      	add	r3, r2
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002dbc:	4908      	ldr	r1, [pc, #32]	; (8002de0 <LL_DMA_SetMemoryIncMode+0x44>)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	440b      	add	r3, r1
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	440b      	add	r3, r1
 8002dca:	4619      	mov	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	08004310 	.word	0x08004310

08002de4 <LL_DMA_SetPeriphSize>:
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8002df0:	4a0d      	ldr	r2, [pc, #52]	; (8002e28 <LL_DMA_SetPeriphSize+0x44>)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4413      	add	r3, r2
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8002e04:	4908      	ldr	r1, [pc, #32]	; (8002e28 <LL_DMA_SetPeriphSize+0x44>)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	440b      	add	r3, r1
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	440b      	add	r3, r1
 8002e12:	4619      	mov	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	08004310 	.word	0x08004310

08002e2c <LL_DMA_SetMemorySize>:
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8002e38:	4a0d      	ldr	r2, [pc, #52]	; (8002e70 <LL_DMA_SetMemorySize+0x44>)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4413      	add	r3, r2
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8002e4c:	4908      	ldr	r1, [pc, #32]	; (8002e70 <LL_DMA_SetMemorySize+0x44>)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	440b      	add	r3, r1
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	4619      	mov	r1, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	440b      	add	r3, r1
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	08004310 	.word	0x08004310

08002e74 <LL_DMA_SetStreamPriorityLevel>:
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8002e80:	4a0d      	ldr	r2, [pc, #52]	; (8002eb8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4413      	add	r3, r2
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e94:	4908      	ldr	r1, [pc, #32]	; (8002eb8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	440b      	add	r3, r1
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	440b      	add	r3, r1
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
}
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	08004310 	.word	0x08004310

08002ebc <LL_DMA_SetChannelSelection>:
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <LL_DMA_SetChannelSelection+0x44>)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4413      	add	r3, r2
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002edc:	4908      	ldr	r1, [pc, #32]	; (8002f00 <LL_DMA_SetChannelSelection+0x44>)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	440b      	add	r3, r1
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	440b      	add	r3, r1
 8002eea:	4619      	mov	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]
}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	08004310 	.word	0x08004310

08002f04 <LL_DMA_DisableFifoMode>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8002f0e:	4a0c      	ldr	r2, [pc, #48]	; (8002f40 <LL_DMA_DisableFifoMode+0x3c>)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	4908      	ldr	r1, [pc, #32]	; (8002f40 <LL_DMA_DisableFifoMode+0x3c>)
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	440a      	add	r2, r1
 8002f24:	7812      	ldrb	r2, [r2, #0]
 8002f26:	4611      	mov	r1, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	440a      	add	r2, r1
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	6153      	str	r3, [r2, #20]
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	08004310 	.word	0x08004310

08002f44 <LL_AHB1_GRP1_EnableClock>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f50:	4907      	ldr	r1, [pc, #28]	; (8002f70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f62:	68fb      	ldr	r3, [r7, #12]
}
 8002f64:	bf00      	nop
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	40023800 	.word	0x40023800

08002f74 <LL_APB1_GRP1_EnableClock>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002f7c:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f80:	4907      	ldr	r1, [pc, #28]	; (8002fa0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f92:	68fb      	ldr	r3, [r7, #12]
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	40023800 	.word	0x40023800

08002fa4 <LL_USART_Enable>:
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	60da      	str	r2, [r3, #12]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_USART_ConfigAsyncMode>:
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	615a      	str	r2, [r3, #20]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08e      	sub	sp, #56	; 0x38
 8002ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002ff6:	f107 031c 	add.w	r3, r7, #28
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	609a      	str	r2, [r3, #8]
 8003002:	60da      	str	r2, [r3, #12]
 8003004:	611a      	str	r2, [r3, #16]
 8003006:	615a      	str	r2, [r3, #20]
 8003008:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	611a      	str	r2, [r3, #16]
 8003018:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800301a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800301e:	f7ff ffa9 	bl	8002f74 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003022:	2001      	movs	r0, #1
 8003024:	f7ff ff8e 	bl	8002f44 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PA0-WKUP   ------> UART4_TX
  PA1   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8003028:	2303      	movs	r3, #3
 800302a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800302c:	2302      	movs	r3, #2
 800302e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003030:	2303      	movs	r3, #3
 8003032:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800303c:	2308      	movs	r3, #8
 800303e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003040:	1d3b      	adds	r3, r7, #4
 8003042:	4619      	mov	r1, r3
 8003044:	4830      	ldr	r0, [pc, #192]	; (8003108 <MX_UART4_Init+0x118>)
 8003046:	f000 fa35 	bl	80034b4 <LL_GPIO_Init>

  /* UART4 DMA Init */

  /* UART4_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 800304a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800304e:	2102      	movs	r1, #2
 8003050:	482e      	ldr	r0, [pc, #184]	; (800310c <MX_UART4_Init+0x11c>)
 8003052:	f7ff ff33 	bl	8002ebc <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003056:	2200      	movs	r2, #0
 8003058:	2102      	movs	r1, #2
 800305a:	482c      	ldr	r0, [pc, #176]	; (800310c <MX_UART4_Init+0x11c>)
 800305c:	f7ff fe32 	bl	8002cc4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_2, LL_DMA_PRIORITY_LOW);
 8003060:	2200      	movs	r2, #0
 8003062:	2102      	movs	r1, #2
 8003064:	4829      	ldr	r0, [pc, #164]	; (800310c <MX_UART4_Init+0x11c>)
 8003066:	f7ff ff05 	bl	8002e74 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 800306a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800306e:	2102      	movs	r1, #2
 8003070:	4826      	ldr	r0, [pc, #152]	; (800310c <MX_UART4_Init+0x11c>)
 8003072:	f7ff fe4b 	bl	8002d0c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8003076:	2200      	movs	r2, #0
 8003078:	2102      	movs	r1, #2
 800307a:	4824      	ldr	r0, [pc, #144]	; (800310c <MX_UART4_Init+0x11c>)
 800307c:	f7ff fe6a 	bl	8002d54 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 8003080:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003084:	2102      	movs	r1, #2
 8003086:	4821      	ldr	r0, [pc, #132]	; (800310c <MX_UART4_Init+0x11c>)
 8003088:	f7ff fe88 	bl	8002d9c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 800308c:	2200      	movs	r2, #0
 800308e:	2102      	movs	r1, #2
 8003090:	481e      	ldr	r0, [pc, #120]	; (800310c <MX_UART4_Init+0x11c>)
 8003092:	f7ff fea7 	bl	8002de4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 8003096:	2200      	movs	r2, #0
 8003098:	2102      	movs	r1, #2
 800309a:	481c      	ldr	r0, [pc, #112]	; (800310c <MX_UART4_Init+0x11c>)
 800309c:	f7ff fec6 	bl	8002e2c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_2);
 80030a0:	2102      	movs	r1, #2
 80030a2:	481a      	ldr	r0, [pc, #104]	; (800310c <MX_UART4_Init+0x11c>)
 80030a4:	f7ff ff2e 	bl	8002f04 <LL_DMA_DisableFifoMode>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80030a8:	f7ff fd82 	bl	8002bb0 <__NVIC_GetPriorityGrouping>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2200      	movs	r2, #0
 80030b0:	2100      	movs	r1, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fdd2 	bl	8002c5c <NVIC_EncodePriority>
 80030b8:	4603      	mov	r3, r0
 80030ba:	4619      	mov	r1, r3
 80030bc:	2034      	movs	r0, #52	; 0x34
 80030be:	f7ff fda3 	bl	8002c08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 80030c2:	2034      	movs	r0, #52	; 0x34
 80030c4:	f7ff fd82 	bl	8002bcc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80030c8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80030cc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80030ce:	2300      	movs	r3, #0
 80030d0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80030da:	230c      	movs	r3, #12
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80030de:	2300      	movs	r3, #0
 80030e0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80030e2:	2300      	movs	r3, #0
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 80030e6:	f107 031c 	add.w	r3, r7, #28
 80030ea:	4619      	mov	r1, r3
 80030ec:	4808      	ldr	r0, [pc, #32]	; (8003110 <MX_UART4_Init+0x120>)
 80030ee:	f000 ff05 	bl	8003efc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 80030f2:	4807      	ldr	r0, [pc, #28]	; (8003110 <MX_UART4_Init+0x120>)
 80030f4:	f7ff ff66 	bl	8002fc4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 80030f8:	4805      	ldr	r0, [pc, #20]	; (8003110 <MX_UART4_Init+0x120>)
 80030fa:	f7ff ff53 	bl	8002fa4 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80030fe:	bf00      	nop
 8003100:	3738      	adds	r7, #56	; 0x38
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40020000 	.word	0x40020000
 800310c:	40026000 	.word	0x40026000
 8003110:	40004c00 	.word	0x40004c00

08003114 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08e      	sub	sp, #56	; 0x38
 8003118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800311a:	f107 031c 	add.w	r3, r7, #28
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	605a      	str	r2, [r3, #4]
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	60da      	str	r2, [r3, #12]
 8003128:	611a      	str	r2, [r3, #16]
 800312a:	615a      	str	r2, [r3, #20]
 800312c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312e:	1d3b      	adds	r3, r7, #4
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]
 800313c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800313e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003142:	f7ff ff17 	bl	8002f74 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003146:	2001      	movs	r0, #1
 8003148:	f7ff fefc 	bl	8002f44 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800314c:	230c      	movs	r3, #12
 800314e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003150:	2302      	movs	r3, #2
 8003152:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003154:	2303      	movs	r3, #3
 8003156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003160:	2307      	movs	r3, #7
 8003162:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003164:	1d3b      	adds	r3, r7, #4
 8003166:	4619      	mov	r1, r3
 8003168:	4810      	ldr	r0, [pc, #64]	; (80031ac <MX_USART2_UART_Init+0x98>)
 800316a:	f000 f9a3 	bl	80034b4 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800316e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003172:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003174:	2300      	movs	r3, #0
 8003176:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003178:	2300      	movs	r3, #0
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800317c:	2300      	movs	r3, #0
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003180:	230c      	movs	r3, #12
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003184:	2300      	movs	r3, #0
 8003186:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003188:	2300      	movs	r3, #0
 800318a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800318c:	f107 031c 	add.w	r3, r7, #28
 8003190:	4619      	mov	r1, r3
 8003192:	4807      	ldr	r0, [pc, #28]	; (80031b0 <MX_USART2_UART_Init+0x9c>)
 8003194:	f000 feb2 	bl	8003efc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8003198:	4805      	ldr	r0, [pc, #20]	; (80031b0 <MX_USART2_UART_Init+0x9c>)
 800319a:	f7ff ff13 	bl	8002fc4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800319e:	4804      	ldr	r0, [pc, #16]	; (80031b0 <MX_USART2_UART_Init+0x9c>)
 80031a0:	f7ff ff00 	bl	8002fa4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031a4:	bf00      	nop
 80031a6:	3738      	adds	r7, #56	; 0x38
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40020000 	.word	0x40020000
 80031b0:	40004400 	.word	0x40004400

080031b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08e      	sub	sp, #56	; 0x38
 80031b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80031ba:	f107 031c 	add.w	r3, r7, #28
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	609a      	str	r2, [r3, #8]
 80031c6:	60da      	str	r2, [r3, #12]
 80031c8:	611a      	str	r2, [r3, #16]
 80031ca:	615a      	str	r2, [r3, #20]
 80031cc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	611a      	str	r2, [r3, #16]
 80031dc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80031de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80031e2:	f7ff fec7 	bl	8002f74 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80031e6:	2004      	movs	r0, #4
 80031e8:	f7ff feac 	bl	8002f44 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC10   ------> USART3_TX
  PC11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80031ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80031f2:	2302      	movs	r3, #2
 80031f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80031f6:	2303      	movs	r3, #3
 80031f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003202:	2307      	movs	r3, #7
 8003204:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003206:	1d3b      	adds	r3, r7, #4
 8003208:	4619      	mov	r1, r3
 800320a:	4811      	ldr	r0, [pc, #68]	; (8003250 <MX_USART3_UART_Init+0x9c>)
 800320c:	f000 f952 	bl	80034b4 <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003210:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003214:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003216:	2300      	movs	r3, #0
 8003218:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800321e:	2300      	movs	r3, #0
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003222:	230c      	movs	r3, #12
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003226:	2300      	movs	r3, #0
 8003228:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800322a:	2300      	movs	r3, #0
 800322c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800322e:	f107 031c 	add.w	r3, r7, #28
 8003232:	4619      	mov	r1, r3
 8003234:	4807      	ldr	r0, [pc, #28]	; (8003254 <MX_USART3_UART_Init+0xa0>)
 8003236:	f000 fe61 	bl	8003efc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800323a:	4806      	ldr	r0, [pc, #24]	; (8003254 <MX_USART3_UART_Init+0xa0>)
 800323c:	f7ff fec2 	bl	8002fc4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8003240:	4804      	ldr	r0, [pc, #16]	; (8003254 <MX_USART3_UART_Init+0xa0>)
 8003242:	f7ff feaf 	bl	8002fa4 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003246:	bf00      	nop
 8003248:	3738      	adds	r7, #56	; 0x38
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40020800 	.word	0x40020800
 8003254:	40004800 	.word	0x40004800

08003258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003290 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800325c:	480d      	ldr	r0, [pc, #52]	; (8003294 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800325e:	490e      	ldr	r1, [pc, #56]	; (8003298 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003260:	4a0e      	ldr	r2, [pc, #56]	; (800329c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003264:	e002      	b.n	800326c <LoopCopyDataInit>

08003266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800326a:	3304      	adds	r3, #4

0800326c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800326c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800326e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003270:	d3f9      	bcc.n	8003266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003272:	4a0b      	ldr	r2, [pc, #44]	; (80032a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003274:	4c0b      	ldr	r4, [pc, #44]	; (80032a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003278:	e001      	b.n	800327e <LoopFillZerobss>

0800327a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800327a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800327c:	3204      	adds	r2, #4

0800327e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800327e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003280:	d3fb      	bcc.n	800327a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003282:	f7ff fb73 	bl	800296c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003286:	f000 fef1 	bl	800406c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800328a:	f7ff f971 	bl	8002570 <main>
  bx  lr    
 800328e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003290:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003298:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800329c:	08004328 	.word	0x08004328
  ldr r2, =_sbss
 80032a0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80032a4:	200001cc 	.word	0x200001cc

080032a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032a8:	e7fe      	b.n	80032a8 <ADC_IRQHandler>

080032aa <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b089      	sub	sp, #36	; 0x24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	fa93 f3a3 	rbit	r3, r3
 80032c4:	613b      	str	r3, [r7, #16]
  return result;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	2103      	movs	r1, #3
 80032d2:	fa01 f303 	lsl.w	r3, r1, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	401a      	ands	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa93 f3a3 	rbit	r3, r3
 80032e4:	61bb      	str	r3, [r7, #24]
  return result;
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	431a      	orrs	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	601a      	str	r2, [r3, #0]
}
 80032fc:	bf00      	nop
 80032fe:	3724      	adds	r7, #36	; 0x24
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	43db      	mvns	r3, r3
 800331c:	401a      	ands	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	fb01 f303 	mul.w	r3, r1, r3
 8003326:	431a      	orrs	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	605a      	str	r2, [r3, #4]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8003338:	b480      	push	{r7}
 800333a:	b089      	sub	sp, #36	; 0x24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	613b      	str	r3, [r7, #16]
  return result;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	2103      	movs	r1, #3
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	401a      	ands	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	61bb      	str	r3, [r7, #24]
  return result;
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	431a      	orrs	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800338a:	bf00      	nop
 800338c:	3724      	adds	r7, #36	; 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003396:	b480      	push	{r7}
 8003398:	b089      	sub	sp, #36	; 0x24
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	613b      	str	r3, [r7, #16]
  return result;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	fab3 f383 	clz	r3, r3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	2103      	movs	r1, #3
 80033be:	fa01 f303 	lsl.w	r3, r1, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	401a      	ands	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	fa93 f3a3 	rbit	r3, r3
 80033d0:	61bb      	str	r3, [r7, #24]
  return result;
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	fab3 f383 	clz	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	fa01 f303 	lsl.w	r3, r1, r3
 80033e2:	431a      	orrs	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	60da      	str	r2, [r3, #12]
}
 80033e8:	bf00      	nop
 80033ea:	3724      	adds	r7, #36	; 0x24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	; 0x24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a1a      	ldr	r2, [r3, #32]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	fa93 f3a3 	rbit	r3, r3
 800340e:	613b      	str	r3, [r7, #16]
  return result;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	fab3 f383 	clz	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	210f      	movs	r1, #15
 800341c:	fa01 f303 	lsl.w	r3, r1, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	401a      	ands	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	61bb      	str	r3, [r7, #24]
  return result;
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	fab3 f383 	clz	r3, r3
 8003436:	b2db      	uxtb	r3, r3
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	fa01 f303 	lsl.w	r3, r1, r3
 8003440:	431a      	orrs	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003446:	bf00      	nop
 8003448:	3724      	adds	r7, #36	; 0x24
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003452:	b480      	push	{r7}
 8003454:	b089      	sub	sp, #36	; 0x24
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	0a1b      	lsrs	r3, r3, #8
 8003466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	613b      	str	r3, [r7, #16]
  return result;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	210f      	movs	r1, #15
 800347c:	fa01 f303 	lsl.w	r3, r1, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	401a      	ands	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa93 f3a3 	rbit	r3, r3
 8003490:	61bb      	str	r3, [r7, #24]
  return result;
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	fab3 f383 	clz	r3, r3
 8003498:	b2db      	uxtb	r3, r3
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	431a      	orrs	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80034a8:	bf00      	nop
 80034aa:	3724      	adds	r7, #36	; 0x24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	fa93 f3a3 	rbit	r3, r3
 80034d2:	613b      	str	r3, [r7, #16]
  return result;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80034de:	e050      	b.n	8003582 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	2101      	movs	r1, #1
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d042      	beq.n	800357c <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d003      	beq.n	8003506 <LL_GPIO_Init+0x52>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d10d      	bne.n	8003522 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	461a      	mov	r2, r3
 800350c:	69b9      	ldr	r1, [r7, #24]
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ff12 	bl	8003338 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	461a      	mov	r2, r3
 800351a:	69b9      	ldr	r1, [r7, #24]
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff fef3 	bl	8003308 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	461a      	mov	r2, r3
 8003528:	69b9      	ldr	r1, [r7, #24]
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ff33 	bl	8003396 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d11a      	bne.n	800356e <LL_GPIO_Init+0xba>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	fa93 f3a3 	rbit	r3, r3
 8003542:	60bb      	str	r3, [r7, #8]
  return result;
 8003544:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003546:	fab3 f383 	clz	r3, r3
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b07      	cmp	r3, #7
 800354e:	d807      	bhi.n	8003560 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	461a      	mov	r2, r3
 8003556:	69b9      	ldr	r1, [r7, #24]
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ff4b 	bl	80033f4 <LL_GPIO_SetAFPin_0_7>
 800355e:	e006      	b.n	800356e <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	461a      	mov	r2, r3
 8003566:	69b9      	ldr	r1, [r7, #24]
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff72 	bl	8003452 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	461a      	mov	r2, r3
 8003574:	69b9      	ldr	r1, [r7, #24]
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff fe97 	bl	80032aa <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	3301      	adds	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1a7      	bne.n	80034e0 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3720      	adds	r7, #32
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <LL_RCC_GetSysClkSource>:
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <LL_RCC_GetSysClkSource+0x18>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 030c 	and.w	r3, r3, #12
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800

080035b8 <LL_RCC_GetAHBPrescaler>:
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <LL_RCC_GetAHBPrescaler+0x18>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800

080035d4 <LL_RCC_GetAPB1Prescaler>:
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80035d8:	4b04      	ldr	r3, [pc, #16]	; (80035ec <LL_RCC_GetAPB1Prescaler+0x18>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800

080035f0 <LL_RCC_GetAPB2Prescaler>:
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <LL_RCC_GetAPB2Prescaler+0x18>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800

0800360c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003610:	4b04      	ldr	r3, [pc, #16]	; (8003624 <LL_RCC_PLL_GetMainSource+0x18>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800

08003628 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800362c:	4b04      	ldr	r3, [pc, #16]	; (8003640 <LL_RCC_PLL_GetN+0x18>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	099b      	lsrs	r3, r3, #6
 8003632:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003636:	4618      	mov	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	40023800 	.word	0x40023800

08003644 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003648:	4b04      	ldr	r3, [pc, #16]	; (800365c <LL_RCC_PLL_GetP+0x18>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003650:	4618      	mov	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800

08003660 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003664:	4b04      	ldr	r3, [pc, #16]	; (8003678 <LL_RCC_PLL_GetR+0x18>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 800366c:	4618      	mov	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800

0800367c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003680:	4b04      	ldr	r3, [pc, #16]	; (8003694 <LL_RCC_PLL_GetDivider+0x18>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800

08003698 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80036a0:	f000 f820 	bl	80036e4 <RCC_GetSystemClockFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f85a 	bl	8003768 <RCC_GetHCLKClockFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f868 	bl	8003794 <RCC_GetPCLK1ClockFreq>
 80036c4:	4602      	mov	r2, r0
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f874 	bl	80037bc <RCC_GetPCLK2ClockFreq>
 80036d4:	4602      	mov	r2, r0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	60da      	str	r2, [r3, #12]
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80036ee:	f7ff ff55 	bl	800359c <LL_RCC_GetSysClkSource>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b0c      	cmp	r3, #12
 80036f6:	d82d      	bhi.n	8003754 <RCC_GetSystemClockFreq+0x70>
 80036f8:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <RCC_GetSystemClockFreq+0x1c>)
 80036fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fe:	bf00      	nop
 8003700:	08003735 	.word	0x08003735
 8003704:	08003755 	.word	0x08003755
 8003708:	08003755 	.word	0x08003755
 800370c:	08003755 	.word	0x08003755
 8003710:	0800373b 	.word	0x0800373b
 8003714:	08003755 	.word	0x08003755
 8003718:	08003755 	.word	0x08003755
 800371c:	08003755 	.word	0x08003755
 8003720:	08003741 	.word	0x08003741
 8003724:	08003755 	.word	0x08003755
 8003728:	08003755 	.word	0x08003755
 800372c:	08003755 	.word	0x08003755
 8003730:	0800374b 	.word	0x0800374b
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <RCC_GetSystemClockFreq+0x80>)
 8003736:	607b      	str	r3, [r7, #4]
      break;
 8003738:	e00f      	b.n	800375a <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <RCC_GetSystemClockFreq+0x80>)
 800373c:	607b      	str	r3, [r7, #4]
      break;
 800373e:	e00c      	b.n	800375a <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003740:	2008      	movs	r0, #8
 8003742:	f000 f84f 	bl	80037e4 <RCC_PLL_GetFreqDomain_SYS>
 8003746:	6078      	str	r0, [r7, #4]
      break;
 8003748:	e007      	b.n	800375a <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 800374a:	200c      	movs	r0, #12
 800374c:	f000 f84a 	bl	80037e4 <RCC_PLL_GetFreqDomain_SYS>
 8003750:	6078      	str	r0, [r7, #4]
      break;
 8003752:	e002      	b.n	800375a <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003754:	4b03      	ldr	r3, [pc, #12]	; (8003764 <RCC_GetSystemClockFreq+0x80>)
 8003756:	607b      	str	r3, [r7, #4]
      break;
 8003758:	bf00      	nop
  }

  return frequency;
 800375a:	687b      	ldr	r3, [r7, #4]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	00f42400 	.word	0x00f42400

08003768 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003770:	f7ff ff22 	bl	80035b8 <LL_RCC_GetAHBPrescaler>
 8003774:	4603      	mov	r3, r0
 8003776:	091b      	lsrs	r3, r3, #4
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	4a04      	ldr	r2, [pc, #16]	; (8003790 <RCC_GetHCLKClockFreq+0x28>)
 800377e:	5cd3      	ldrb	r3, [r2, r3]
 8003780:	461a      	mov	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	40d3      	lsrs	r3, r2
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	080042f8 	.word	0x080042f8

08003794 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800379c:	f7ff ff1a 	bl	80035d4 <LL_RCC_GetAPB1Prescaler>
 80037a0:	4603      	mov	r3, r0
 80037a2:	0a9b      	lsrs	r3, r3, #10
 80037a4:	4a04      	ldr	r2, [pc, #16]	; (80037b8 <RCC_GetPCLK1ClockFreq+0x24>)
 80037a6:	5cd3      	ldrb	r3, [r2, r3]
 80037a8:	461a      	mov	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	40d3      	lsrs	r3, r2
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	08004308 	.word	0x08004308

080037bc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80037c4:	f7ff ff14 	bl	80035f0 <LL_RCC_GetAPB2Prescaler>
 80037c8:	4603      	mov	r3, r0
 80037ca:	0b5b      	lsrs	r3, r3, #13
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <RCC_GetPCLK2ClockFreq+0x24>)
 80037ce:	5cd3      	ldrb	r3, [r2, r3]
 80037d0:	461a      	mov	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	40d3      	lsrs	r3, r2
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	08004308 	.word	0x08004308

080037e4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	2300      	movs	r3, #0
 80037f6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80037f8:	f7ff ff08 	bl	800360c <LL_RCC_PLL_GetMainSource>
 80037fc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d004      	beq.n	800380e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800380a:	d003      	beq.n	8003814 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800380c:	e005      	b.n	800381a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800380e:	4b1c      	ldr	r3, [pc, #112]	; (8003880 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8003810:	617b      	str	r3, [r7, #20]
      break;
 8003812:	e005      	b.n	8003820 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003814:	4b1a      	ldr	r3, [pc, #104]	; (8003880 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8003816:	617b      	str	r3, [r7, #20]
      break;
 8003818:	e002      	b.n	8003820 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800381a:	4b19      	ldr	r3, [pc, #100]	; (8003880 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 800381c:	617b      	str	r3, [r7, #20]
      break;
 800381e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b08      	cmp	r3, #8
 8003824:	d114      	bne.n	8003850 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003826:	f7ff ff29 	bl	800367c <LL_RCC_PLL_GetDivider>
 800382a:	4602      	mov	r2, r0
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	fbb3 f4f2 	udiv	r4, r3, r2
 8003832:	f7ff fef9 	bl	8003628 <LL_RCC_PLL_GetN>
 8003836:	4603      	mov	r3, r0
 8003838:	fb03 f404 	mul.w	r4, r3, r4
 800383c:	f7ff ff02 	bl	8003644 <LL_RCC_PLL_GetP>
 8003840:	4603      	mov	r3, r0
 8003842:	0c1b      	lsrs	r3, r3, #16
 8003844:	3301      	adds	r3, #1
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	fbb4 f3f3 	udiv	r3, r4, r3
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	e011      	b.n	8003874 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003850:	f7ff ff14 	bl	800367c <LL_RCC_PLL_GetDivider>
 8003854:	4602      	mov	r2, r0
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	fbb3 f4f2 	udiv	r4, r3, r2
 800385c:	f7ff fee4 	bl	8003628 <LL_RCC_PLL_GetN>
 8003860:	4603      	mov	r3, r0
 8003862:	fb03 f404 	mul.w	r4, r3, r4
 8003866:	f7ff fefb 	bl	8003660 <LL_RCC_PLL_GetR>
 800386a:	4603      	mov	r3, r0
 800386c:	0f1b      	lsrs	r3, r3, #28
 800386e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003872:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003874:	693b      	ldr	r3, [r7, #16]
}
 8003876:	4618      	mov	r0, r3
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	bd90      	pop	{r4, r7, pc}
 800387e:	bf00      	nop
 8003880:	00f42400 	.word	0x00f42400

08003884 <LL_TIM_SetPrescaler>:
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_TIM_SetAutoReload>:
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <LL_TIM_SetRepetitionCounter>:
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	f043 0201 	orr.w	r2, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	615a      	str	r2, [r3, #20]
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3d      	ldr	r2, [pc, #244]	; (8003a00 <LL_TIM_Init+0x108>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d013      	beq.n	8003938 <LL_TIM_Init+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003916:	d00f      	beq.n	8003938 <LL_TIM_Init+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3a      	ldr	r2, [pc, #232]	; (8003a04 <LL_TIM_Init+0x10c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00b      	beq.n	8003938 <LL_TIM_Init+0x40>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a39      	ldr	r2, [pc, #228]	; (8003a08 <LL_TIM_Init+0x110>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d007      	beq.n	8003938 <LL_TIM_Init+0x40>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a38      	ldr	r2, [pc, #224]	; (8003a0c <LL_TIM_Init+0x114>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d003      	beq.n	8003938 <LL_TIM_Init+0x40>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a37      	ldr	r2, [pc, #220]	; (8003a10 <LL_TIM_Init+0x118>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d106      	bne.n	8003946 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a2d      	ldr	r2, [pc, #180]	; (8003a00 <LL_TIM_Init+0x108>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d02b      	beq.n	80039a6 <LL_TIM_Init+0xae>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003954:	d027      	beq.n	80039a6 <LL_TIM_Init+0xae>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <LL_TIM_Init+0x10c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d023      	beq.n	80039a6 <LL_TIM_Init+0xae>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a29      	ldr	r2, [pc, #164]	; (8003a08 <LL_TIM_Init+0x110>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01f      	beq.n	80039a6 <LL_TIM_Init+0xae>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a28      	ldr	r2, [pc, #160]	; (8003a0c <LL_TIM_Init+0x114>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d01b      	beq.n	80039a6 <LL_TIM_Init+0xae>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <LL_TIM_Init+0x118>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d017      	beq.n	80039a6 <LL_TIM_Init+0xae>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a26      	ldr	r2, [pc, #152]	; (8003a14 <LL_TIM_Init+0x11c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <LL_TIM_Init+0xae>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a25      	ldr	r2, [pc, #148]	; (8003a18 <LL_TIM_Init+0x120>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00f      	beq.n	80039a6 <LL_TIM_Init+0xae>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a24      	ldr	r2, [pc, #144]	; (8003a1c <LL_TIM_Init+0x124>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00b      	beq.n	80039a6 <LL_TIM_Init+0xae>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a23      	ldr	r2, [pc, #140]	; (8003a20 <LL_TIM_Init+0x128>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d007      	beq.n	80039a6 <LL_TIM_Init+0xae>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a22      	ldr	r2, [pc, #136]	; (8003a24 <LL_TIM_Init+0x12c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d003      	beq.n	80039a6 <LL_TIM_Init+0xae>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a21      	ldr	r2, [pc, #132]	; (8003a28 <LL_TIM_Init+0x130>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d106      	bne.n	80039b4 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	4619      	mov	r1, r3
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff ff6d 	bl	80038a0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	4619      	mov	r1, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff ff59 	bl	8003884 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a0a      	ldr	r2, [pc, #40]	; (8003a00 <LL_TIM_Init+0x108>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d003      	beq.n	80039e2 <LL_TIM_Init+0xea>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a0c      	ldr	r2, [pc, #48]	; (8003a10 <LL_TIM_Init+0x118>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d105      	bne.n	80039ee <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	4619      	mov	r1, r3
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ff67 	bl	80038bc <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff ff72 	bl	80038d8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40010000 	.word	0x40010000
 8003a04:	40000400 	.word	0x40000400
 8003a08:	40000800 	.word	0x40000800
 8003a0c:	40000c00 	.word	0x40000c00
 8003a10:	40010400 	.word	0x40010400
 8003a14:	40014000 	.word	0x40014000
 8003a18:	40014400 	.word	0x40014400
 8003a1c:	40014800 	.word	0x40014800
 8003a20:	40001800 	.word	0x40001800
 8003a24:	40001c00 	.word	0x40001c00
 8003a28:	40002000 	.word	0x40002000

08003a2c <LL_USART_IsEnabled>:
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a40:	bf0c      	ite	eq
 8003a42:	2301      	moveq	r3, #1
 8003a44:	2300      	movne	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <LL_USART_SetStopBitsLength>:
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	611a      	str	r2, [r3, #16]
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <LL_USART_SetHWFlowCtrl>:
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	615a      	str	r2, [r3, #20]
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <LL_USART_SetBaudRate>:
{
 8003aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa4:	b0c0      	sub	sp, #256	; 0x100
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003aac:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8003ab0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003ab4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac0:	f040 810c 	bne.w	8003cdc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003ac4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ace:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ad2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ad6:	4622      	mov	r2, r4
 8003ad8:	462b      	mov	r3, r5
 8003ada:	1891      	adds	r1, r2, r2
 8003adc:	6639      	str	r1, [r7, #96]	; 0x60
 8003ade:	415b      	adcs	r3, r3
 8003ae0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ae2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	eb12 0801 	adds.w	r8, r2, r1
 8003aec:	4629      	mov	r1, r5
 8003aee:	eb43 0901 	adc.w	r9, r3, r1
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b06:	4690      	mov	r8, r2
 8003b08:	4699      	mov	r9, r3
 8003b0a:	4623      	mov	r3, r4
 8003b0c:	eb18 0303 	adds.w	r3, r8, r3
 8003b10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b14:	462b      	mov	r3, r5
 8003b16:	eb49 0303 	adc.w	r3, r9, r3
 8003b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b22:	2200      	movs	r2, #0
 8003b24:	469a      	mov	sl, r3
 8003b26:	4693      	mov	fp, r2
 8003b28:	eb1a 030a 	adds.w	r3, sl, sl
 8003b2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b2e:	eb4b 030b 	adc.w	r3, fp, fp
 8003b32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b3c:	f7fc ffe2 	bl	8000b04 <__aeabi_uldivmod>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4b64      	ldr	r3, [pc, #400]	; (8003cd8 <LL_USART_SetBaudRate+0x238>)
 8003b46:	fba3 2302 	umull	r2, r3, r3, r2
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	b29c      	uxth	r4, r3
 8003b52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b5c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b60:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8003b64:	4642      	mov	r2, r8
 8003b66:	464b      	mov	r3, r9
 8003b68:	1891      	adds	r1, r2, r2
 8003b6a:	6539      	str	r1, [r7, #80]	; 0x50
 8003b6c:	415b      	adcs	r3, r3
 8003b6e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b74:	4641      	mov	r1, r8
 8003b76:	1851      	adds	r1, r2, r1
 8003b78:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	414b      	adcs	r3, r1
 8003b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8003b8c:	4659      	mov	r1, fp
 8003b8e:	00cb      	lsls	r3, r1, #3
 8003b90:	4651      	mov	r1, sl
 8003b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b96:	4651      	mov	r1, sl
 8003b98:	00ca      	lsls	r2, r1, #3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	189b      	adds	r3, r3, r2
 8003ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ba8:	464b      	mov	r3, r9
 8003baa:	460a      	mov	r2, r1
 8003bac:	eb42 0303 	adc.w	r3, r2, r3
 8003bb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003bb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bbe:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8003bc2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	18db      	adds	r3, r3, r3
 8003bca:	643b      	str	r3, [r7, #64]	; 0x40
 8003bcc:	4613      	mov	r3, r2
 8003bce:	eb42 0303 	adc.w	r3, r2, r3
 8003bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bd8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003bdc:	f7fc ff92 	bl	8000b04 <__aeabi_uldivmod>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4611      	mov	r1, r2
 8003be6:	4b3c      	ldr	r3, [pc, #240]	; (8003cd8 <LL_USART_SetBaudRate+0x238>)
 8003be8:	fba3 2301 	umull	r2, r3, r3, r1
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	2264      	movs	r2, #100	; 0x64
 8003bf0:	fb02 f303 	mul.w	r3, r2, r3
 8003bf4:	1acb      	subs	r3, r1, r3
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bfc:	4b36      	ldr	r3, [pc, #216]	; (8003cd8 <LL_USART_SetBaudRate+0x238>)
 8003bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	4423      	add	r3, r4
 8003c12:	b29c      	uxth	r4, r3
 8003c14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c1e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c22:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8003c26:	4642      	mov	r2, r8
 8003c28:	464b      	mov	r3, r9
 8003c2a:	1891      	adds	r1, r2, r2
 8003c2c:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c2e:	415b      	adcs	r3, r3
 8003c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c32:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c36:	4641      	mov	r1, r8
 8003c38:	1851      	adds	r1, r2, r1
 8003c3a:	6339      	str	r1, [r7, #48]	; 0x30
 8003c3c:	4649      	mov	r1, r9
 8003c3e:	414b      	adcs	r3, r1
 8003c40:	637b      	str	r3, [r7, #52]	; 0x34
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c4e:	4659      	mov	r1, fp
 8003c50:	00cb      	lsls	r3, r1, #3
 8003c52:	4651      	mov	r1, sl
 8003c54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c58:	4651      	mov	r1, sl
 8003c5a:	00ca      	lsls	r2, r1, #3
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4603      	mov	r3, r0
 8003c62:	4642      	mov	r2, r8
 8003c64:	189b      	adds	r3, r3, r2
 8003c66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c6a:	464b      	mov	r3, r9
 8003c6c:	460a      	mov	r2, r1
 8003c6e:	eb42 0303 	adc.w	r3, r2, r3
 8003c72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003c76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c80:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003c84:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	18db      	adds	r3, r3, r3
 8003c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c8e:	4613      	mov	r3, r2
 8003c90:	eb42 0303 	adc.w	r3, r2, r3
 8003c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c9a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003c9e:	f7fc ff31 	bl	8000b04 <__aeabi_uldivmod>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <LL_USART_SetBaudRate+0x238>)
 8003ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	2164      	movs	r1, #100	; 0x64
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	3332      	adds	r3, #50	; 0x32
 8003cba:	4a07      	ldr	r2, [pc, #28]	; (8003cd8 <LL_USART_SetBaudRate+0x238>)
 8003cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	4423      	add	r3, r4
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd4:	609a      	str	r2, [r3, #8]
}
 8003cd6:	e108      	b.n	8003eea <LL_USART_SetBaudRate+0x44a>
 8003cd8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003cdc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ce6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003cea:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003cee:	4642      	mov	r2, r8
 8003cf0:	464b      	mov	r3, r9
 8003cf2:	1891      	adds	r1, r2, r2
 8003cf4:	6239      	str	r1, [r7, #32]
 8003cf6:	415b      	adcs	r3, r3
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cfe:	4641      	mov	r1, r8
 8003d00:	1854      	adds	r4, r2, r1
 8003d02:	4649      	mov	r1, r9
 8003d04:	eb43 0501 	adc.w	r5, r3, r1
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	00eb      	lsls	r3, r5, #3
 8003d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d16:	00e2      	lsls	r2, r4, #3
 8003d18:	4614      	mov	r4, r2
 8003d1a:	461d      	mov	r5, r3
 8003d1c:	4643      	mov	r3, r8
 8003d1e:	18e3      	adds	r3, r4, r3
 8003d20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d24:	464b      	mov	r3, r9
 8003d26:	eb45 0303 	adc.w	r3, r5, r3
 8003d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003d2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003d32:	2200      	movs	r2, #0
 8003d34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d38:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003d48:	4629      	mov	r1, r5
 8003d4a:	008b      	lsls	r3, r1, #2
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d52:	4621      	mov	r1, r4
 8003d54:	008a      	lsls	r2, r1, #2
 8003d56:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003d5a:	f7fc fed3 	bl	8000b04 <__aeabi_uldivmod>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4b65      	ldr	r3, [pc, #404]	; (8003ef8 <LL_USART_SetBaudRate+0x458>)
 8003d64:	fba3 2302 	umull	r2, r3, r3, r2
 8003d68:	095b      	lsrs	r3, r3, #5
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	b29c      	uxth	r4, r3
 8003d70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d74:	2200      	movs	r2, #0
 8003d76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d7e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003d82:	4642      	mov	r2, r8
 8003d84:	464b      	mov	r3, r9
 8003d86:	1891      	adds	r1, r2, r2
 8003d88:	61b9      	str	r1, [r7, #24]
 8003d8a:	415b      	adcs	r3, r3
 8003d8c:	61fb      	str	r3, [r7, #28]
 8003d8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d92:	4641      	mov	r1, r8
 8003d94:	1851      	adds	r1, r2, r1
 8003d96:	6139      	str	r1, [r7, #16]
 8003d98:	4649      	mov	r1, r9
 8003d9a:	414b      	adcs	r3, r1
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003daa:	4659      	mov	r1, fp
 8003dac:	00cb      	lsls	r3, r1, #3
 8003dae:	4651      	mov	r1, sl
 8003db0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003db4:	4651      	mov	r1, sl
 8003db6:	00ca      	lsls	r2, r1, #3
 8003db8:	4610      	mov	r0, r2
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	4642      	mov	r2, r8
 8003dc0:	189b      	adds	r3, r3, r2
 8003dc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003dc6:	464b      	mov	r3, r9
 8003dc8:	460a      	mov	r2, r1
 8003dca:	eb42 0303 	adc.w	r3, r2, r3
 8003dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003dd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ddc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003dec:	4649      	mov	r1, r9
 8003dee:	008b      	lsls	r3, r1, #2
 8003df0:	4641      	mov	r1, r8
 8003df2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003df6:	4641      	mov	r1, r8
 8003df8:	008a      	lsls	r2, r1, #2
 8003dfa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003dfe:	f7fc fe81 	bl	8000b04 <__aeabi_uldivmod>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4611      	mov	r1, r2
 8003e08:	4b3b      	ldr	r3, [pc, #236]	; (8003ef8 <LL_USART_SetBaudRate+0x458>)
 8003e0a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	2264      	movs	r2, #100	; 0x64
 8003e12:	fb02 f303 	mul.w	r3, r2, r3
 8003e16:	1acb      	subs	r3, r1, r3
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	3332      	adds	r3, #50	; 0x32
 8003e1c:	4a36      	ldr	r2, [pc, #216]	; (8003ef8 <LL_USART_SetBaudRate+0x458>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	4423      	add	r3, r4
 8003e2e:	b29c      	uxth	r4, r3
 8003e30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e34:	2200      	movs	r2, #0
 8003e36:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e38:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e3a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e3e:	4642      	mov	r2, r8
 8003e40:	464b      	mov	r3, r9
 8003e42:	1891      	adds	r1, r2, r2
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	415b      	adcs	r3, r3
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e4e:	4641      	mov	r1, r8
 8003e50:	1851      	adds	r1, r2, r1
 8003e52:	6039      	str	r1, [r7, #0]
 8003e54:	4649      	mov	r1, r9
 8003e56:	414b      	adcs	r3, r1
 8003e58:	607b      	str	r3, [r7, #4]
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e66:	4659      	mov	r1, fp
 8003e68:	00cb      	lsls	r3, r1, #3
 8003e6a:	4651      	mov	r1, sl
 8003e6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e70:	4651      	mov	r1, sl
 8003e72:	00ca      	lsls	r2, r1, #3
 8003e74:	4610      	mov	r0, r2
 8003e76:	4619      	mov	r1, r3
 8003e78:	4603      	mov	r3, r0
 8003e7a:	4642      	mov	r2, r8
 8003e7c:	189b      	adds	r3, r3, r2
 8003e7e:	673b      	str	r3, [r7, #112]	; 0x70
 8003e80:	464b      	mov	r3, r9
 8003e82:	460a      	mov	r2, r1
 8003e84:	eb42 0303 	adc.w	r3, r2, r3
 8003e88:	677b      	str	r3, [r7, #116]	; 0x74
 8003e8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003e8e:	2200      	movs	r2, #0
 8003e90:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003ea0:	4649      	mov	r1, r9
 8003ea2:	008b      	lsls	r3, r1, #2
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eaa:	4641      	mov	r1, r8
 8003eac:	008a      	lsls	r2, r1, #2
 8003eae:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003eb2:	f7fc fe27 	bl	8000b04 <__aeabi_uldivmod>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <LL_USART_SetBaudRate+0x458>)
 8003ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	2164      	movs	r1, #100	; 0x64
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	3332      	adds	r3, #50	; 0x32
 8003ece:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <LL_USART_SetBaudRate+0x458>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	4423      	add	r3, r4
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ee8:	609a      	str	r2, [r3, #8]
}
 8003eea:	bf00      	nop
 8003eec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef6:	bf00      	nop
 8003ef8:	51eb851f 	.word	0x51eb851f

08003efc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fd8c 	bl	8003a2c <LL_USART_IsEnabled>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d15e      	bne.n	8003fd8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f22:	f023 030c 	bic.w	r3, r3, #12
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	6851      	ldr	r1, [r2, #4]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	68d2      	ldr	r2, [r2, #12]
 8003f2e:	4311      	orrs	r1, r2
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	6912      	ldr	r2, [r2, #16]
 8003f34:	4311      	orrs	r1, r2
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	6992      	ldr	r2, [r2, #24]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	4619      	mov	r1, r3
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff fd83 	bl	8003a54 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	4619      	mov	r1, r3
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff fd90 	bl	8003a7a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003f5a:	f107 0308 	add.w	r3, r7, #8
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fb9a 	bl	8003698 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a1f      	ldr	r2, [pc, #124]	; (8003fe4 <LL_USART_Init+0xe8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d102      	bne.n	8003f72 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	61bb      	str	r3, [r7, #24]
 8003f70:	e021      	b.n	8003fb6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a1c      	ldr	r2, [pc, #112]	; (8003fe8 <LL_USART_Init+0xec>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d102      	bne.n	8003f80 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	e01a      	b.n	8003fb6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a1a      	ldr	r2, [pc, #104]	; (8003fec <LL_USART_Init+0xf0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d102      	bne.n	8003f8e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	61bb      	str	r3, [r7, #24]
 8003f8c:	e013      	b.n	8003fb6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a17      	ldr	r2, [pc, #92]	; (8003ff0 <LL_USART_Init+0xf4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d102      	bne.n	8003f9c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	e00c      	b.n	8003fb6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a15      	ldr	r2, [pc, #84]	; (8003ff4 <LL_USART_Init+0xf8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d102      	bne.n	8003faa <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	61bb      	str	r3, [r7, #24]
 8003fa8:	e005      	b.n	8003fb6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a12      	ldr	r2, [pc, #72]	; (8003ff8 <LL_USART_Init+0xfc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d101      	bne.n	8003fb6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00d      	beq.n	8003fd8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d009      	beq.n	8003fd8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	699a      	ldr	r2, [r3, #24]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69b9      	ldr	r1, [r7, #24]
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff fd64 	bl	8003aa0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003fd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3720      	adds	r7, #32
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40011000 	.word	0x40011000
 8003fe8:	40004400 	.word	0x40004400
 8003fec:	40004800 	.word	0x40004800
 8003ff0:	40011400 	.word	0x40011400
 8003ff4:	40004c00 	.word	0x40004c00
 8003ff8:	40005000 	.word	0x40005000

08003ffc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	fbb2 f3f3 	udiv	r3, r2, r3
 800400e:	4a07      	ldr	r2, [pc, #28]	; (800402c <LL_InitTick+0x30>)
 8004010:	3b01      	subs	r3, #1
 8004012:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <LL_InitTick+0x30>)
 8004016:	2200      	movs	r2, #0
 8004018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800401a:	4b04      	ldr	r3, [pc, #16]	; (800402c <LL_InitTick+0x30>)
 800401c:	2205      	movs	r2, #5
 800401e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000e010 	.word	0xe000e010

08004030 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004038:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff ffdd 	bl	8003ffc <LL_InitTick>
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004054:	4a04      	ldr	r2, [pc, #16]	; (8004068 <LL_SetSystemCoreClock+0x1c>)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6013      	str	r3, [r2, #0]
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000000 	.word	0x20000000

0800406c <__libc_init_array>:
 800406c:	b570      	push	{r4, r5, r6, lr}
 800406e:	4d0d      	ldr	r5, [pc, #52]	; (80040a4 <__libc_init_array+0x38>)
 8004070:	4c0d      	ldr	r4, [pc, #52]	; (80040a8 <__libc_init_array+0x3c>)
 8004072:	1b64      	subs	r4, r4, r5
 8004074:	10a4      	asrs	r4, r4, #2
 8004076:	2600      	movs	r6, #0
 8004078:	42a6      	cmp	r6, r4
 800407a:	d109      	bne.n	8004090 <__libc_init_array+0x24>
 800407c:	4d0b      	ldr	r5, [pc, #44]	; (80040ac <__libc_init_array+0x40>)
 800407e:	4c0c      	ldr	r4, [pc, #48]	; (80040b0 <__libc_init_array+0x44>)
 8004080:	f000 f826 	bl	80040d0 <_init>
 8004084:	1b64      	subs	r4, r4, r5
 8004086:	10a4      	asrs	r4, r4, #2
 8004088:	2600      	movs	r6, #0
 800408a:	42a6      	cmp	r6, r4
 800408c:	d105      	bne.n	800409a <__libc_init_array+0x2e>
 800408e:	bd70      	pop	{r4, r5, r6, pc}
 8004090:	f855 3b04 	ldr.w	r3, [r5], #4
 8004094:	4798      	blx	r3
 8004096:	3601      	adds	r6, #1
 8004098:	e7ee      	b.n	8004078 <__libc_init_array+0xc>
 800409a:	f855 3b04 	ldr.w	r3, [r5], #4
 800409e:	4798      	blx	r3
 80040a0:	3601      	adds	r6, #1
 80040a2:	e7f2      	b.n	800408a <__libc_init_array+0x1e>
 80040a4:	08004320 	.word	0x08004320
 80040a8:	08004320 	.word	0x08004320
 80040ac:	08004320 	.word	0x08004320
 80040b0:	08004324 	.word	0x08004324

080040b4 <memcpy>:
 80040b4:	440a      	add	r2, r1
 80040b6:	4291      	cmp	r1, r2
 80040b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80040bc:	d100      	bne.n	80040c0 <memcpy+0xc>
 80040be:	4770      	bx	lr
 80040c0:	b510      	push	{r4, lr}
 80040c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040ca:	4291      	cmp	r1, r2
 80040cc:	d1f9      	bne.n	80040c2 <memcpy+0xe>
 80040ce:	bd10      	pop	{r4, pc}

080040d0 <_init>:
 80040d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d2:	bf00      	nop
 80040d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d6:	bc08      	pop	{r3}
 80040d8:	469e      	mov	lr, r3
 80040da:	4770      	bx	lr

080040dc <_fini>:
 80040dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040de:	bf00      	nop
 80040e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040e2:	bc08      	pop	{r3}
 80040e4:	469e      	mov	lr, r3
 80040e6:	4770      	bx	lr
